{
  "contractAddress" : "0x0a1bbd57033f57e7b6743621b79fcb9eb2ce3676",
  "kind" : "p5js100",
  "projectId" : "54",
  "screensaverFileName" : "Square.Symphony",
  "script" : "\/\/ CC BY-NC-SA 4.0\nlet R;\nlet objs = [];\nlet minSideLength;\nlet palettes = [\n  [\"#E12A2A\", \"#F0871D\", \"#2E3F93\", \"#E1ECF4\", \"#882585\", \"#de5d5d\", \"#289D4D\"],\n  [\n    \"#fcff4b\",\n    \"#ffad05\",\n    \"#fdfffa\",\n    \"#5995ed\",\n    \"#4ecdc4\",\n    \"#F30100\",\n    \"#70d6ff\",\n    \"#ff70a6\",\n  ],\n  [\"#de183c\", \"#ffd35c\", \"#fd4a8e\", \"#08a9e5\", \"#7209b7\", \"#f0f0f0\", \"#f5822a\"],\n  [\n    \"#e4572e\",\n    \"#17bebb\",\n    \"#ffc914\",\n    \"#76b041\",\n    \"#05569b\",\n    \"#5594d0\",\n    \"#fffef4\",\n    \"#b00000\",\n  ],\n];\nlet colors = [];\nlet bgCol;\nlet spd = 1;\nlet offset = 0;\nlet objCount;\nlet rects = [];\nlet paletteOption;\nlet spdOption;\nlet offsetOption;\nlet gridOption;\nlet backgroundOption;\n\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n  rectMode(CENTER);\n  R = new Random();\n  colors = R.random_choice(palettes);\n\n  if (R.random_dec() < 0.3) {\n    spd = R.random_dec() < 0.5 ? 0.5 : 2;\n  }\n  if (R.random_dec() < 0.5) {\n    gridOption = true;\n  } else {\n    gridOption = false;\n  }\n\n  if (R.random_dec() < 0.4) {\n    offsetOption = true;\n  } else {\n    offsetOption = false;\n  }\n\n  if (R.random_dec() < 0.7) {\n    bgCol = \"#121212\";\n    backgroundOption = \"Black\";\n  } else {\n    bgCol = \"#0b0f30\";\n    backgroundOption = \"Navy\";\n  }\n\n  INIT();\n\n  if (palettes[0] == colors) {\n    paletteOption = \"Forest\";\n  } else if (palettes[1] == colors) {\n    paletteOption = \"Seaside\";\n  } else if (palettes[2] == colors) {\n    paletteOption = \"Bubblegum\";\n  } else if (palettes[3] == colors) {\n    paletteOption = \"Firecracker\";\n  }\n\n  if (spd == 1) {\n    spdOption = \"Middle\";\n  } else if (spd < 1) {\n    spdOption = \"Low\";\n  } else {\n    spdOption = \"High\";\n  }\n\n  console.log(\"ColorPalette\", paletteOption);\n  console.log(\"Speed\", spdOption);\n  console.log(\"Offset\", offsetOption);\n  console.log(\"Grid\", gridOption);\n  console.log(\"Background\", backgroundOption);\n}\n\nfunction draw() {\n  background(0);\n  fill(bgCol);\n  noStroke();\n  rect(width \/ 2, height \/ 2, minSideLength);\n  for (let i of objs) {\n    i.run();\n  }\n  drawGrid(gridOption);\n}\n\nfunction drawGrid(bl) {\n  if (bl) {\n    noFill();\n    stroke(255);\n    strokeWeight(minSideLength * 0.001);\n    for (let i of rects) {\n      let x = i[0];\n      let y = i[1];\n      let w = i[2];\n      square(x + w \/ 2, y + w \/ 2, w);\n    }\n  }\n}\n\nfunction divideSquare() {\n  R = new Random();\n  let gridCount = int(R.random_num(20, 33));\n  let gridW = minSideLength \/ gridCount;\n  let gridH = minSideLength \/ gridCount;\n  let emp = gridCount * gridCount;\n  let grids = [];\n\n  for (let j = 0; j < gridCount; j++) {\n    let arr = [];\n    for (let i = 0; i < gridCount; i++) {\n      arr[i] = false;\n    }\n    grids[j] = arr;\n  }\n\n  while (emp > 0) {\n    let w = int(R.random_num(1, 5));\n    let h = w;\n    let x = int(R.random_num(0, gridCount - w + 1));\n    let y = int(R.random_num(0, gridCount - h + 1));\n    let lap = true;\n    for (let j = 0; j < h; j++) {\n      for (let i = 0; i < w; i++) {\n        if (grids[x + i][y + j]) {\n          lap = false;\n          break;\n        }\n      }\n    }\n\n    if (lap) {\n      for (let j = 0; j < h; j++) {\n        for (let i = 0; i < w; i++) {\n          grids[x + i][y + j] = true;\n        }\n      }\n      let xx = x * gridW + (width - minSideLength) \/ 2;\n      let yy = y * gridH + (height - minSideLength) \/ 2;\n      let ww = w * gridW;\n      let hh = h * gridH;\n      rects.push([xx, yy, ww - offset, hh - offset]);\n      emp -= w * h;\n    }\n  }\n  for (let i = 0; i < rects.length; i++) {\n    objCount++;\n    objs.push(new Objct(rects[i][0], rects[i][1], rects[i][2]));\n  }\n}\n\nfunction easeInOutExpo(x) {\n  return x === 0\n    ? 0\n    : x === 1\n    ? 1\n    : x < 0.5\n    ? Math.pow(2, 20 * x - 10) \/ 2\n    : (2 - Math.pow(2, -20 * x + 10)) \/ 2;\n}\n\nfunction INIT() {\n  objs = [];\n  rects = [];\n  minSideLength = min(width, height) * 0.95;\n  objCount = 0;\n  if (offsetOption) {\n    offset = minSideLength * 0.008;\n  }\n  divideSquare();\n}\n\nfunction windowResized() {\n  resizeCanvas(windowWidth, windowHeight);\n  INIT();\n}\n\nclass Objct {\n  constructor(x, y, w) {\n    let rnd = int(R.random_num(0, 8) + 1);\n    if (rnd == 1) this.mtn = new Motion01(x + w \/ 2, y + w \/ 2, w);\n    else if (rnd == 2) this.mtn = new Motion02(x + w \/ 2, y + w \/ 2, w);\n    else if (rnd == 3) this.mtn = new Motion03(x + w \/ 2, y + w \/ 2, w);\n    else if (rnd == 4) this.mtn = new Motion04(x + w \/ 2, y + w \/ 2, w);\n    else if (rnd == 5) this.mtn = new Motion05(x + w \/ 2, y + w \/ 2, w);\n    else if (rnd == 6) this.mtn = new Motion06(x + w \/ 2, y + w \/ 2, w);\n    else if (rnd == 7) this.mtn = new Motion07(x + w \/ 2, y + w \/ 2, w);\n    else if (rnd == 8) this.mtn = new Motion08(x + w \/ 2, y + w \/ 2, w);\n  }\n\n  run() {\n    this.mtn.show();\n    this.mtn.move();\n  }\n}\n\nclass Motion01 {\n  constructor(x, y, w) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.n = int(R.random_num(3, 8));\n    this.sw = w \/ this.n;\n    this.t = -int(R.random_num(0, 10));\n    this.t1 = int(R.random_num(50, 120));\n    this.tStep = R.random_num(0.5, 1) * spd;\n    this.soc = int(R.random_num(0, 2));\n    this.ang = int(R.random_num(0, 4)) * (TAU \/ 4);\n    this.col1 = this.col2 = 0;\n    while (this.col1 == this.col2) {\n      this.col1 = R.random_choice(colors);\n      this.col2 = R.random_choice(colors);\n    }\n  }\n\n  show() {\n    push();\n    translate(this.x, this.y);\n    rotate(this.ang);\n    noFill();\n    strokeWeight(0);\n    strokeCap(SQUARE);\n    rect(0, 0, this.w);\n    drawingContext.setLineDash([this.w \/ this.n, this.w \/ this.n]);\n    strokeWeight(this.sw);\n    stroke(this.col2);\n\n    for (let i = 0; i < this.n; i++) {\n      let yy = map(\n        i,\n        0,\n        this.n - 1,\n        -this.w \/ 2 + this.sw \/ 2,\n        this.w \/ 2 - this.sw \/ 2\n      );\n      let zr = this.soc * ((i % 2) * this.sw);\n      drawingContext.lineDashOffset = zr + this.t * 0.5;\n      line(-this.w \/ 2, yy, this.w \/ 2, yy);\n    }\n    pop();\n  }\n\n  move() {\n    this.t += this.tStep;\n  }\n}\n\nclass Motion02 extends Motion01 {\n  constructor(x, y, w) {\n    super(x, y, w);\n    this.cx = 0;\n    this.cd = w * 0.5;\n  }\n\n  show() {\n    push();\n    translate(this.x, this.y);\n    rotate(this.ang);\n    noFill();\n    stroke(0);\n    strokeWeight(0);\n    rect(0, 0, this.w);\n    drawingContext.clip();\n    noStroke();\n    fill(this.col2);\n    circle(this.cx, 0, this.cd);\n    circle(this.cx - this.w, 0, this.cd);\n    pop();\n  }\n\n  move() {\n    this.t += this.tStep;\n    if (0 < this.t && this.t < this.t1) {\n      let nrm = norm(this.t, 0, this.t1 - 1);\n      this.cx = lerp(0, this.w, easeInOutExpo(nrm));\n    }\n    if (this.t > this.t1) {\n      this.t = 0;\n      this.cx = 0;\n    }\n  }\n}\n\nclass Motion03 extends Motion01 {\n  constructor(x, y, w) {\n    super(x, y, w);\n    this.t2 = this.t1 + 50;\n    this.d = this.w * 0.3;\n    this.sd = this.d;\n    this.sd0 = this.d;\n    this.sd1 = this.d * 4.5;\n    this.sw = this.d;\n  }\n\n  show() {\n    push();\n    translate(this.x, this.y);\n    rotate(this.ang);\n    noFill();\n    stroke(0);\n    strokeWeight(0);\n    rect(0, 0, this.w);\n    drawingContext.clip();\n    noStroke();\n    fill(this.col2);\n    circle(0, 0, this.d);\n    if (this.t < this.t1) {\n      noFill();\n      stroke(this.col2);\n      strokeWeight(this.sw);\n      circle(0, 0, this.sd - this.sw);\n    }\n    pop();\n  }\n\n  move() {\n    if (0 < this.t && this.t < this.t1) {\n      let nrm = norm(this.t, 0, this.t1);\n      this.sd = lerp(this.sd0, this.sd1, easeInOutExpo(nrm));\n      this.sw = lerp(this.d, 0, nrm);\n    }\n    if (this.t > this.t2) {\n      this.t = 0;\n      this.sd = this.sd0;\n    }\n    this.t += this.tStep;\n  }\n}\n\nclass Motion04 extends Motion01 {\n  constructor(x, y, w) {\n    super(x, y, w);\n    this.d = this.w * 0.3;\n    this.rad = this.w * 0.3;\n    this.circles = [];\n    this.cNum = 6;\n    for (let i = 0; i < this.cNum; i++) {\n      this.circles.push({\n        a: 0,\n        d: map(i, 0, this.cNum - 1, this.d, this.d * 0.2),\n      });\n    }\n    this.t1 = int(R.random_num(120, 200));\n    this.cols = [];\n    for (let i = 0; i < colors.length; i++) {\n      this.cols.push(colors[i]);\n    }\n    shuffle(this.cols, true);\n  }\n\n  show() {\n    push();\n    translate(this.x, this.y);\n    rotate(this.ang);\n    noStroke();\n    fill(this.col1);\n    for (let c of this.circles) {\n      circle(this.rad * cos(c.a), this.rad * sin(c.a), c.d);\n    }\n    pop();\n  }\n\n  move() {\n    if (0 < this.t && this.t < this.t1) {\n      let nrm = norm(this.t, 0, this.t1);\n      for (let i = 0; i < this.cNum; i++) {\n        let c = this.circles[i];\n        c.a = lerp(\n          0,\n          TAU,\n          pow(easeInOutExpo(nrm), map(i, 0, this.cNum - 1, 0.7, 5))\n        );\n      }\n    }\n    if (this.t > this.t1) {\n      this.t = 0;\n      for (let i = 0; i < this.cNum; i++) {\n        let c = this.circles[i];\n        c.a = 0;\n      }\n    }\n    this.t += this.tStep;\n  }\n}\n\nclass Motion05 extends Motion01 {\n  constructor(x, y, w) {\n    super(x, y, w);\n    this.cells = [];\n    this.size = this.w \/ this.n;\n    this.tmp = R.random_num(0.02, 0.05);\n    let cols = [];\n    for (let i = 0; i < colors.length; i++) {\n      cols.push(colors[i]);\n    }\n    for (let i = 0; i < this.n; i++) {\n      for (let j = 0; j < this.n; j++) {\n        let x = i * this.size + this.x - this.w \/ 2;\n        let y = j * this.size + this.y - this.w \/ 2;\n        this.cells.push({\n          x: x,\n          y: y,\n          c: R.random_choice(cols),\n          t: int(R.random_num(0, 1000)),\n        });\n      }\n    }\n    this.rnd = int(R.random_num(0, 2));\n  }\n\n  show() {\n    noStroke();\n    for (let i of this.cells) {\n      fill(i.c);\n      if (this.rnd == 0)\n        circle(\n          i.x + this.size \/ 2,\n          i.y + this.size \/ 2,\n          this.size * sin(this.t * this.tmp + i.t) * 0.75\n        );\n      else\n        square(\n          i.x + this.size \/ 2,\n          i.y + this.size \/ 2,\n          this.size * sin(this.t * this.tmp + i.t) * 0.75\n        );\n    }\n  }\n}\n\nclass Motion06 extends Motion01 {\n  constructor(x, y, w) {\n    super(x, y, w);\n    this.wt = int(R.random_num(1, 5));\n    this.cols = [];\n    for (let i = 0; i < colors.length; i++) {\n      this.cols.push(colors[i]);\n    }\n    shuffle(this.cols, true);\n  }\n\n  show() {\n    let amp = this.w \/ this.n;\n    push();\n    translate(this.x, this.y);\n    rotate(this.ang);\n    strokeWeight(0);\n    stroke(0);\n    noFill();\n    rect(0, 0, this.w);\n    drawingContext.clip();\n    noFill();\n    strokeWeight(this.w * 0.02);\n    for (let j = -1; j < this.n + 1; j++) {\n      let yy = map(j, 0, this.n, -this.w \/ 2, this.w \/ 2);\n      stroke(this.cols[floor((j + 1) % this.cols.length)]);\n      beginShape();\n      for (let i = -1; i <= this.w + 1; i++) {\n        let xx = i - this.w \/ 2;\n        let n = norm(i, 0, this.w);\n        vertex(xx, yy + amp * sin(n * this.wt * PI + this.t * 0.1));\n      }\n      endShape();\n    }\n    pop();\n  }\n}\n\nclass Motion07 extends Motion01 {\n  constructor(x, y, w) {\n    super(x, y, w);\n    this.ex = 0;\n    this.ey = 0;\n    this.ew = this.w * 0.2;\n    this.rnd = 1000;\n    this.init();\n  }\n\n  init() {\n    this.t1 = int(R.random_num(40, 100));\n    this.prnd = this.rnd;\n    while (this.rnd == this.prnd) {\n      this.rnd = int(R.random_num(0, 6));\n    }\n    this.ex0 = this.ex;\n    this.ey0 = this.ey;\n    if (this.rnd == 0) {\n      this.ex1 = 0;\n      this.ey1 = 0;\n    } else if (this.rnd == 1) {\n      this.ex1 = this.ew * 0.3;\n      this.ey1 = 0;\n    } else if (this.rnd == 2) {\n      this.ex1 = -this.ew * 0.3;\n      this.ey1 = 0;\n    } else if (this.rnd == 3) {\n      this.ex1 = 0;\n      this.ey1 = this.ew * 0.3;\n    } else if (this.rnd == 4) {\n      this.ex1 = 0;\n      this.ey1 = -this.ew * 0.3;\n    } else if (this.rnd == 5) {\n      this.ex1 = this.ex0;\n      this.ey1 = this.ey0;\n    }\n  }\n\n  show() {\n    push();\n    translate(this.x, this.y);\n    rotate(this.ang);\n    noStroke();\n    fill(this.col1);\n    circle(this.w * 0.28, 0, this.w * 0.35);\n    circle(-this.w * 0.28, 0, this.w * 0.35);\n    fill(this.col2);\n    circle(this.w * 0.28 + this.ex, this.ey, this.ew);\n    circle(-this.w * 0.28 + this.ex, this.ey, this.ew);\n    if (this.rnd == 5) {\n      fill(bgCol);\n      rect(0, -this.w * 0.3 + this.tn, this.w, -0 + this.tn * 2);\n    }\n    pop();\n  }\n\n  move() {\n    this.t += this.tStep;\n    if (0 < this.t && this.t < this.t1) {\n      let nrm = norm(this.t, 0, this.t1 - 1);\n      this.ex = lerp(this.ex0, this.ex1, easeInOutExpo(nrm));\n      this.ey = lerp(this.ey0, this.ey1, easeInOutExpo(nrm));\n      if (this.rnd == 5)\n        this.tn = lerp(0, this.w * 0.3, sin(easeInOutExpo(nrm) * PI));\n    }\n    if (this.t > this.t1) {\n      this.t = 0;\n      this.init();\n    }\n  }\n}\n\nclass Motion08 extends Motion01 {\n  constructor(x, y, w) {\n    super(x, y, w);\n    this.rad = this.w * 0.35;\n    this.pom = R.random_dec() < 0.5 ? -1 : 1;\n  }\n\n  show() {\n    push();\n    translate(this.x, this.y);\n    rotate(this.ang);\n    fill(this.col1);\n    for (let i = 0; i < 12; i++) {\n      let a = map(i, 0, 12, 0, TAU);\n      circle(this.rad * cos(a), this.rad * sin(a), this.w * 0.05);\n    }\n    let a = this.t * 0.02 * this.pom;\n    stroke(this.col2);\n    strokeWeight(this.w * 0.04);\n    line(0, 0, this.rad * cos(a), this.rad * sin(a));\n    line(\n      0,\n      0,\n      this.w * 0.2 * cos(a \/ TAU \/ 2),\n      this.w * 0.2 * sin(a \/ TAU \/ 2)\n    );\n    pop();\n  }\n}\n\nclass Random {\n  constructor() {\n    this.useA = false;\n    let sfc32 = function (uint128Hex) {\n      let a = parseInt(uint128Hex.substr(0, 8), 16);\n      let b = parseInt(uint128Hex.substr(8, 8), 16);\n      let c = parseInt(uint128Hex.substr(16, 8), 16);\n      let d = parseInt(uint128Hex.substr(24, 8), 16);\n      return function () {\n        a |= 0;\n        b |= 0;\n        c |= 0;\n        d |= 0;\n        let t = (((a + b) | 0) + d) | 0;\n        d = (d + 1) | 0;\n        a = b ^ (b >>> 9);\n        b = (c + (c << 3)) | 0;\n        c = (c << 21) | (c >>> 11);\n        c = (c + t) | 0;\n        return (t >>> 0) \/ 4294967296;\n      };\n    };\n    \/\/ seed prngA with first half of tokenData.hash\n    this.prngA = new sfc32(tokenData.hash.substr(2, 32));\n    \/\/ seed prngB with second half of tokenData.hash\n    this.prngB = new sfc32(tokenData.hash.substr(34, 32));\n    for (let i = 0; i < 1e6; i += 2) {\n      this.prngA();\n      this.prngB();\n    }\n  }\n  \/\/ random number between 0 (inclusive) and 1 (exclusive)\n  random_dec() {\n    this.useA = !this.useA;\n    return this.useA ? this.prngA() : this.prngB();\n  }\n  \/\/ random number between a (inclusive) and b (exclusive)\n  random_num(a, b) {\n    return a + (b - a) * this.random_dec();\n  }\n  \/\/ random integer between a (inclusive) and b (inclusive)\n  \/\/ requires a < b for proper probability distribution\n  random_int(a, b) {\n    return Math.floor(this.random_num(a, b + 1));\n  }\n  \/\/ random boolean with p as percent liklihood of true\n  random_bool(p) {\n    return this.random_dec() < p;\n  }\n  \/\/ random value in an array of items\n  random_choice(list) {\n    return list[this.random_int(0, list.length - 1)];\n  }\n}",
  "tokens" : [
    {
      "hash" : "0xf8180dfda43fb1f4ccb3dd077ef389d5e468d04b07e4b4ebde0fd0213f1b165e",
      "id" : "54000023"
    },
    {
      "hash" : "0xb37a601e1318c53915d82c5be93d2f9fc2ed7bfa09ebf7545d1dd952bccec4ce",
      "id" : "54000052"
    },
    {
      "hash" : "0xae9ebab81af729ed3027a18d8f8e859c32f00af581460c79574e62a6eebb1737",
      "id" : "54000093"
    },
    {
      "hash" : "0x0ff23da3f15c8139685924cb9482db05a3993837aaeeec321c95a29bbd6db519",
      "id" : "54000012"
    },
    {
      "hash" : "0xfe3ae3ef500611ed7c58596b7aa16e33cb2575f6995c399a8f29b1107c7acffa",
      "id" : "54000006"
    },
    {
      "hash" : "0x772b28253bc3ce9bb08daad7c4d475db7fdb933fd90bc272783a439a0bef6d3d",
      "id" : "54000091"
    },
    {
      "hash" : "0x8474feebc855aca047031f4da63a72c928dbdb5024434db33fa02d5434a5efbb",
      "id" : "54000063"
    },
    {
      "hash" : "0x218a16545c124b1f46ca4bf702db0ed42f4bbb7ea2535152ac82cefb99cf699f",
      "id" : "54000080"
    },
    {
      "hash" : "0x99df443b8a654d8a6eb8097e8e036aac86676922d20005c3ff0969d3149aaae4",
      "id" : "54000061"
    },
    {
      "hash" : "0x651b3afc47981561f805dad1bd411f59dee3c5cd66f46321bfa0e8642436e20f",
      "id" : "54000092"
    },
    {
      "hash" : "0xf22064f40e79a616ed03e85be63c2c2ecf677526bfcd9cc340714fd3ed901965",
      "id" : "54000064"
    },
    {
      "hash" : "0x75edfd1c8bc670ff796532275068b3bb465646232fa1d27dc9b3f965bc1c2b4d",
      "id" : "54000005"
    },
    {
      "hash" : "0x6331fad2b806b348389325edd1dacd0db3f92e882318be88693bf7fec4033e27",
      "id" : "54000049"
    },
    {
      "hash" : "0xcc7f9b7cd39598440cc8c394e317b3c60c9b30a3cb4860ab4dd68a147dd97a9a",
      "id" : "54000031"
    },
    {
      "hash" : "0x89fb8b3478901f2f6d4341dc11cd68af076e13cdabca6f3a3bff1f2acf5af11c",
      "id" : "54000077"
    },
    {
      "hash" : "0x4a1252e7ee9950bfcba772acb505f215f82b41f100ca77f1a55e7263d3673271",
      "id" : "54000044"
    },
    {
      "hash" : "0x83f555fcd8478e71ca536f3849d4e423d1c528a51c4a3a9607c73f3693b9573b",
      "id" : "54000098"
    },
    {
      "hash" : "0x0af76d2637397b31c5d022ff8acc5e1b9cc3eb6b86df08ab3e09c82d7c80fe99",
      "id" : "54000034"
    },
    {
      "hash" : "0x5ec22bca560a89c108e30d1732f00deae17d7c50496dd2f17447a1f5bd81dfc9",
      "id" : "54000056"
    },
    {
      "hash" : "0x2a920b24b20725e4be51ea4110b950dd01f37749f8bc8ef984b5cb5180189680",
      "id" : "54000074"
    },
    {
      "hash" : "0x95e0d69c60d5c251f8d6a1354e3f24556f43252c0abe9f77afbca3d24db78c0e",
      "id" : "54000011"
    },
    {
      "hash" : "0x5f9bb290432dcf312fbed5a82e428e7baea33567dc591f48aa1a45b3da562776",
      "id" : "54000078"
    },
    {
      "hash" : "0x13c29ec2f579c4553708d402d6365b7064e3accc0e61e748674d22a854d44530",
      "id" : "54000026"
    },
    {
      "hash" : "0x9a7b30df0c4f62752df4328c77c61267722a0bf95222a4d5cfc4764dd70bf8c2",
      "id" : "54000032"
    },
    {
      "hash" : "0x4fb166c736769e348eaf628b7b6e82891d3c7391641d194d5c300a495e01ae4b",
      "id" : "54000041"
    },
    {
      "hash" : "0xe8e014da5a2dbc3c3f6f7074a06796c3ec80cffb10128ca35e4bc019b59c8885",
      "id" : "54000015"
    },
    {
      "hash" : "0xcbc7cce9e38844b513a4b1923122e84fd766ca9a1583f90cae321e07542238f5",
      "id" : "54000021"
    },
    {
      "hash" : "0x86487d73a00cc27f8a39393ad84b315247c778a11339db7a5be588239656d7d5",
      "id" : "54000065"
    },
    {
      "hash" : "0xc2f1f9d8069a9547d4ed753c8d4ba5725d4eb0a6c1c6da7520b58f2925e69536",
      "id" : "54000043"
    },
    {
      "hash" : "0xd6fb425f43cd525fde00f9a713e75792ca84d5ba234a296e2fdf05cfd64679e8",
      "id" : "54000099"
    },
    {
      "hash" : "0xd2d1b3756b97a1b5d289488490afee3c5dca7e44ea30b16239c2216747a1e5ad",
      "id" : "54000097"
    },
    {
      "hash" : "0xc7a4875fb13277946531b9c491ef7f6df581deeecd26c7679e15e910ba828dc9",
      "id" : "54000087"
    },
    {
      "hash" : "0x09a4d9ba8d721b0c095a64c2fcadd05539b2403574cf50b6925e14203b570ebf",
      "id" : "54000055"
    },
    {
      "hash" : "0x05b2141a67433ed4accf0a5b15b42545a3693db3e4bbecc700a5b76550fe658b",
      "id" : "54000048"
    },
    {
      "hash" : "0x5c03203e0ae00e621774264d02629b6ccb9086a4156dda6da6654602ec038378",
      "id" : "54000033"
    },
    {
      "hash" : "0x7634e7cfc2d04fc87804acd530730a9aaa34413b246878e97faf6c55d21abb55",
      "id" : "54000054"
    },
    {
      "hash" : "0x17e742a793d078052a8d440d6264074b058e274cb2e7b5082232bac6caa8baee",
      "id" : "54000086"
    },
    {
      "hash" : "0x35cac44b287e1dc6fb878e54ec9f26660213157d32abbd3c322cb2a29f40c5c0",
      "id" : "54000051"
    },
    {
      "hash" : "0x7639b76248a3efdc4cb7cc12543cd85bea2a99dcfaf12b35fb35993ff3b01a45",
      "id" : "54000096"
    },
    {
      "hash" : "0x3fb90f1c55f5570d1e311c3fa8fa3d82ff7b29802683a25c940cc1bded9af89b",
      "id" : "54000081"
    },
    {
      "hash" : "0xf162465b16491f9af0389e303311e2362e43d346594bf3543eedcb0432eb8833",
      "id" : "54000040"
    },
    {
      "hash" : "0x1326daf29155c73781bfe989dfa37e195e7a03ad9a138075058d0f97ea02fd83",
      "id" : "54000013"
    },
    {
      "hash" : "0x3f21ed594e1762090324082b1bba2224d2440b6dc40cff767576a29796a55516",
      "id" : "54000075"
    },
    {
      "hash" : "0x3234c6db2a4c86b298b5ab5d39504ac0937a51bbef1f7625ae106f39d06335bc",
      "id" : "54000027"
    },
    {
      "hash" : "0x7d14a153ba575998c0e090c662c72f832ce0e27c0f18100a95f8bdc3440b53a2",
      "id" : "54000038"
    },
    {
      "hash" : "0x5bb2246f8ab4955246307479a0a20ae336a0fe865e8222888f55c5458b904f50",
      "id" : "54000004"
    },
    {
      "hash" : "0x784f92df76f9d3cd7348450e9bd1099d272d5c9b9eb2cbbe37eb7c25ea8f7f6c",
      "id" : "54000000"
    },
    {
      "hash" : "0xf6112ac4e868fc3c8641714fb1367c1cd9afd1611832c0507ad5e81ebaa8a4ac",
      "id" : "54000069"
    },
    {
      "hash" : "0x25550b596e8b8ee26e496bbce1946ee622fa5e6a6f99340017ea5784600026fc",
      "id" : "54000066"
    },
    {
      "hash" : "0x320b077ac602fa7b0f2e4be1860a049983c24cf37acb9e96b1849e34f65b0e0d",
      "id" : "54000014"
    },
    {
      "hash" : "0xbd4fe1dbca78c6e7d5576a4a7ca50c48cd4109903c63086c440ba590ead5297a",
      "id" : "54000035"
    },
    {
      "hash" : "0x020b7fd80450f7ead4bf33b62039ead8343731234fc162a06f0fe6fa767cc72c",
      "id" : "54000076"
    },
    {
      "hash" : "0x23284b5897189a98471440242bccf4465ffd95548fcc06845d199ffea71bceec",
      "id" : "54000059"
    },
    {
      "hash" : "0xe682ec6bbc9e8744207f2fc50d12c2654c08dd7ab93511140e6b41270dda6705",
      "id" : "54000010"
    },
    {
      "hash" : "0xc9145eadcf35a01a3d901544c429fd3f026e4ee888399868d1efe6f44074d573",
      "id" : "54000001"
    },
    {
      "hash" : "0x8e3e5837a22eaa34dff29272da497efbc4d3bcfd7e63259e83b4f5305bff2a4a",
      "id" : "54000068"
    },
    {
      "hash" : "0x4d0eb4bd8cbc9c7e1a8ba705211a155950250dd6d8b9124f7ac554acdb14cd4e",
      "id" : "54000095"
    },
    {
      "hash" : "0x27daa34e1500bcd4728ddc356acdff57a0d7e0d6b365d34998a780b094a15ccd",
      "id" : "54000094"
    },
    {
      "hash" : "0xd24e5f43f17fcc2c8b24d06d0ec98c895286797b136cfa22cba5ceb5470555fd",
      "id" : "54000025"
    },
    {
      "hash" : "0xd19835d3a240b447d888bd81807377e5c133fab274d805bc174d23ad683804e2",
      "id" : "54000067"
    },
    {
      "hash" : "0x2e63cf98c3bb63fd74367414c1341e1c9cb232671e148f92ef95ce233beeead7",
      "id" : "54000082"
    },
    {
      "hash" : "0x6562964a7fab78b44740a67ec1056b2ec8b5710f93922c5ef07b96d68aa986c0",
      "id" : "54000022"
    },
    {
      "hash" : "0xc2d71630a5c52ce9559c85ebe4d7890fdf044a1e5fc7c69cc0a33e54c124bd88",
      "id" : "54000083"
    },
    {
      "hash" : "0xf2d69742b55f320f1762e27ac4dcf5afc56723bc9f7cd93630b33ff94045e7ea",
      "id" : "54000024"
    },
    {
      "hash" : "0x9b4004ed78cf09d951bde3ee58fd355b1f0cc915f82ab809f67db966874e858e",
      "id" : "54000037"
    },
    {
      "hash" : "0x6068f1b4368f6f2142de8c2ab890e5fbb9d17703d20a1f2c7fee87414b952c4f",
      "id" : "54000028"
    },
    {
      "hash" : "0x1b9338e8d4a660e932808632b5a3d163e44b9eb0d9be4542abf8cb8661abd8dd",
      "id" : "54000030"
    },
    {
      "hash" : "0x7328d3b4eaf8c48b1c72ccc4c6a608cd720e033e4f5bdead1eaf73fba37e8e69",
      "id" : "54000090"
    },
    {
      "hash" : "0x165117d6bcf43834e8b233ec90c3db3b638e4ca5cac7310a50de0c93581320ea",
      "id" : "54000042"
    },
    {
      "hash" : "0x89da31d14340f22126c0e33b39e2e988a10608822aea07f40a7d95d6fc6e4d62",
      "id" : "54000050"
    },
    {
      "hash" : "0x53009cabcdb2606770f4705a3a618f0e5a6e3bdc6895bdebef3f6a22faf3bfa6",
      "id" : "54000003"
    },
    {
      "hash" : "0xb35bdca3b966789c4c87c75950fd28ee0c00a795240f461c04c5ba1e08048322",
      "id" : "54000058"
    },
    {
      "hash" : "0x4647e003dcdd6d3cc68be9be869a66f31dd88d5d012826703a0ada22bd06b762",
      "id" : "54000053"
    },
    {
      "hash" : "0xd0c3459e3ae49a911b1db23a5f562c5d2b2576b6317aeb624e5acce2de55795f",
      "id" : "54000036"
    },
    {
      "hash" : "0xe6c695c636315a9ae2c11e74bd8fe7fe4d30b98e119d61460f0016ffe2121242",
      "id" : "54000007"
    },
    {
      "hash" : "0xf1638302a35a9ce4ad5160f45033a51dfb4419a595b64c241c3c2b61847a340f",
      "id" : "54000057"
    },
    {
      "hash" : "0xcd1d77a8731f9309ec9842acd5e24d961b11e9934eedbfb8fd46a98a61f5f803",
      "id" : "54000046"
    },
    {
      "hash" : "0x78a244fec85efb916cecfec2acec3a4cca81823ff83b04c359a3db0cf3ddf9a1",
      "id" : "54000018"
    },
    {
      "hash" : "0x54c39586efb6ce4a6f3acb306f500281d32271f23a80789d47d420c144a019d7",
      "id" : "54000085"
    },
    {
      "hash" : "0x1029291ff47e14d6df419ad9309a97561fac33d13e7c8740d551dc631cd61581",
      "id" : "54000017"
    },
    {
      "hash" : "0x36e154376250d4ad47a7378c21a3f9a9dae84bd1b13b905498c931355aeaa6c0",
      "id" : "54000072"
    },
    {
      "hash" : "0x58ba1464159f36e01bf650b995f6d25e937a6e81c9a40c7d1257f994edbacba6",
      "id" : "54000073"
    },
    {
      "hash" : "0xc0869aca10b7da88a179bb625c11b944ba1a88267d9d6c129c69eb29924c025d",
      "id" : "54000019"
    },
    {
      "hash" : "0x550afe5f0b3f81a78af52f383ddbc0613d297db060f4d750442577d120b580e2",
      "id" : "54000045"
    },
    {
      "hash" : "0x972b812648fa0c452166679a6dcca43a3b320bae7cf1017f1a9e7789a4143c43",
      "id" : "54000020"
    },
    {
      "hash" : "0x1bc416935ff3d02e9e0c56720238b61578cb0635b21898e160a21b4a8d8bac81",
      "id" : "54000084"
    },
    {
      "hash" : "0x9cbf469cba0304c65d0f76d47f7f56b697033b123e069e18de6373f77c28f19e",
      "id" : "54000088"
    },
    {
      "hash" : "0xc50dc811e6d503a98d698009c42168ac454dfc2f68be480b22a8798aef6772a9",
      "id" : "54000047"
    },
    {
      "hash" : "0xa55d237f5f665c678779ba8c1c1b02173e39ec5e0f18c85663bbeb4518bc0699",
      "id" : "54000002"
    },
    {
      "hash" : "0xa19e5f2a620a9c212b9d8eaae6ba351ee470f0343dda51c75464853cd8d5cd41",
      "id" : "54000016"
    },
    {
      "hash" : "0x8767a2fac9e3194916c8be673573e443f2becedf19a4e70d25e377d7602321ca",
      "id" : "54000070"
    },
    {
      "hash" : "0x2ba147da87dfc44f2d2a45752c83cb51a645e86e822394a5f2ea370fb01a974a",
      "id" : "54000008"
    },
    {
      "hash" : "0x91e4e86a51575c55525db741b4b1ae1fa1e179abf2cf579f7a8ccb51f34eefbb",
      "id" : "54000029"
    },
    {
      "hash" : "0x52b74e132542479a8721217a5c1edf7ec8eb4eb1fa6036dddc0477bb3e285ed3",
      "id" : "54000089"
    },
    {
      "hash" : "0xcb7889f05055d85b66916844d53dab34f85a9a8326f23d1c740b177d2adb90be",
      "id" : "54000060"
    },
    {
      "hash" : "0x132aaf3093299b80c2cc5cd6721adb665782c842492d8cff3e7b75ef89667840",
      "id" : "54000039"
    },
    {
      "hash" : "0xb0396bbb46602d1154d90049326f4f2c390a2537aa29a7242eae9a4dc6316a71",
      "id" : "54000009"
    },
    {
      "hash" : "0xcd630a0f0ed5999ffd2f885ea353cd377846fa8d26b26e7412bdf86fb40d9cae",
      "id" : "54000071"
    },
    {
      "hash" : "0x87bc3c03b8154e9c4ada2e342db630c53fae2869b17d72ab26dfe182df190b6d",
      "id" : "54000079"
    },
    {
      "hash" : "0x3e6ebf30d4d433f7834789f9f684a8c39c6866e33b2f6b25605d952f08bcb2b6",
      "id" : "54000062"
    }
  ]
}