{
  "contractAddress" : "0x0a1bbd57033f57e7b6743621b79fcb9eb2ce3676",
  "kind" : "p5js",
  "projectId" : "18",
  "script" : "class Random{constructor(){this.useA=!1;let i=function(i){let t=parseInt(i.substr(0,8),16),s=parseInt(i.substr(8,8),16),e=parseInt(i.substr(16,8),16),h=parseInt(i.substr(24,8),16);return function(){t|=0,s|=0,e|=0,h|=0;let i=(t+s|0)+h|0;return h=h+1|0,t=s^s>>>9,s=e+(e<<3)|0,e=e<<21|e>>>11,e=e+i|0,(i>>>0)\/4294967296}};this.prngA=new i(tokenData.hash.substr(2,32)),this.prngB=new i(tokenData.hash.substr(34,32));for(let i=0;i<1e6;i+=2)this.prngA(),this.prngB()}random_dec(){return this.useA=!this.useA,this.useA?this.prngA():this.prngB()}random_num(i,t){return i+(t-i)*this.random_dec()}random_int(i,t){return Math.floor(this.random_num(i,t+1))}random_bool(i){return this.random_dec()<i}random_choice(i){return i[this.random_int(0,i.length-1)]}}const R=new Random,palettes=[{name:\"toghu original\",background:{r:0,g:0,b:0},colors:[{r:0,g:122,b:94},{r:206,g:17,b:38},{r:252,g:209,b:22},{r:255,g:255,b:255}]},{name:\"regal\",background:{r:0,g:0,b:0},colors:[{r:207,g:219,b:213},{r:232,g:237,b:223},{r:245,g:203,b:92},{r:51,g:53,b:51}]},{name:\"rose\",background:{r:0,g:0,b:0},colors:[{r:250,g:221,b:225},{r:255,g:196,b:214},{r:255,g:166,b:193},{r:255,g:135,b:171},{r:255,g:93,b:143},{r:255,g:151,b:183},{r:255,g:172,b:197},{r:255,g:202,b:212},{r:244,g:172,b:183}]}],defaultPalette={name:\"default\",background:{r:0,g:0,b:0},colors:[{r:230,g:230,b:230}]},ndopPalette={name:\"ndop original\",background:{r:2,g:62,b:138},colors:[{r:163,g:213,b:255},{r:245,g:247,b:250}]},isNdop=R.random_bool(.1),palette=isNdop&&R.random_bool(.5)?ndopPalette:R.random_choice(palettes),isNdopPalette=palette==ndopPalette,isChaotic=!isNdopPalette&&R.random_bool(.6),isGlitch=!isNdop&&R.random_bool(.6),isOverstitch=!(isNdop||isGlitch||isChaotic)&&R.random_bool(.25),gridSize={x:isNdop?R.random_int(4,10):R.random_int(1,14),y:isNdop?R.random_int(4,10):R.random_int(1,14)},maxSize=7,minSize=2,gridXLessThan=gridSize.x>=2&&gridSize.x<=7,gridYLessThan=gridSize.y>=2&&gridSize.y<=7,randMargin=10*R.random_int(4,9),isNoisy=!!isNdop||R.random_bool(.8);let rarities={isOverstitch:isOverstitch,isNdop:isNdop,isGlitch:isGlitch,isNoisy:isNoisy,isChaotic:isChaotic,palette:palette,isFloral:!(isNdop||!gridXLessThan||!gridYLessThan)&&R.random_bool(.25)};const config={gridSize:gridSize,gridMargin:{x:isGlitch?randMargin:40,y:isGlitch?randMargin:40},isCascade:R.random_bool(.5),canvasWidth:1080,canvasHeight:1440,gridSpacing:R.random_choice([8,12,16,20]),...rarities},flowerOptions=[{m:2,n:1,o:0,c:0},{m:4,n:1,o:2,c:1},{m:6,n:1,o:2,c:1},{m:8,n:1,o:4,c:2}],ndopOptions=[{d:1,n:2},{d:1,n:4},{d:1,n:6},{d:1,n:10},{d:3,n:2},{d:3,n:4},{d:3,n:8},{d:3,n:10},{d:5,n:4},{d:5,n:6},{d:5,n:8},{d:7,n:2},{d:7,n:4},{d:7,n:6},{d:7,n:8},{d:7,n:10},{d:9,n:2},{d:9,n:4},{d:9,n:5},{d:9,n:6},{d:9,n:8},{d:9,n:10}],ndopOverlayOptions=[{d:1,n:5},{d:1,n:9},{d:2,n:1},{d:2,n:3},{d:2,n:5},{d:2,n:7},{d:2,n:9},{d:3,n:5},{d:4,n:1},{d:4,n:3},{d:4,n:5},{d:4,n:7},{d:4,n:9},{d:6,n:1},{d:6,n:5},{d:6,n:7},{d:8,n:3},{d:8,n:5},{d:8,n:7},{d:8,n:9},{d:10,n:1},{d:10,n:3},{d:10,n:7}],gridDivider=(i,t,s,e)=>shuffle(Array.from({length:s},((h,o)=>{var r=(s-o-1)*i,n=(s-o-1)*t,a=Math.max(e-n,i),l=1+Math.min(e-a,t-a,e-r-i),c=Math.floor(R.random_dec()*l+a);return e-=c,c}))),shuffle=i=>{for(let t=i.length-1;t>0;t--){const s=Math.floor(R.random_dec()*(t+1));[i[t],i[s]]=[i[s],i[t]]}return i},pickRndColor=(i=defaultPalette)=>R.random_choice(i.colors),reduceDenominator=(i,t)=>t\/function i(t,s){return s?i(s,t%s):t}(i,t),normalise=(i,t,s)=>(i-s)\/(t-s);class Coils{constructor(i,t,s=defaultPalette,e,h,o,r){this.width=i,this.height=t,this.palette=s,this.isNoisy=e,this.isCascade=h,this.isOverstitch=o,this.isGlitch=r;const n=1.5707964,a=3.1415928;this.isVertical=R.random_bool(.5),this.radian=R.random_choice([n,a,6.2831856]),this.primaryColor=pickRndColor(this.palette),this.containerSize=this.isVertical?this.width:this.height,this.strokeSize=Math.sqrt(this.width*this.height)\/100,this.theta=1,this.thetaDots=1,this.coilSpacing=2,this.noiseMult=2,this.coilAmount=R.random_int(2,10),this.coilWidth=this.containerSize\/this.coilAmount\/this.coilSpacing,this.coilLength=this.isVertical?this.height:this.width,this.transXArr=[],this.transYArr=[],this.dotStepsArr=[],this.noiseXTopArr=[],this.noiseYTopArr=[],this.noiseXBtmArr=[],this.noiseYBtmArr=[],this.noiseTopDotsArr=[],this.noiseBtmDotsArr=[],this.notGlitchCols=[],this.lineThickArr=[],this.glitchTopCols=[],this.glitchBtmCols=[]}generate(){for(let i=0;i<this.coilAmount;i++){this.isVertical?this.isGlitch&&this.transYArr.push(R.random_bool(.5)):this.isGlitch&&this.transXArr.push(R.random_bool(.5)),this.dotStepsArr.push(R.random_int(5,10)),this.noiseXTopArr.push([]),this.noiseYTopArr.push([]);for(let t=0;t<this.coilLength;t+=this.theta){const t=this.isNoisy?R.random_dec()*this.noiseMult:0,s=this.isNoisy?R.random_dec()*this.noiseMult:0;this.noiseXTopArr[i].push(t),this.noiseYTopArr[i].push(s)}this.noiseXBtmArr.push([]),this.noiseYBtmArr.push([]);for(let t=this.coilLength;t>0;t-=this.theta){const t=this.isNoisy?R.random_dec()*this.noiseMult:0,s=this.isNoisy?R.random_dec()*this.noiseMult:0;this.noiseXBtmArr[i].push(t),this.noiseYBtmArr[i].push(s)}this.isGlitch||this.notGlitchCols.push(pickRndColor(this.palette)),this.lineThickArr.push(R.random_int(2,4)),this.glitchTopCols.push([]),this.noiseTopDotsArr.push([]);for(let t=0;t<this.coilLength;t+=this.thetaDots){this.isGlitch&&this.glitchTopCols[i].push(pickRndColor(this.palette));const t=this.isNoisy?4*R.random_dec():R.random_dec();this.noiseTopDotsArr[i].push(t)}this.glitchBtmCols.push([]),this.noiseBtmDotsArr.push([]);for(let t=this.coilLength;t>0;t-=this.thetaDots){this.isGlitch&&this.glitchBtmCols[i].push(pickRndColor(this.palette));const t=this.isNoisy?4*R.random_dec():R.random_dec();this.noiseBtmDotsArr[i].push(t)}}}show(i=1){noFill(),strokeWeight(this.strokeSize*i);let t=this.primaryColor;stroke(color(t.r,t.g,t.b));let s=this.coilWidth;for(let t=0;t<this.coilAmount;t++){push();const e=s\/(4*this.coilAmount);if(this.isVertical)if(this.isGlitch){const h=this.transYArr[t]?e:-e;translate(s*i,h*i)}else translate(s*i,0);else if(this.isGlitch){const h=this.transXArr[t]?e:-e;translate(h*i,s*i)}else translate(0,s*i);let h=this.dotStepsArr[t];beginShape();for(let s=0;s<this.coilLength;s+=this.theta){const e=this.noiseXTopArr[t][s],h=this.noiseYTopArr[t][s];let o=s,r=cos(s*radians(this.radian))*this.coilWidth;this.isVertical&&(o=sin(s*radians(this.radian))*this.coilWidth,this.isOverstitch&&(o=tan(s*radians(this.radian))*this.coilWidth),r=s),curveVertex((o+e)*i,(r+h)*i)}endShape(),beginShape();for(let s=this.coilLength;s>0;s-=this.theta){const e=this.noiseXBtmArr[t][s],h=this.noiseYBtmArr[t][s];let o=s,r=-sin(s*radians(this.radian))*this.coilWidth;this.isVertical&&(o=-sin(s*radians(this.radian))*this.coilWidth,this.isOverstitch&&(o=-tan(s*radians(this.radian))*this.coilWidth),r=s),curveVertex((o+e)*i,(r+h)*i)}if(endShape(),!this.isGlitch){let i=this.notGlitchCols[t];stroke(color(i.r,i.g,i.b))}const o=this.lineThickArr[t];strokeWeight(o*i),beginShape();for(let s=0;s<this.coilLength;s+=this.thetaDots){if(this.isGlitch){let i=this.glitchTopCols[t][s];stroke(color(i.r,i.g,i.b))}let e=s,o=cos(s*radians(this.radian))*this.coilWidth;this.isVertical&&(e=sin(s*radians(this.radian))*this.coilWidth,o=s);const r=this.noiseTopDotsArr[t][s];Math.round(s)%h==0&&(this.isVertical?point((e+r)*i,o*i):point(e*i,(o+r)*i))}endShape(),beginShape();for(let s=this.coilLength-1;s>0;s-=this.thetaDots){if(this.isGlitch){let i=this.glitchBtmCols[t][s];stroke(color(i.r,i.g,i.b))}let e=s,o=-cos(s*radians(this.radian))*this.coilWidth;this.isVertical&&(e=-sin(s*radians(this.radian))*this.coilWidth,o=s);const r=this.noiseBtmDotsArr[t][s];Math.round(s)%h==0&&(this.isVertical?point((e+r)*i,o*i):point(e*i,(o+r)*i))}endShape(),pop(),s+=this.coilWidth*this.coilSpacing}}}class Dots{constructor(i,t,s=defaultPalette,e,h,o,r){this.width=i,this.height=t,this.palette=s,this.isNoisy=e,this.isCascade=h,this.isOverstitch=o,this.isGlitch=r,this.density=R.random_int(5,30),this.rows=Math.ceil(this.height\/this.density),this.cols=Math.ceil(this.width\/this.density),this.pointColours=[],this.pointSizes=[],this.noiseXArr=[],this.noiseYArr=[]}generate(){for(let i=0;i<this.rows;i++){this.pointColours.push([]),this.pointSizes.push([]),this.noiseXArr.push([]),this.noiseYArr.push([]);for(let t=0;t<this.cols;t++)this.pointColours[i].push(pickRndColor(this.palette)),this.pointSizes[i].push(R.random_int(1,4)),this.noiseXArr[i].push(R.random_dec()*this.density),this.noiseYArr[i].push(R.random_dec()*this.density)}}show(i=1){noFill(),noStroke();for(let t=0;t<this.rows;t++)for(let s=0;s<this.cols;s++){const e=this.pointColours[t][s],h=this.pointSizes[t][s];stroke(color(e.r,e.g,e.b)),strokeWeight(h*i);const o=this.noiseXArr[t][s],r=this.noiseYArr[t][s];let n=s*this.density+o,a=t*this.density+r;point(n*i,a*i)}}}class Flower{constructor(i,t,s=defaultPalette,e,h,o,r){this.width=i,this.height=t,this.palette=s,this.isNoisy=e,this.isCascade=h,this.isOverstitch=o,this.isGlitch=r,this.radius=this.width,this.isQuadrilateral=!1,this.innerContainerWidth=this.width,this.innerContainerHeight=this.height;if(i>t+.5*t){this.radius=this.height,this.innerContainerWidth=this.width;const i=.01,t=this.innerContainerHeight,s=this.innerContainerWidth;this.radius=t>s+s*i?this.innerContainerWidth:this.innerContainerHeight}else if(t>i+.5*i){this.innerContainerHeight=this.height;const i=.01,t=this.innerContainerHeight,s=this.innerContainerWidth;this.radius=t>s+s*i?this.innerContainerWidth:this.innerContainerHeight}else{this.isQuadrilateral=!0;const i=.01,t=this.innerContainerHeight,s=this.innerContainerWidth;this.radius=t>s+s*i?this.innerContainerWidth:this.innerContainerHeight}const n=6.2831856;var a,l,c;this.strokeSize=Math.round(10*(a=this.radius,l=window.innerWidth-80,(a-(c=0))\/(l-c))),this.flowerBg=R.random_choice(flowerOptions),this.bgScale=R.random_num(1.8,2),this.bgM=this.flowerBg.m,this.bgN=this.flowerBg.n,this.bgK=this.bgM\/this.bgN,this.bgTheta=.002,this.bgLineStep=n*reduceDenominator(this.bgM,this.bgN),this.flowerBGNoiseX=[],this.flowerBGNoiseY=[],this.flowerOuter=this.flowerBg,this.outerM=this.flowerOuter.m,this.outerN=this.flowerOuter.n,this.outerK=this.outerM\/this.outerN,this.outerTheta=.002,this.outerScale=this.bgScale+.25,this.outerLineStep=n*reduceDenominator(this.outerM,this.outerN),this.flowerOuterStroke=pickRndColor(this.palette),this.flowerOuterFill=pickRndColor(this.palette),this.flowerInnerFill=pickRndColor(this.palette),this.flowerOuterNoiseX=[],this.flowerOuterNoiseY=[],this.flowerInner=R.random_choice(flowerOptions),this.innerM=this.flowerInner.m,this.innerN=this.flowerInner.n,this.innerO=this.flowerInner.o,this.innerC=this.flowerInner.c,this.innerK=this.innerM\/this.innerN,this.innerTheta=this.outerTheta,this.innerDetailCount=2*this.innerM,this.innerScale=R.random_num(2.1,3),this.innerLineStep=n*reduceDenominator(this.innerM,this.innerN),this.flowerInnerNoiseX=[],this.flowerInnerNoiseY=[],this.flowerDetailsNoiseX=[],this.flowerDetailsNoiseY=[],this.translateNoise=this.isGlitch?R.random_int(-2,2):2,this.flowerOutline=R.random_bool(.5),this.dotMotif=new Dots(this.width,this.height,this.palette,this.isNoisy,this.isCascade,this.isOverstitch,this.isGlitch)}generate(){this.dotMotif.generate();for(let i=0;i<this.bgLineStep;i+=this.bgTheta)this.flowerBGNoiseX.push(2*R.random_dec()),this.flowerBGNoiseY.push(2*R.random_dec());for(let i=0;i<this.outerLineStep;i+=this.outerTheta){const i=this.isNoisy?R.random_dec():0,t=this.isNoisy?R.random_dec():0;this.flowerOuterNoiseX.push(i),this.flowerOuterNoiseY.push(t)}for(let i=0;i<this.innerLineStep;i+=this.innerTheta){const i=this.isNoisy?R.random_dec():0,t=this.isNoisy?R.random_dec():0;this.flowerInnerNoiseX.push(i),this.flowerInnerNoiseY.push(t)}for(let i=this.innerO;i<this.innerDetailCount-this.innerC;i++){this.flowerDetailsNoiseX.push([]),this.flowerDetailsNoiseY.push([]);for(let t=0;t<this.innerDetailCount;t++){const t=this.isNoisy?R.random_dec():0,s=this.isNoisy?R.random_dec():0;let e=i-this.innerO;this.flowerDetailsNoiseX[e].push(t),this.flowerDetailsNoiseY[e].push(s)}}}show(i=1){this.flowerOutline?(noFill(),noStroke(),this.dotMotif.show(i)):(this.dotMotif.show(i),noFill(),noStroke()),push(),translate(-this.innerContainerWidth\/this.translateNoise*i,-this.innerContainerHeight\/this.translateNoise*i),fill(color(this.palette.background.r,this.palette.background.g,this.palette.background.b)),strokeWeight(this.strokeSize*i),beginShape();for(let t=0;t<this.bgLineStep;t+=this.bgTheta){const s=this.flowerBGNoiseY[Math.ceil(t)],e=this.flowerBGNoiseY[Math.ceil(t)],h=this.radius\/this.bgScale*Math.sin(t*this.bgK),o=h*Math.sin(t)+this.innerContainerWidth+s,r=h*Math.cos(t)+this.innerContainerHeight+e;curveVertex(o*i,r*i)}endShape();let t=this.flowerOuterStroke;stroke(color(this.palette.background.r,this.palette.background.g,this.palette.background.b)),t=this.flowerOuterFill,fill(color(t.r,t.g,t.b)),beginShape();for(let t=0;t<this.outerLineStep;t+=this.outerTheta){const s=this.flowerOuterNoiseX[Math.ceil(t)],e=this.flowerOuterNoiseY[Math.ceil(t)];let h=this.radius\/this.outerScale*Math.sin(t*this.outerK),o=h*Math.sin(t)+this.innerContainerWidth+s,r=h*Math.cos(t)+this.innerContainerHeight+e;curveVertex(o*i,r*i)}endShape(),stroke(color(this.palette.background.r,this.palette.background.g,this.palette.background.b)),t=this.flowerInnerFill,fill(color(t.r,t.g,t.b)),beginShape();for(let t=0;t<this.innerLineStep;t+=this.innerTheta){const s=this.flowerInnerNoiseX[Math.ceil(t)],e=this.flowerInnerNoiseY[Math.ceil(t)];let h=this.radius\/this.innerScale*Math.sin(t*this.innerK),o=h*Math.sin(t)+this.innerContainerWidth+s,r=h*Math.cos(t)+this.innerContainerHeight+e;curveVertex(o*i,r*i)}endShape(),t=this.palette.background,stroke(color(t.r,t.g,t.b));for(let t=this.innerO;t<this.innerDetailCount-this.innerC;t++){let s=t,e=this.radius\/this.innerDetailCount\/this.innerScale\/4*t;strokeWeight(e\/1.7*i);for(let h=0;h<this.innerDetailCount;h++){let o=t-this.innerO;const r=this.flowerDetailsNoiseX[o][h],n=this.flowerDetailsNoiseY[o][h];let a=e*sin(s)+this.innerContainerWidth+r,l=e*cos(s)+this.innerContainerHeight+n;point(a*i,l*i),s+=TAU\/this.innerDetailCount}}pop()}}class Scribbles{constructor(i,t,s=defaultPalette,e,h,o,r){this.width=i,this.height=t,this.palette=s,this.isNoisy=e,this.isCascade=h,this.isOverstitch=o,this.isGlitch=r,this.isVertical=R.random_bool(.5),this.lineSize=this.isVertical?this.height:this.width,this.containerSize=this.isVertical?this.width:this.height,this.curveSize=R.random_int(2,8),this.lineCount=Math.ceil(this.containerSize\/this.curveSize)-1,this.primaryCol=pickRndColor(this.palette),this.secondaryColArr=[],this.toggleRotInit=R.random_bool(.5),this.toggleRotArr=[],this.dividerArr=[],this.lineThickArr=[],this.offsetArr=[],this.curveTypeArr=[],this.noiseArr=[]}generate(){const i=.7853982,t=1.5707964;for(let s=0;s<this.lineCount;s++){this.lineThickArr.push(R.random_int(1,3)),this.isGlitch&&(this.toggleRotArr.push(R.random_bool(.5)),this.dividerArr.push(R.random_int(1,100)),this.secondaryColArr.push(pickRndColor(this.palette)));const e=R.random_int(1,10);this.offsetArr.push(e),this.curveTypeArr.push(R.random_choice([i,t,3.1415928])),this.noiseArr.push([]);for(let i=e;i<this.lineSize-e;i+=1){const i=this.isNoisy?R.random_dec():0;this.noiseArr[s].push(i)}}}show(i=1){noFill();const t=this.primaryCol;stroke(color(t.r,t.g,t.b));let s=this.curveSize;push();for(let t=0;t<this.lineCount;t++){if(strokeWeight(this.lineThickArr[t]*i),this.isVertical?translate(s*i,0):translate(0,s*i),this.isGlitch){const i=radians(t\/this.dividerArr[t]),s=this.toggleRotArr[t]?-i:i;rotate(s);const e=this.secondaryColArr[t];stroke(color(e.r,e.g,e.b))}const e=this.offsetArr[t],h=this.curveTypeArr[t];beginShape();for(let s=e;s<this.lineSize-e;s+=1){let e,o,r=this.noiseArr[t][s];this.isVertical?(e=this.isOverstitch&&!this.isCascade?tan(s*radians(h))*this.curveSize+r:cos(s*radians(h))*this.curveSize+r,o=1*s):(o=this.isOverstitch&&this.isCascade?tan(s*radians(h))*this.curveSize+r:cos(s*radians(h))*this.curveSize+r,e=1*s),vertex(e*i,o*i)}endShape(),s=+this.curveSize}pop()}}class Ndop{constructor(i,t,s=defaultPalette,e,h,o,r){this.width=i,this.height=t,this.palette=s,this.isNoisy=e,this.isCascade=h,this.isOverstitch=o,this.isGlitch=r;const n=3.1415928;this.col=pickRndColor(this.palette),this.colTwo=pickRndColor(this.palette),this.shape=R.random_choice(ndopOptions),this.denominator=this.shape.d,this.numerator=this.shape.n,this.k=this.numerator\/this.denominator,this.theta=.002,this.lineStep=Math.round(n*reduceDenominator(this.numerator,this.denominator)),this.noiseArr=[],this.noiseTwoArr=[],this.shapeTwo=R.random_choice(ndopOverlayOptions),this.denominatorTwo=this.shapeTwo.d,this.numeratorTwo=this.shapeTwo.n,this.kTwo=this.numeratorTwo\/this.denominatorTwo,this.lineStepTwo=Math.round(n*reduceDenominator(this.numeratorTwo,this.denominatorTwo)),this.dotMotif=new Dots(this.width,this.height,this.palette,this.isNoisy,this.isCascade,this.isOverstitch,this.isGlitch)}generate(){this.dotMotif.generate();for(let i=0;i<this.lineStep;i+=this.theta){const i=this.isNoisy?R.random_dec():0;this.noiseArr.push(i)}for(let i=0;i<this.lineStepTwo;i+=this.theta){const i=this.isNoisy?2*R.random_dec():0;this.noiseTwoArr.push(i)}}show(i=1){this.dotMotif.show(i),noFill(),noStroke(),fill(color(this.col.r,this.col.g,this.col.b)),push(),beginShape();for(let t=0;t<this.lineStep;t+=this.theta){let s=this.noiseArr[Math.round(t)],e=this.width*Math.cos(this.k*t)\/2+s,h=e*Math.tan(this.k*t)+this.width\/2+s,o=e*Math.tan(t)+this.height\/2+s,r=this.width,n=this.height;h>r&&(h=r+s),h<0&&(h=-s),o>n&&(o=n+s),o<0&&(o=-s),curveVertex(h*i,o*i)}endShape(),noFill(),strokeWeight(1),stroke(color(this.colTwo.r,this.colTwo.g,this.colTwo.b)),beginShape();for(let t=0;t<this.lineStepTwo;t+=this.theta){let s=this.noiseTwoArr[Math.round(t)],e=this.width*Math.cos(this.kTwo*t)\/2+s,h=e*Math.tan(this.kTwo*t)+this.width\/2+s,o=e*Math.tan(t)+this.height\/2+s,r=this.width,n=this.height;h>r&&(h=r+s),h<0&&(h=-s),o>n&&(o=n+s),o<0&&(o=-s),curveVertex(h*i,o*i)}endShape(),pop()}}const cfg=config,bg=cfg.palette.background,scaleFactor=cfg.canvasWidth\/cfg.canvasHeight,scaledWidth=window.innerHeight*scaleFactor,scaledHeight=window.innerWidth\/scaleFactor,gridWidth=cfg.canvasWidth-2*cfg.gridMargin.x,gridHeight=cfg.canvasHeight-2*cfg.gridMargin.y;window.setup=()=>{window.innerHeight>window.innerWidth?createCanvas(window.innerWidth,scaledHeight):createCanvas(scaledWidth,window.innerHeight),noLoop(),noFill(),noStroke()};const spacing=cfg.gridSpacing,loopOneCount=cfg.isCascade?cfg.gridSize.x:cfg.gridSize.y,loopOneDiv=2*loopOneCount,loopOneDim=cfg.isCascade?gridWidth:gridHeight,loopTwoCount=cfg.isCascade?cfg.gridSize.y:cfg.gridSize.x,loopTwoDiv=2*loopTwoCount,loopTwoDim=cfg.isCascade?gridHeight:gridWidth,blockDimA=gridDivider(loopOneDim\/loopOneDiv,loopOneDim,loopOneCount,loopOneDim),generateBlocks=(i=!1)=>{let t=[];const s=!!R.random_bool(.5)&&cfg.isOverstitch,e=!!cfg.isOverstitch&&s,h=!!cfg.isOverstitch&&!s;for(let s=0;s<loopOneCount;s++){const o=gridDivider(loopTwoDim\/loopTwoDiv,loopTwoDim,loopTwoCount,loopTwoDim);t.push([]);for(let r=0;r<loopTwoCount;r++){let n,a=!1,l=cfg.isCascade?blockDimA[s]:o[r],c=cfg.isCascade?o[r]:blockDimA[s];l-=spacing,c-=spacing;const d=cfg.isFloral?4:3;switch(cfg.isNdop?5:R.random_int(1,d)){case 1:a=!0,n=new Dots(l,c,cfg.palette,cfg.isNoisy,cfg.isCascade,cfg.isOverstitch,cfg.isGlitch),n.generate();break;case 2:n=new Scribbles(l,c,cfg.palette,cfg.isNoisy,cfg.isCascade,h,!i&&cfg.isGlitch),n.generate();break;case 3:n=new Coils(l,c,cfg.palette,cfg.isNoisy,cfg.isCascade,e,!i&&cfg.isGlitch),n.generate();break;case 4:n=new Flower(l,c,cfg.palette,cfg.isNoisy,cfg.isCascade,e,!i&&cfg.isGlitch),n.generate();break;default:n=new Ndop(l,c,i?defaultPalette:cfg.palette,cfg.isNoisy,cfg.isCascade,cfg.isOverstitch,cfg.isGlitch),n.generate()}t[s].push({width:l,height:c,style:n,flowerVisible:a})}}return t},blocks=generateBlocks();let blocksChaotic;cfg.isChaotic&&(blocksChaotic=generateBlocks(!0)),window.draw=()=>{background(color(bg.r,bg.g,bg.b));const i=width\/cfg.canvasWidth,t=(t,s=!1)=>{const e=cfg.gridSpacing*i;let h=cfg.gridMargin.y*i;for(let s=0;s<t.length;s++){let o=cfg.gridMargin.x*i;for(let r=0;r<t[s].length;r++){push(),cfg.isCascade?translate(h,o):translate(o,h);t[s][r].style.show(i),cfg.isCascade?o+=t[s][r].height*i+e:o+=t[s][r].width*i+e,pop()}cfg.isCascade?h+=t[s][0].width*i+e:h+=t[s][0].height*i+e}};cfg.isChaotic&&t(blocksChaotic),t(blocks)};",
  "tokens" : [
    {
      "hash" : "0x7ddf290d333c92b46fe03750e18f23693a052af8e5795c977672b499bcf7149a",
      "id" : "18000077"
    },
    {
      "hash" : "0x9a6d90861f707e1bf4349f9872f3adfdd36d85a507f961e64cb6c18cad7729ac",
      "id" : "18000061"
    },
    {
      "hash" : "0x568ea9e512301c4b0efbdab0eb9dcdc9fbc2568437b43b55fc756db3079e84af",
      "id" : "18000004"
    },
    {
      "hash" : "0x1e5bc07057858c87a71df2715fc9ccd8c1ab570c4e980408402b65316aafd669",
      "id" : "18000026"
    },
    {
      "hash" : "0x7847a420a6200e86a8a941bd12a605dd619cfe5eeccd94e83c1cee46aa49adb3",
      "id" : "18000067"
    },
    {
      "hash" : "0xc1295b662264ca606faff6a03592c648880df19c4b6191efb30f597fe12d480a",
      "id" : "18000023"
    },
    {
      "hash" : "0x07ea7518122c97a0dc90ad26a6d2372e2df1e202290ccb5bb0aa4925105d2972",
      "id" : "18000073"
    },
    {
      "hash" : "0x3f8f45722e3592f9e925e0e8f715519476df1b27a389e2386980d3e96e97f128",
      "id" : "18000005"
    },
    {
      "hash" : "0x017f817fd3e45c05a91aa507bcfd7fe0c53cce023150099bc3a5a0933a3cd723",
      "id" : "18000068"
    },
    {
      "hash" : "0x22e1ad31239d4606374799923a561ef896f383b90fd435aec86ae98668bdd3ce",
      "id" : "18000051"
    },
    {
      "hash" : "0x2d3c49091bc7261bb5fe207fbb4fe725d82511e8d6712d46b00641a5eaebb45a",
      "id" : "18000029"
    },
    {
      "hash" : "0x084da0a0aff1ddc1469a7166134c34d988e775e459b82ece992fc6ba6ffa7bf8",
      "id" : "18000039"
    },
    {
      "hash" : "0xd4010fa1508a2b063e7df5ece33ea7f7146f0e2b6980e23b42ba992932bf9327",
      "id" : "18000035"
    },
    {
      "hash" : "0x9a36f6c6683a106a4112e155806a847ec8cf333ebf3456756a09a4e463ad9d54",
      "id" : "18000033"
    },
    {
      "hash" : "0x2577100c9b5ca62b47bdb2de3cbca2187836405e9538cf340407a63465cf3012",
      "id" : "18000003"
    },
    {
      "hash" : "0x37c79b827a0f73663f2f258a3dab1e9bd3442ecc7d9b1364880420d70e9bcda5",
      "id" : "18000022"
    },
    {
      "hash" : "0x635699db9d99b1ac52d0841b98845433fa800211e0c9fbf64a95c4ad58e9a870",
      "id" : "18000053"
    },
    {
      "hash" : "0xf878c3e5d18d24f2639587ece70284c3c3978b83320651e2e52c6f0bacfaa121",
      "id" : "18000086"
    },
    {
      "hash" : "0xc4f53d48d79a1c815747c32cfafec9a02d130a446e55ae548868376a294190c4",
      "id" : "18000002"
    },
    {
      "hash" : "0xdb9125db740c51f9ce9d1386d96145c7ee8755e9400b8ec50e2620df586ddf2c",
      "id" : "18000027"
    },
    {
      "hash" : "0x7fedd61bf93e5e7c3d53362d68c2bc02f5290cc5025732b199e79a9fb968fe62",
      "id" : "18000013"
    },
    {
      "hash" : "0x1cc6d56dd59ef8c521a32bbf052f67beb8df071710c3bea7d82972471cb0d2b9",
      "id" : "18000011"
    },
    {
      "hash" : "0xb6e3d746e631235bd1633505a629257d39812e0ae009a0c7e872d6fbf17ae806",
      "id" : "18000092"
    },
    {
      "hash" : "0x0afb0ba09c6fce4f943a149a0d40d9159b03a37eca4de9692b9aac352477588c",
      "id" : "18000055"
    },
    {
      "hash" : "0x0ff5e93e9683bc2d90e605a65f100810be65b4016fdce2d85d947c8fff706ae1",
      "id" : "18000006"
    },
    {
      "hash" : "0xd1f185222f35e7dfe781b996f1c9aa594832f04324a9c296a552af85de786daa",
      "id" : "18000062"
    },
    {
      "hash" : "0x1d6efb3004852f8ef0c5e50ef2a692e02ce7043b345b9a42b389ff94243c0650",
      "id" : "18000037"
    },
    {
      "hash" : "0xe736a369ca08406c024f9e73e3a9542911ec06aef7812f281f0c3af7d9b8a7b4",
      "id" : "18000025"
    },
    {
      "hash" : "0x045343773bb969a7cc0c145de76ca9db189d0575d8b52a66fc8b49f0f06923a0",
      "id" : "18000050"
    },
    {
      "hash" : "0xae757f028ac0da7297c42a562eeadf3cb476291c8c007e29f94eae5c1fa6858a",
      "id" : "18000093"
    },
    {
      "hash" : "0x1aa2f1098a126b31aa42c90a6e2660b931e16ee6c5973254e20c6cdac1d0cc68",
      "id" : "18000041"
    },
    {
      "hash" : "0x2a2449a09ccb25eba608bd4103eac94eabcc7f0cc68c418812cec61e909f1e42",
      "id" : "18000047"
    },
    {
      "hash" : "0x2b1ee7d9b5067df3595103ac04342cd1e9a4e0b382ceb5fb4883eec0de94536a",
      "id" : "18000063"
    },
    {
      "hash" : "0xaa2a4f268a688ff2cc1e28c14ce2fe3057d4455ad83642d601cbd8367f7d0299",
      "id" : "18000060"
    },
    {
      "hash" : "0xc407925db3db6daddd56345091285ee53374e31832159204904486607039c137",
      "id" : "18000088"
    },
    {
      "hash" : "0xbe21127349ba5a1c93f374eaac22aa03de6307a72b44b57365661978ed9871dc",
      "id" : "18000024"
    },
    {
      "hash" : "0xf1eba84b6d64d1d2a2204a4ad865f3d1b9062bfcef244752e5bc9bec58babe2e",
      "id" : "18000079"
    },
    {
      "hash" : "0xeb9989561e5b3c0f92f365b47f371c134426bcbc099b7833e36466420cf7cfe3",
      "id" : "18000058"
    },
    {
      "hash" : "0x91107d8c33abafa18b5a95ba95d3d928f93ce34132c04065d97d3916c6065068",
      "id" : "18000076"
    },
    {
      "hash" : "0x8c6c635d72b1026d006d45549d538b87ff3117a8a5afd7a7971401159d2ea0bb",
      "id" : "18000020"
    },
    {
      "hash" : "0xcc15d955a8dfff7fa067847f67f596e46a0dc5267ee859ad7f71df084b6104b8",
      "id" : "18000021"
    },
    {
      "hash" : "0x0ec49386f601df9ee334f95a1f20bf9cb8cc986e461d545b2dbab8b40935cb97",
      "id" : "18000087"
    },
    {
      "hash" : "0xecdc305ab7b6f121ec6a6f46f100764e7d289ef82e7dce89d340c76b9ecfb1d3",
      "id" : "18000034"
    },
    {
      "hash" : "0xe53701a31d8a40a5c377c9ab922d3b725ce663a03d0720c9fec37d7593ec4119",
      "id" : "18000065"
    },
    {
      "hash" : "0x2c7ff9bf1153bd09afa122050d4468d91c855d92763c2e500068440b59e29c84",
      "id" : "18000012"
    },
    {
      "hash" : "0x4be9f04a09a40b3b05b2314cdb874acf5d2a0414e8d1f03622fd9004d138c056",
      "id" : "18000052"
    },
    {
      "hash" : "0x1249c30078684f3a6e89897c7fee1e546c1841aeccb915fde6d2973817cff29c",
      "id" : "18000094"
    },
    {
      "hash" : "0x2a3a19912802458501df94a2ca2450e80f8c23d2e24666a1ce52553549ec2511",
      "id" : "18000072"
    },
    {
      "hash" : "0x19b5dffbaca499b0f2e84c12d975843f7a07b84d8aa760b1a3efd3530246b16d",
      "id" : "18000009"
    },
    {
      "hash" : "0x9b62047665cb91dd7cac759a8be21665be2b4ac517544f551e4fd2b593c60eeb",
      "id" : "18000030"
    },
    {
      "hash" : "0x269ddb470fdfe672020ee806382eaac6e9bf8055bba427f59eef964e86d9d329",
      "id" : "18000071"
    },
    {
      "hash" : "0xef0c52485d9bc160e95e44f9d552526b17b982e5bbcbed6d233f89c4c0217bbe",
      "id" : "18000096"
    },
    {
      "hash" : "0x5f1caf73cecf291702808ad456cb66174304bab37491c1048a1aa2c3a809a750",
      "id" : "18000089"
    },
    {
      "hash" : "0xe615fece0005b752964f6a03c244fbc67a88bf23f3b718222d44dccb04e4c172",
      "id" : "18000007"
    },
    {
      "hash" : "0x1a4a6f8316c63aa36d497d3247d669d979abb6e01e554ae74ddfcaded0a7970c",
      "id" : "18000046"
    },
    {
      "hash" : "0x37ccbf32df72f23ec7cf42e905fe72cd4b930d8e7c93d9654b19c3746336d6c5",
      "id" : "18000095"
    },
    {
      "hash" : "0xf94203d545720d52c7647c2084c694a65f0a81e52961086c1a927215479883df",
      "id" : "18000028"
    },
    {
      "hash" : "0xcae285b14d99cc94c6f758ac3cf54ee97a247af6a53ced76418f14ac70362050",
      "id" : "18000048"
    },
    {
      "hash" : "0xc1d4ac5ce1f84b394e04835c91a6b28e489203db758cd03ce24997f65986ab8c",
      "id" : "18000014"
    },
    {
      "hash" : "0x327d0351044577cc933ef5f5aafc971aeea1989c87eeb47c68e8b8633fcec0cb",
      "id" : "18000054"
    },
    {
      "hash" : "0x9c835ba6a45b8116e87d0b602fa02649e9dac2fd19bec721ebe48413fda4f375",
      "id" : "18000040"
    },
    {
      "hash" : "0x0541dc78a9ed4c8e52cfeeab147f47c67747808f2e3b63e05d0fa9719148758a",
      "id" : "18000066"
    },
    {
      "hash" : "0x0fd083b00ca58ed2aa9cc3b0ce0d62144131d4bbdcd8008fe58f7061a9c8a87a",
      "id" : "18000036"
    },
    {
      "hash" : "0x70d0d4bdc2da56b34a185e0c8836bc2af41b3a75442ea4aa0345a94fe6139b14",
      "id" : "18000042"
    },
    {
      "hash" : "0x29a72abf274655f95b9c90bc2a929c8e79ea3a3fe82d6a9d17993b824a380d19",
      "id" : "18000019"
    },
    {
      "hash" : "0xc0e8ffdde366e05b693e36d34321fc6f3de2f7ca8ffc9eaa965ea0c48033f651",
      "id" : "18000043"
    },
    {
      "hash" : "0xb324426ab93ce320c24df7904b7cc8f84c336561a28912cb46cb838d35c71572",
      "id" : "18000084"
    },
    {
      "hash" : "0xbcba57a896e21f5daf57e377f978b31c8b504691f5ac9375e4c531952c02e0cd",
      "id" : "18000074"
    },
    {
      "hash" : "0x69673c52038fe279b6e54f5f4687cf103937ec7b74bbfb27204a0bbed681ed1c",
      "id" : "18000080"
    },
    {
      "hash" : "0x111528c6c43e3f5081f6c363617658ff61c484ef9450506374877cef74d538c5",
      "id" : "18000017"
    },
    {
      "hash" : "0x19e8c53b3152023940fd6240b81a291ed0cbcaf03fd0b302dc80673c95ff6117",
      "id" : "18000045"
    },
    {
      "hash" : "0xeaa9eff36715bf14652b800f9b8f42f205605adc0666a12fdebf9b1fa2ca6375",
      "id" : "18000057"
    },
    {
      "hash" : "0x91d291306d1f96cc9c8de11984e97d2e2065f3421fdc0a0823f1dcb811764b54",
      "id" : "18000001"
    },
    {
      "hash" : "0xd08d7eba9a9e04e645704b96c40a339526a7587b892fe0be5f8696e759c749b4",
      "id" : "18000059"
    },
    {
      "hash" : "0x6937f214060db120895ef656bb8633d541b5321f952640d352f36ba28095b138",
      "id" : "18000075"
    },
    {
      "hash" : "0x5b34261604e87ef04ed95c4f38924bcc6a87f56a226d84dc495ad150334f2d8b",
      "id" : "18000078"
    },
    {
      "hash" : "0xbf213e50049126c0023b0cd62811614b33d2a402fe80ecbacb03a3668ddf02e7",
      "id" : "18000090"
    },
    {
      "hash" : "0xacd10bb2ca652062e09177d91f6ec99f706e833b3f8a32a160a5d07d8d311116",
      "id" : "18000081"
    },
    {
      "hash" : "0x77e388f2837d59ac2f20b6714da103a0d0325874e2117a64d5358ec72a115d06",
      "id" : "18000064"
    },
    {
      "hash" : "0xf6e311d97114a09f1465db7c5f7fd1ea9511a8a53dab72d61d5ebbeda9074fd8",
      "id" : "18000000"
    },
    {
      "hash" : "0x94879aa5ba83d1d8eb6b2c0ab8087cc54cd274fb343ed444551b4a93940b2873",
      "id" : "18000044"
    },
    {
      "hash" : "0x176afe9ac8ba4b5f6cd1b3930dffa3d682823fe3bccb78d3d3b36a028541c0b2",
      "id" : "18000032"
    },
    {
      "hash" : "0x7992b619e598f7349326bfd27c5a9bdc53f528c6822f1195f7f0d6b747f8c55e",
      "id" : "18000008"
    },
    {
      "hash" : "0xbf21015d64e97cb922e60493de224aff518172eefec54b8a60230203bc69b661",
      "id" : "18000082"
    },
    {
      "hash" : "0xe8bd27c70c7c4c23300fad3c10d41f7dc9882efd1fa403d2024e12061bfc105d",
      "id" : "18000038"
    },
    {
      "hash" : "0x481db2b7318ff89105471ba39730934f17a4e8d4a8cb5ba6106c314f058d7b67",
      "id" : "18000083"
    },
    {
      "hash" : "0x79d997dc9725caddd459ba6f7be1fd0a4b9766aa65da8eb6b218145696c74b2c",
      "id" : "18000049"
    },
    {
      "hash" : "0x970ef93b335b9a9b1b26dbe69c91ce904417c58f3a98366267ae645006c05505",
      "id" : "18000069"
    },
    {
      "hash" : "0x76eb73d6b043efb7e7cf66dab3435de048fd5eb229d8795826fa20c4c2c379ca",
      "id" : "18000070"
    },
    {
      "hash" : "0x9183ab324f18c1b9e1fd038858439f169886bf97401a3e71e719a0ceb00d6a54",
      "id" : "18000015"
    },
    {
      "hash" : "0xb0d6200e6fe213b2b63591754ec37755ac08a81b70326f1f48976d80b694ec1d",
      "id" : "18000085"
    },
    {
      "hash" : "0x1aed6d3ec73f8e9c1c2a15de0e270cd844931d4d77be64a364a9a56fe7a41faa",
      "id" : "18000056"
    },
    {
      "hash" : "0x738014098c96c8a505ee2da7eddce3bec733410db6762d791027717c3eea0eda",
      "id" : "18000097"
    },
    {
      "hash" : "0xa069784a878bc926ca85bf5aa386e41ee5863fa32578aee7d3442428ae1e79bb",
      "id" : "18000010"
    },
    {
      "hash" : "0x087a61e90fe8d3f47e3b6b48f27a783dbb96d1c5f1aeba444f0b6af12c4d72a5",
      "id" : "18000031"
    },
    {
      "hash" : "0x0dabc77e2881664a7054dee404928251ea78eff274c63ab79e72c6eb1cde36a8",
      "id" : "18000091"
    },
    {
      "hash" : "0xfea0feb5de017b65bb47b3322c113b1b39b050822843e20d38cb2b42d2e0b425",
      "id" : "18000018"
    },
    {
      "hash" : "0x50040e2c3bd682d52830fbdf735cfb96d247f38394190304d4951d399265696e",
      "id" : "18000098"
    },
    {
      "hash" : "0x18474642518b4aa0ed0babb68ab31be6549c5474a86070881646e91af2f86ef1",
      "id" : "18000099"
    },
    {
      "hash" : "0x6abb24fe578c900d1ace401547af4c1c2ff4eefd36c4c71e8088c31ff3688321",
      "id" : "18000016"
    }
  ]
}