{
  "contractAddress" : "0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270",
  "instructions" : "Click to display features.",
  "kind" : "p5js",
  "projectId" : "6",
  "script" : "let seed = tokenData.tokenId\nlet unit;\nlet i, j;\nlet h1, h2, h3, h4;\nlet c;\nlet windows;\nlet display = false;\n\nfunction setup () {\n  let dim = Math.min(window.innerWidth\/16, window.innerHeight\/9);\n  createCanvas(dim * 16, dim * 9);\n  unit = width \/ 16;\n  rectMode(CORNER);\n  colorMode(HSB, 359, 100, 100, 1);\n  background(0, 0, 100);\n  noFill();\n  noStroke();\n}\n\nfunction draw () {\n  background(0, 0, 100);\n  h1 = floor(map(rnd(), 0, 1, 0, 360));\n  h2 = floor(map(rnd(), 0, 1, 0, 360));\n  h3 = floor(map(rnd(), 0, 1, 0, 360));\n  h4 = floor(map(rnd(), 0, 1, 0, 360));\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 16; j++) {\n      fill(h4, 100, 100, (1 - 0.066666667 * j) * (1 - 0.125 * i));\n      rect((15 - j) * unit, (8 - i) * unit, unit, unit);\n    }\n  }\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 16; j++) {\n      fill(h3, 100, 100, (1 - 0.066666667 * j) * (1 - 0.125 * i) );\n      rect(j * unit, (8 - i) * unit, unit, unit);\n    }\n  }\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 16; j++) {\n      fill(h2, 100, 100, (1 - 0.066666667 * j) * (1 - 0.125 * i) );\n      rect((15 - j) * unit, i * unit, unit, unit);\n    }\n  }\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 16; j++) {\n      fill(h1, 100, 100, (1 - 0.066666667 * j) * (1 - 0.125 * i) );\n      rect(j * unit, i * unit, unit, unit);\n    }\n  }\n  c = floor(map(rnd(), 0, 1, 1, 5));\n  if (c == 1) {\n   fill(0, 0, 100, 0);\n  }\n  if (c == 2) {\n   fill(240, 100, 50, 0.25);\n  }\n  if (c == 3) {\n   fill(0, 0, 60, 0.4);\n  }\n  if (c == 4) {\n   fill(0, 15, 100, 0.4);\n  }\n  rect(0, 0, width, height);\n  windows = floor(map(rnd(), 0, 1, 1, 10));\n  noFill();\n  stroke(0, 0, 0);\n  strokeWeight(unit * 0.0625);\n  if (windows == 1) {\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 16; j++) {\n        rect(j * unit, i * unit, unit, 0.25 * unit);\n        rect(j * unit, i * unit + 0.25 * unit, unit, 0.75 * unit);\n      }\n    }\n  }\n  if (windows == 2) {\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 16; j++) {\n        rect(j * unit, i * unit, unit, 0.25 * unit);\n        rect(j * unit, i * unit + 0.25 * unit, unit, 0.5 * unit);\n        rect(j * unit, i * unit + 0.75 * unit, unit, 0.25 * unit);\n      }\n    }\n  }\n  if (windows == 3) {\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 16; j++) {\n        rect(j * unit, i * unit, unit, 0.25 * unit);\n        rect(j * unit, i * unit + 0.25 * unit, 0.5 * unit, 0.75 * unit);\n        rect(j * unit + 0.5 * unit, i * unit + 0.25 * unit, 0.5 * unit, 0.75 * unit);\n      }\n    }\n  }\n  if (windows == 4) {\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 16; j++) {\n        rect(j * unit, i * unit, unit, 0.25 * unit);\n        rect(j * unit, i * unit + 0.25 * unit, 0.5 * unit, 0.5 * unit);\n        rect(j * unit + 0.5 * unit, i * unit + 0.25 * unit, 0.5 * unit, 0.5 * unit);\n        rect(j * unit, i * unit + 0.75 * unit, unit, 0.25 * unit);\n      }\n    }\n  }\n  if (windows == 5) {\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 16; j++) {\n        rect(j * unit, i * unit, 0.25 * unit, unit);\n        rect(j * unit + 0.25 * unit, i * unit, 0.5 * unit, unit);\n        rect(j * unit + 0.75 * unit, i * unit, 0.25 * unit, unit);\n      }\n    }\n  }\n  if (windows == 6) {\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 16; j++) {\n        rect(j * unit, i * unit, unit, 0.25 * unit);\n        rect(j * unit, i * unit + 0.25 * unit, 0.25 * unit, 0.75 * unit);\n        rect(j * unit + 0.25 * unit, i * unit + 0.25 * unit, 0.5 * unit, 0.75 * unit);\n        rect(j * unit + 0.75 * unit, i * unit + 0.25 * unit, 0.25 * unit, 0.75 * unit);\n      }\n    }\n  }\n  if (windows == 7) {\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 16; j++) {\n        rect(j * unit, i * unit, 0.25 * unit, unit);\n        rect(j * unit + 0.25 * unit, i * unit, 0.5 * unit, 0.5 * unit);\n        rect(j * unit + 0.25 * unit, i * unit + 0.5 * unit, 0.5 * unit, 0.5 * unit);\n        rect(j * unit + 0.75 * unit, i * unit, 0.25 * unit, unit);\n      }\n    }\n  }\n  if (windows == 8) {\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 16; j++) {\n        rect(j * unit, i * unit, 0.25 * unit, unit);\n        rect(j * unit + 0.25 * unit, i * unit, 0.5 * unit, 0.25 * unit);\n        rect(j * unit + 0.25 * unit, i * unit + 0.25 * unit, 0.5 * unit, 0.5 * unit);\n        rect(j * unit + 0.25 * unit, i * unit + 0.75 * unit, 0.5 * unit, 0.25 * unit);\n        rect(j * unit + 0.75 * unit, i * unit, 0.25 * unit, unit);\n      }\n    }\n  }\n  if (windows == 9) {\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 16; j++) {\n        rect(j * unit, i * unit, unit, 0.25 * unit);\n        rect(j * unit, i * unit + 0.25 * unit, 0.25 * unit, 0.5 * unit);\n        rect(j * unit + 0.25 * unit, i * unit + 0.25 * unit, 0.5 * unit, 0.5 * unit);\n        rect(j * unit + 0.75 * unit, i * unit + 0.25 * unit, 0.25 * unit, 0.5 * unit);\n        rect(j * unit, i * unit + 0.75 * unit, unit, 0.25 * unit);\n      }\n    }\n  }\n  noLoop();\n}\n\nfunction rnd() {\n\tseed ^= seed << 13;\n\tseed ^= seed >> 17;\n\tseed ^= seed << 5;\n\treturn (((seed < 0) ? ~seed + 1 : seed) % 1000) \/ 1000;\n}\n\nfunction mouseClicked() {\n\tif (display == false) {\n\t\tnoStroke();\n\t\tfill(0, 0, 0, .2);\n\t\trect(0, 0, width, height);\n\t\tfill(0, 0, 100);\n\t\ttextSize(width\/64);\n\t\ttext(\"Window: \" + windows, width\/32, 1.5 * width\/32);\n\t\tlet cond;\n\t\tif (c == 1) {cond = \"Clear\";}\n\t\tif (c == 2) {cond = \"Night\";}\n\t\tif (c == 3) {cond = \"Cloudy\";}\n\t\tif (c == 4) {cond = \"Morning\";}\n\t\ttext(\"Condition: \" + cond, width\/32, 2.5 * width\/32);\n\t\ttext(\"Reflection 1: \" + (h1-180), width\/32, 3.5 * width\/32);\n\t\ttext(\"Reflection 2: \" + (h2-180), width\/32, 4.5 * width\/32);\n\t\ttext(\"Reflection 3: \" + (h3-180), width\/32, 5.5 * width\/32);\n\t\ttext(\"Reflection 4: \" + (h4-180), width\/32, 6.6 * width\/32);\n\t}\n\tif (display == true) {\n\t\tseed = tokenData.tokenId;\n\t\tsetup();\n\t\tredraw();\n\t}\n\tif (display == false) {\n\t\tdisplay = true;\n\t}\n\telse {\n\t\tdisplay = false;\n\t}\n}",
  "tokens" : [
    {
      "hash" : "0x8c3e02b2dc945b0f18d31d010c4f4e2c4ff2a8bca3154147ad16e5ba9420e380",
      "id" : "6000031"
    },
    {
      "hash" : "0xcb65dce26442af2c3b06c95c23a44498322d6ad2d58eb73466f1f727ca631c3f",
      "id" : "6000021"
    },
    {
      "hash" : "0x882c171078f471a2940e31351e7613b93cedf054a65972f025a9280c79174529",
      "id" : "6000038"
    },
    {
      "hash" : "0x2f1710201918c3ee657b573ed42b00a1530ebacd040632889df369b97c9c0c00",
      "id" : "6000010"
    },
    {
      "hash" : "0x5b8d8f61a1ec8a95b1258220c7c25adcac3fea33914cc4e0283053c1be9a164f",
      "id" : "6000008"
    },
    {
      "hash" : "0xcb56ce23ecdbd96eb290132320421025a3351359914b882b287c36991ad5d575",
      "id" : "6000016"
    },
    {
      "hash" : "0x9c3471302ef0ddf39f322a60d884c6fe516d17596dbc24478e7e0100274c3f7e",
      "id" : "6000028"
    },
    {
      "hash" : "0xdc5f23904d4ab276edb6bc6331fa98110fe3c651c3dcba92c41a8b0e08a5bad7",
      "id" : "6000029"
    },
    {
      "hash" : "0x93b615702bd105a15eb55304df50682b69c4deae6417c75f4a9ded6d6f5034cb",
      "id" : "6000000"
    },
    {
      "hash" : "0xf3c042d7fbd98c5e24218bc5ea3bcd58d56a036eb634fbaf5365512134e6e0ed",
      "id" : "6000001"
    },
    {
      "hash" : "0xddcd96f217050f926493cb68c2db2cabc6cf4309d247ef5de588a898fc0cb8d3",
      "id" : "6000039"
    },
    {
      "hash" : "0x3231dcb7d5f39ad11a2612c12d99f3aea27e10a1687b7646400124bc63ca3253",
      "id" : "6000015"
    },
    {
      "hash" : "0x63a664eedf650fb5a9384fa382b56484dffe662bb2d6c401fc2d86e9e9830076",
      "id" : "6000017"
    },
    {
      "hash" : "0x558f30a13b3f31bfd79a52fb1b352d56e55b607e85669f24177a304dd07e6f4d",
      "id" : "6000026"
    },
    {
      "hash" : "0xbecab9818fecd48227003286801fa5918fa5f953383b8d7b445d620e99db393a",
      "id" : "6000037"
    },
    {
      "hash" : "0xb1017d99ca0106e7c9b10b6b7f2966d11f9566a8f78faf66c5105d95b0231632",
      "id" : "6000023"
    },
    {
      "hash" : "0x4c700eb17c759e5e1c7a9bef19db01ca5306a936af891ab6597846c0d385a5fc",
      "id" : "6000003"
    },
    {
      "hash" : "0x76317c49426b0edb4cefea6beef1bbcfff4b3343265e81bb2a20c60f82f637e1",
      "id" : "6000032"
    },
    {
      "hash" : "0x4471034694dfcd1f1c5912fa487dc563f2d2e6e02adb423273a61891bf879290",
      "id" : "6000012"
    },
    {
      "hash" : "0xac049a5556838da053b4c7ea71b57ee6e35865a5826dd996da7406de96123391",
      "id" : "6000013"
    },
    {
      "hash" : "0x3a7166c5f35f0ff8732edb00571cbd9bbd7ed0ea4817c550c813427587839fb6",
      "id" : "6000035"
    },
    {
      "hash" : "0xd8c56183689a30a961673f8091bcd433aa2db680bde9f642d812fc2ba0b7e7a3",
      "id" : "6000004"
    },
    {
      "hash" : "0x2616f6553631338bc6bbd9e1cba83fee6da2298b874537196e5a569a09c671ee",
      "id" : "6000019"
    },
    {
      "hash" : "0x6f1b59312d5bcba61346b83b6c84040f0c06a7ebb025d224ed92046d0ee60eac",
      "id" : "6000005"
    },
    {
      "hash" : "0xedfe5eaf9103614af2e8090ed8bbb5ba47b22a68916f0ede5499a3dd7d08b53d",
      "id" : "6000025"
    },
    {
      "hash" : "0x97649c882dcde2a7cdf745837ff335e624af5626763732c523d7ccf2a980af51",
      "id" : "6000011"
    },
    {
      "hash" : "0x8848f05388eb25756d5320cf884c42b40c50ac794731221f4a916fe409c8fed4",
      "id" : "6000030"
    },
    {
      "hash" : "0x1995b19d433da27acea6c46a501fcdeac3e13cd7a072058f677210a1f0672557",
      "id" : "6000007"
    },
    {
      "hash" : "0x1cf40f4ccba58d56c92de840a076e14cb38f9a126451cffaa31fc7930c859a82",
      "id" : "6000034"
    },
    {
      "hash" : "0x077d5200929ad50bd23c9bf9b95b0bca208a1bc77ebb770738e1d78c075761da",
      "id" : "6000018"
    },
    {
      "hash" : "0xb2094728f745afdfb6024f85c3755bf1df3202809c1c3748e03d05270c50c3ed",
      "id" : "6000040"
    },
    {
      "hash" : "0x2b0261c854f6d847e66d63da265eddb56c91d6e5e4a22a39b3535116a5f4fd45",
      "id" : "6000022"
    },
    {
      "hash" : "0xf78181a23913839e7eeb353a9bf7cc56cc66cf1cd461c407a8f8624496a621bc",
      "id" : "6000002"
    },
    {
      "hash" : "0x9295cc14a1d413d391fa08ff3d00d58f7d2b5fb42b0372c40502403515bf5f3c",
      "id" : "6000027"
    },
    {
      "hash" : "0xedd2e1c1e26fe9e9dd4b0cfe0248685094b241429acea10ab1765db850cd85a2",
      "id" : "6000024"
    },
    {
      "hash" : "0xf7a238db50782a22a345989e20f32a4bd0c7662d76a95e16a70e2bf2c9698255",
      "id" : "6000020"
    },
    {
      "hash" : "0x0a97063ecd91a08a5a855e54cbfb8faaa1165272b95c863e784b4d2044f45b91",
      "id" : "6000014"
    },
    {
      "hash" : "0xe45f46ce6a10eaa0ac4040f5c18375379cab8d9cb3153e9c8e707537579f6e0c",
      "id" : "6000009"
    },
    {
      "hash" : "0xef99efc3c4a5970c9bbe1f7c19b4b49871b6ced8a970b2751b43d93058f14318",
      "id" : "6000036"
    },
    {
      "hash" : "0x75b85ba37b7d9c27999444539ec2b90398a983caf42454638f3fa3b011281c61",
      "id" : "6000006"
    },
    {
      "hash" : "0x0c0d2d71894d055d24985c1e1f14d0b10c7c115f7f464962c51ad7913819c151",
      "id" : "6000033"
    }
  ]
}