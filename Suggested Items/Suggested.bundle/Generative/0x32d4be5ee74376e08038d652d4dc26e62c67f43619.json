{
  "contractAddress" : "0x32d4be5ee74376e08038d652d4dc26e62c67f436",
  "kind" : "p5js",
  "projectId" : "19",
  "script" : "class Random{constructor(){this.useA=!1;let i=function(i){let t=parseInt(i.substring(0,8),16),s=parseInt(i.substring(8,16),16),e=parseInt(i.substring(16,24),16),r=parseInt(i.substring(24,32),16);return function(){e|=0;let i=((t|=0)+(s|=0)|0)+(r|=0)|0;return r=r+1|0,t=s^s>>>9,s=e+(e<<3)|0,e=(e=e<<21|e>>>11)+i|0,(i>>>0)\/4294967296}};this.prngA=new i(tokenData.hash.substring(2,34)),this.prngB=new i(tokenData.hash.substring(34,66));for(let t=0;t<1e6;t+=2)this.prngA(),this.prngB()}random_dec(){return this.useA=!this.useA,this.useA?this.prngA():this.prngB()}random_num(i,t){return i+(t-i)*this.random_dec()}random_int(i,t){return Math.floor(this.random_num(i,t+1))}random_bool(i){return this.random_dec()<i}random_choice(i){return i[this.random_int(0,i.length-1)]}}const R=new Random,backgroundCol=[0,0,94],palettes=[{name:\"noir\",backgroundCol,colors:[[300,7,3]]},{name:\"refresher\",backgroundCol,colors:[[63,100,42],[120,26,7],[354,91,64],]},{name:\"rouge et blue\",backgroundCol,colors:[[235,21,21],[218,17,62],[353,86,54],[350,96,43],]},{name:\"mondrian\",backgroundCol,colors:[[300,7,3],[222,100,61],[356,74,52],[44,98,62],]},{name:\"kamerun\",backgroundCol,colors:[[353,93,42],[49,93,51],[166,100,24],[150,50,2],]},{name:\"ice\",backgroundCol,colors:[[239,94,19],[201,100,36],[190,100,42],[189,75,75],[190,77,88],]},],palette=R.random_choice(palettes),gridSizeX=R.random_int(3,20),gridSizeY=R.random_int(3,gridSizeX),minX=6,minY=6,isGridMin=gridSizeX>=6&&gridSizeY>=6,traits={palette,isLined:!!isGridMin&&palette.name==palettes[0].name&&R.random_bool(.1),isFilled:R.random_bool(.85)},canvas={width:2480,height:3224},cfg={traits,canvas,grid:{width:canvas.width,height:canvas.height,margin:{x:150,y:150},cascade:R.random_bool(.75),isEvenSplit:R.random_bool(.25),x:gridSizeX,y:gridSizeY}};class Grid{constructor({width:i=0,height:t=0,x:s=0,y:e=0,margin:r={x:0,y:0},cascade:h=!1,isEvenSplit:n=!0}){return this.width=i-2*r.x,this.height=t-2*r.y,this.x=s,this.y=e,this.cascade=h,this.margin=r,this.isEvenSplit=n,this.cascade&&(this.width=t-2*r.y,this.height=i-2*r.x,this.y=s,this.x=e,this.margin={x:r.y,y:r.x}),this.blocks=this.generate(),this}generate=()=>{let i=[],t=R.random_bool(.5),s=this.y,e=this.height\/(4*this.y),r=this.height\/(this.y\/1),h=this.splitNumber(this.height,e,r,s,!0,t),n=this.x,o=this.width\/(4*this.x),a=this.width\/(this.x\/1),d=this.margin.y,c=1,l=1;for(let g=0;g<s;g++){let $=this.margin.x,p=!1,u=!1,_=this.splitNumber(this.width,o,a,n,this.isEvenSplit,!1);for(let m=0;m<n;m++){let w=!1,b=!1,f=!1,k=!1;0==g&&(p=!0),g==s-1&&(u=!0),0==m&&(f=!0),m==n-1&&(k=!0),0==m&&(w=!0),m==n-1&&(b=!0);let C=m+1;i.push({id:c,colId:this.cascade?l:C,rowId:this.cascade?C:l,isFirstBlock:w,isLastBlock:b,isFirstCol:this.cascade?p:f,isFirstRow:this.cascade?f:p,isLastCol:this.cascade?u:k,isLastRow:this.cascade?k:u,width:this.cascade?h[g]:_[m],height:this.cascade?_[m]:h[g],x:this.cascade?d:$,y:this.cascade?$:d}),$+=_[m],c++}d+=h[g],l++}return i};splitNumber=(i,t,s,e,r=!1,h=!1)=>{if(i<=0||t<=0||s<=0||t>s||e<=0)throw Error(\"Invalid input values. Ensure all inputs are positive and minSize is less than or equal to maxSize.\");let n=e,o=[],a=i;for(let d=0;d<n;d++){let c;c=r?Math.min(s,a\/(n-d)):Math.min(s,R.random_dec()*(a-t*(n-d))+t);let l=Math.max(t,c);o.push(l),a-=l}return(o[o.length-1]+=Math.max(0,a),h)?o.sort(()=>R.random_dec()-.5):o}}class Block{constructor(i={id,colId,rowId,isFirstBlock,isLastBlock,isFirstCol,isFirstRow,isLastCol,isLastRow,width,height,x,y},t={}){this.props=i,this.traits=t,this.id=i.id,this.width=Math.round(i.width),this.height=Math.round(i.height)}colourPick=()=>R.random_choice(this.traits.palette.colors)}class Box extends Block{generate(){this.col=this.colourPick(),this.isBorder=this.props.isLastCol||this.props.isFirstCol||this.props.isLastRow||this.props.isFirstRow,this.pos1=this.props.rowId\/10,this.pos2=this.props.colId\/100,this.points=[],this.points.push({x:0,y:0}),this.points.push({x:this.width,y:0}),this.points.push({x:this.width,y:this.height}),this.points.push({x:0,y:this.height})}show(i){noFill(),noStroke(),push(),this.traits.isLined?(stroke(this.col),strokeWeight(8*i)):fill(this.col);let t=(t,s)=>{vertex(t*i,s*i)};this.traits.isLined?beginShape(LINES):beginShape();for(let s=0;s<this.points.length;s++){let e=this.points[s%this.points.length],r=this.points[(s+1)%this.points.length],h=this.points[(s+2)%this.points.length],n=lerp(e.x,r.x,this.pos1),o=lerp(e.y,r.y,this.pos2),a=lerp(r.x,r.x,this.pos1),d=lerp(h.x,h.y,this.pos2);this.isBorder?t(a,d):this.traits.isFilled&&t(n,o)}endShape(CLOSE),pop()}}let isDebugView=!1;const scaleFactor=cfg.canvas.width\/cfg.canvas.height,bgCol=cfg.traits.palette.backgroundCol;window.setup=()=>{let i=window.innerHeight*scaleFactor,t=window.innerWidth\/scaleFactor;window.innerHeight>window.innerWidth?createCanvas(window.innerWidth,t):createCanvas(i,window.innerHeight),noLoop(),noStroke(),noFill(),angleMode(DEGREES),colorMode(HSL)};const grid=new Grid(cfg.grid);let innerGridBlocks=[];grid.blocks.forEach((i,t)=>{let s=cfg.grid.x>3?cfg.grid.x:2*cfg.grid.x,e=cfg.grid.y>3?cfg.grid.y:2*cfg.grid.y,r=new Grid({width:i.width,height:i.height,cascade:R.random_bool(.5),isEvenSplit:R.random_bool(.25),x:R.random_int(2,s),y:R.random_int(2,e)});innerGridBlocks.push([]),r.blocks.forEach((i,s)=>{i.style=new Box(i,cfg.traits),i.style.generate(),innerGridBlocks[t].push(i)})}),window.draw=()=>{let i=width\/cfg.canvas.width;background(bgCol),grid.blocks.forEach((t,s)=>{push(),translate(t.x*i,t.y*i),innerGridBlocks[s].forEach(t=>{push(),translate(t.x*i,t.y*i),t.style.show(i),pop()}),isDebugView&&(stroke([0,0,34]),strokeWeight(8*i),rect(0,0,t.width*i,t.height*i)),pop()})};const redrawArtwork=()=>{let i=window.innerHeight*scaleFactor,t=window.innerWidth\/scaleFactor;window.innerHeight>window.innerWidth?resizeCanvas(window.innerWidth,t):resizeCanvas(i,window.innerHeight)};window.windowResized=()=>{redrawArtwork()},window.keyPressed=i=>{(\"d\"==i.key||68==i.keyCode)&&(isDebugView=!isDebugView,redrawArtwork())},console.log(tokenData),console.log(cfg),console.warn(\"fingacode woz ere 2k23 i.d.s.t\");",
  "tokens" : [
    {
      "hash" : "0x9eeda91c20f1f94f760a1f121e6a5fc6defed6680f17611b6c38dcca98c55f33",
      "id" : "19000004"
    },
    {
      "hash" : "0xec3f2761948034c72364841c4209d5c0c31a87ed9ff9433dbac6721c2b7ddeec",
      "id" : "19000011"
    },
    {
      "hash" : "0x345c77ebf64718688ffa2694a6a09947c61e6496579d11a88f6eeee19acd0e85",
      "id" : "19000013"
    },
    {
      "hash" : "0x81f4f1281951c202a5be633b74be4263b7ca3b6fedba2c24af475122916112c4",
      "id" : "19000005"
    },
    {
      "hash" : "0x2db16c61ad83ec0917c97c5457d0bb8591a3b14517de6ea1d1e44260a0dc5044",
      "id" : "19000002"
    },
    {
      "hash" : "0xe23cf6a6c85f7bfa744e7bdbd3fb93904cbb533900516e9e540809ac88e5bdd1",
      "id" : "19000023"
    },
    {
      "hash" : "0xe984d811c8aadea5a2749a0bbaed20e846cb44a81d98efc669e2e50dfb78b351",
      "id" : "19000003"
    },
    {
      "hash" : "0x571bce55be6e2e834121bda4db27276f63e5a5d08a7e81453d27cc5e734c686e",
      "id" : "19000008"
    },
    {
      "hash" : "0xe5bfcdbf69dc481061ddafaa30e6098dfa51ae13b05bc64fc6d0e834a5b6fa79",
      "id" : "19000017"
    },
    {
      "hash" : "0x13a98ff914bf11f0c2f9092e73c7aca58a125a13eb21d1806526c771341d58e5",
      "id" : "19000020"
    },
    {
      "hash" : "0x0b73ade9745cc2e50b9da224ebd1dadb5055b22bd2160b72f003bcd6c98c6868",
      "id" : "19000022"
    },
    {
      "hash" : "0xd584f555e07ab593f708280a6be254f8957c3abae99196175891e0e00b21a521",
      "id" : "19000021"
    },
    {
      "hash" : "0xb91d141f404ff01321b1acccd111837f59a3d4fc7409199734af563b0110fe03",
      "id" : "19000001"
    },
    {
      "hash" : "0x8ff64dec4736b1b3c156067aee653e93156757b57d70de76435aa063f8becb08",
      "id" : "19000007"
    },
    {
      "hash" : "0x93d9507e8cd37254fb19f3d850fb687a5b6d653e533f75e8c57165075347e224",
      "id" : "19000006"
    },
    {
      "hash" : "0xc902333b686dd5aabba8ab36ee6c6370afc41adbdaad2273536eee9871e20128",
      "id" : "19000010"
    },
    {
      "hash" : "0x1de098cd6cc80c5a1edab70d800ddc43016fbfc8a4406969d4f244ca3625dffb",
      "id" : "19000019"
    },
    {
      "hash" : "0x781eb2ee71423c2663138018cabb96a7bf4ade17db1d2489bfb5002755c3758b",
      "id" : "19000000"
    },
    {
      "hash" : "0x302a5cf00ed525c6beab0e3d6f7006cba9b47fa924c11c5f711e47ac1a7f9266",
      "id" : "19000014"
    },
    {
      "hash" : "0x7ee1e4275870870877f45a09ab36d71041d426811ae77dcca25084fa4cf53b5b",
      "id" : "19000015"
    },
    {
      "hash" : "0x6c5dfa758bb87dcd4c0634a51d381ff1afbd932ae17e481ed863da1b9813a363",
      "id" : "19000018"
    },
    {
      "hash" : "0x51f78c7889080c3b0f99b8ce8b96a61169cf6c39751046543ad534f08b4bf9e1",
      "id" : "19000009"
    },
    {
      "hash" : "0x0ca9a34384f58f67cf8d7c1c07fe786784edfd608a06338957891f4dad7cd048",
      "id" : "19000016"
    },
    {
      "hash" : "0x4da2ef1fbce397b7ab9ff4b1e1cd896d9556d353d2244627e34f2d53aeb8570d",
      "id" : "19000012"
    }
  ]
}