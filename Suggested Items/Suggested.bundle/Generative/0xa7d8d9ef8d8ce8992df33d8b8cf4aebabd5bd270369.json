{
  "contractAddress" : "0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270",
  "kind" : "p5js100",
  "projectId" : "369",
  "script" : "let seed = parseInt(tokenData.hash.slice(0, 16), 16);  \/\/ ADD FOR LIVE NET\n\nlet r;\nlet maxdim;\nlet fs = new Array(3);\n\nlet bgcolor = 96;\nlet bgdir = -1;\n\nlet dead = false;\nlet checkForDeath = true;\nlet zombie = false;\nlet now;\nlet death;\n\nlet numElements = 0;\nlet strokeDim = 1;\n\nfunction setup() {\n  createCanvas(windowWidth, windowHeight, WEBGL);\n  colorMode(HSB, 360, 100, 100);\n  pixelDensity(pixelDensity());\n  maxdim = max(width, height);\n  \n  if (maxdim >= 1440) {\n    strokeDim = map(maxdim, 1440, 3160, 1.5, 4.0);\n  } else {\n    strokeDim = map(maxdim, 300, 1440, 0.2, 1.5);\n  }\n\n  numElements = 700;\n  \n  death = new Date(2052, 9, 20, 23, 44, 0, 0);\n  \n  strokeWeight(strokeDim);\n  \n  r = new RND();\n\n  now = Date.now();\n  imdead();\n  newFields();\n  if (dead) {\n    instantDeath();\n  }\n}\n\nfunction draw() {\n  if (checkForDeath && !zombie) {\n    now = Date.now();\n    imdead();\n  }\n  if (dead) {\n    bgcolor -= 0.1;\n    if (bgcolor < 10) {\n      bgcolor = 10;\n    }\n  }\n  background(0, 0, bgcolor);\n  fs[0].display();\n  fs[1].display();\n  fs[2].display();\n}\n\nfunction imdead() {\n  let diff = now - death;\n  if (diff > 0) {\n    dead = true;\n  } else {\n    dead = false;\n  }\n}\n\nfunction instantDeath() {\n  bgcolor = 10;\n  noLoop();\n}\n\nfunction revive() {\n  dead = false;\n  zombie = true;\n  bgcolor = 96;\n  bgdir = -1;\n  fs[0].revive();\n  fs[1].revive();\n  fs[2].revive();\n}\n\nfunction keyPressed() {\n  if (key == ' ') {\n    bgcolor += 5 * bgdir;\n    if (bgcolor >= 100 || bgcolor <= 0) {\n      bgdir *= -1;\n    }\n  } else if (key == 'n' || key == 'N') {\n    newFields();\n  } else if (key == 'd' || key == 'D') {\n    print(now - death);\n  } \n  if (dead) {\n    if (key == 'r' || key == 'R') {\n      revive();\n      loop();\n    }\n  }\n}\n\nfunction newFields() {\n  let ang1 = r.rb(0, TWO_PI);\n  let ang2 = ang1 + r.rb(-QUARTER_PI\/3, QUARTER_PI\/3);\n  let ang3 = ang1 + r.rb(-QUARTER_PI\/3, QUARTER_PI\/3);\n  let d1 = new FieldData(ang1);\n  let d2 = new FieldData(ang2);\n  let d3 = new FieldData(ang3);\n  fs[0] = new Field(d1);\n  fs[1] = new Field(d2);\n  fs[2] = new Field(d3);\n}\n\nclass FieldData {\n  constructor(angle) {\n    this.angle = angle;\n    this.color1 = r.rb(0, 360);\n    this.color2 = r.rb(0, 360);\n    this.whichPalette = r.rb(0, 1);\n    this.speed = r.rb(-0.0005, 0.0005);\n    this.density = r.rb(0.1, 0.4);\n    this.densityTest = new Array(numElements);\n    for (let i = 0; i < this.densityTest.length; i++) {\n      this.densityTest[i] = r.rb(0, 1);\n    }\n  }\n}\n\nclass Element {\n  constructor(_x1, _y1, _x2, _y2, _h, _s, _b, _sp) {\n    this.x1 = _x1;\n    this.y1 = _y1;\n    this.x2 = _x2;\n    this.y2 = _y2;\n    this.off = 0.0;\n    this.h = _h;\n    this.s = _s;\n    this.b = _b;\n    this.supress = _sp;\n    this.deadSaturation = this.s;\n    this.startSaturation = this.s;\n    this.jit = 1.0;\n    if (dead) {\n      this.jit = 0.0;\n      this.deadSaturation = 0.0;\n    }\n  }\n  \n  revive() {\n    this.jit = 1.0;\n    this.deadSaturation = this.startSaturation;\n  }\n\n  jitter() {\n    if (dead) {\n      this.jit -= 0.001;\n      if (this.jit <= 0) {\n        this.jit = 0;\n      }\n    }\n    this.off = r.rb(-this.jit, this.jit);\n  }\n\n  display() {\n    if (dead) {\n      this.deadSaturation -= 0.1;\n      if (this.deadSaturation <= 0) {\n        this.deadSaturation = 0;\n      }\n    }\n    if (!this.supress) {\n      if (dead) {\n        stroke(this.h, this.deadSaturation, this.b);\n      } else {\n        stroke(this.h, this.s, this.b);\n      }\n      line(this.x1 + this.off, this.y1, this.x2 + this.off, this.y2);\n    }\n  }\n}\n\nclass Field {\n  constructor(fd) {\n    this.num = numElements;\n    this.angle = fd.angle;\n    this.speed = fd.speed;\n    this.density = fd.density;\n    this.densityTest = fd.densityTest;\n    this.whichPalette = fd.whichPalette;\n    this.color1 = fd.color1;\n    this.color2 = fd.color2;\n    this.count = 0;\n    this.elements = [this.num];\n    this.show = true;\n    this.pnums = [];\n    this.rndColor = 0;\n    this.createColor();\n    let index = 0;\n    for (let i = 0; i < numElements; i++) {\n      let tx = map(i, 0, numElements - 1, -maxdim, maxdim); \/\/ ALT\n      let h = this.pnums[index];\n      let s = this.pnums[index + 1];\n      let b = this.pnums[index + 2];\n      this.elements[i] = new Element(\n        tx,\n        -maxdim,\n        tx,\n        maxdim,\n        h,\n        s,\n        b,\n        this.show\n      );\n      index += 3;\n      if (this.densityTest[i] > this.density) {\n        this.show = false;\n      } else {\n        this.show = true;\n      }\n    }\n  }\n  \n  revive() {\n    for (let i = 0; i < numElements; i++) {\n      this.elements[i].revive(); \n    }\n  }\n\n  display() {\n    push();\n    rotate(this.angle);\n    for (let i = 0; i < numElements; i++) {\n      this.elements[i].jitter();\n      this.elements[i].display();\n    }\n    if (!dead) {\n      this.angle += this.speed;\n    }\n    pop();\n  }\n\n  createColor() {\n    if (this.whichPalette > 0.66) {\n      this.rndColor = 1;\n    } else {\n      this.rndColor = 0;\n    }\n    this.createPalette();\n  }\n  \n  createPalette() {\n    let index = 0;\n    let start = this.color1;\n    let microStart = this.color2;\n    for (let x = 0; x < numElements; x++) {\n      if (this.rndColor == 0) {\n        let xx = map(x, 0, numElements, 0, 720);\n        let h = map(x, 0, numElements, start, (start + xx) % 360);\n        let s = map(x, 0, numElements, 30, 90);\n        let b = 85;\n        this.pnums[index] = h;\n        this.pnums[index + 1] = s;\n        this.pnums[index + 2] = b;\n        index += 3;\n      } else if (this.rndColor == 1) {\n        let stop = start + map(x, 0, numElements, 0, 360);\n        if (stop > 360) {\n          stop = stop - 360;\n        }\n        this.pnums[index] = stop;\n        this.pnums[index + 1] = map(x, 0, numElements, 30, 90);\n        this.pnums[index + 2] = 85;\n        index += 3;\n      }\n    }\n  }\n}\n\nclass RND {\n  constructor() {\n    this.useA = false;\n    let sfc32 = function (uint128Hex) {\n      let a = parseInt(uint128Hex.substr(0, 8), 16);\n      let b = parseInt(uint128Hex.substr(8, 8), 16);\n      let c = parseInt(uint128Hex.substr(16, 8), 16);\n      let d = parseInt(uint128Hex.substr(24, 8), 16);\n      return function () {\n        a |= 0; b |= 0; c |= 0; d |= 0;\n        let t = (((a + b) | 0) + d) | 0;\n        d = (d + 1) | 0;\n        a = b ^ (b >>> 9);\n        b = (c + (c << 3)) | 0;\n        c = (c << 21) | (c >>> 11);\n        c = (c + t) | 0;\n        return (t >>> 0) \/ 4294967296;\n      };\n    };\n    this.prngA = new sfc32(tokenData.hash.substr(2, 32));\n    this.prngB = new sfc32(tokenData.hash.substr(34, 32));\n    for (let i = 0; i < 1e6; i += 2) {\n      this.prngA();\n      this.prngB();\n    }\n  }\n  random_dec() {\n    this.useA = !this.useA;\n    return this.useA ? this.prngA() : this.prngB();\n  }\n  rb(a, b) {\n    return a + (b - a) * this.random_dec();\n  }\n}",
  "tokens" : [
    {
      "hash" : "0xaa12206bbf05f2e35482cef8c7f97328d82a989ed8f0326c4718e8cb535d150f",
      "id" : "369000004"
    },
    {
      "hash" : "0x80beb02e5caded8473e4f595a546b0d29dc128c16faad9353b07aef74782887f",
      "id" : "369000024"
    },
    {
      "hash" : "0xa1be122c96ee756f910fb897a52304c8b110e2247f2983b655a0720fd43fa92a",
      "id" : "369000025"
    },
    {
      "hash" : "0xbe5309cebd1bd1b9b758152d1966f64937a0494ea70c5b54b68dce6984828351",
      "id" : "369000028"
    },
    {
      "hash" : "0x9f42a548fdd47793b5c4747930f13adaf93c80e52ffadd09a5e970ff469986c7",
      "id" : "369000042"
    },
    {
      "hash" : "0xdc24643ab6c6bcecb4412e98b42050a152ef16d57626bcdc8f93f667da020bec",
      "id" : "369000044"
    },
    {
      "hash" : "0xd7d0f425acc5d3bc24c5d871b5c7a9ab916b354ad5c2ee2ea2a86912d208fb6b",
      "id" : "369000000"
    },
    {
      "hash" : "0xd32039c234a5722bfc6c0879126f1d10a602757a3c36bde4f352367e1531f188",
      "id" : "369000017"
    },
    {
      "hash" : "0xb7e9693354db9571d0e3bc9a867fbdd6168850e7151e1093a20fce1cb3cb0416",
      "id" : "369000008"
    },
    {
      "hash" : "0xacb678ef5cecb171b3b160ee9069db0794be7499ea115d017a4d26668a1324a0",
      "id" : "369000031"
    },
    {
      "hash" : "0x157ca3318abf2bff463ef6203b9e402520ab1c401de6948118f4ba65516cd722",
      "id" : "369000040"
    },
    {
      "hash" : "0xb32a52d348a20be5bb346b141c15d48951e7666014dbdc60b1590bf07bc92c1e",
      "id" : "369000029"
    },
    {
      "hash" : "0xa606f970a8e434fffe8487f18ed4195a3ef3b1fbeee0a3afbc38c9dead749ae2",
      "id" : "369000005"
    },
    {
      "hash" : "0x6d6f836d660da190a5f35ffc384e714b7f82340c4e539c81ba41ec2a5938c4e5",
      "id" : "369000047"
    },
    {
      "hash" : "0x5d6007f67b3f1838df3c9b5214e41c35213cb8028ba88e0faff57cd5904fd589",
      "id" : "369000030"
    },
    {
      "hash" : "0x3a6e1a0f7c878a2f3241bcdd2784847cd02c1ec5426c18561afa6dfd42a5fb20",
      "id" : "369000015"
    },
    {
      "hash" : "0xe45417d65eee56c1f6f27012ca24995ac8529068538c2d3bc1c3743a1ae16909",
      "id" : "369000033"
    },
    {
      "hash" : "0x6ec1efdf77b84edccfc8db7d9ac8d60014765e910d228bc8a186b2f1b852b213",
      "id" : "369000034"
    },
    {
      "hash" : "0xe135f29291226195fc14d7039748a8039bc7d7256f781a3b8e862a1e19b57f75",
      "id" : "369000035"
    },
    {
      "hash" : "0xbbe63ba000ea030ae6ac0885ffa7b26f530df688abbb1de5ff5a1caff5404bf1",
      "id" : "369000012"
    },
    {
      "hash" : "0xdad55b3ac56ea9456e712800f49084b1a735f4d39ddc624ca5dbcb9ac9e07cc1",
      "id" : "369000046"
    },
    {
      "hash" : "0x52bd301ff2b0385506991d2191866df211d962082eeea93568def8b61667eb21",
      "id" : "369000026"
    },
    {
      "hash" : "0xb5dc30143f448c1c14a6979b0965fe3e100ce102d46a58e57f473b669d9c9ad1",
      "id" : "369000019"
    },
    {
      "hash" : "0xd86019d504f1d3c73ac189a111df53523b341b2c479b6b9b13854187259355db",
      "id" : "369000003"
    },
    {
      "hash" : "0xd60f3314cdbf8654cb77639b3bba5293a1750a9897d12f4631e40b0d72ee2459",
      "id" : "369000032"
    },
    {
      "hash" : "0x56f568eb05ca7ccc8d71734a5bc875eac601b8f1fd53421009096b967833ebcc",
      "id" : "369000021"
    },
    {
      "hash" : "0x7450bd61129d1696afc71844cb446768743953a34ec2cec5de96c49319ad888f",
      "id" : "369000018"
    },
    {
      "hash" : "0x3c637c901de1adc22c288873984a02e913312cb3e6205cfea8e9f9648996da16",
      "id" : "369000022"
    },
    {
      "hash" : "0xd806d2d828df5fb9c83bf4ad4bdf1e6efd54c231703cc02aa206ce9c137b7109",
      "id" : "369000009"
    },
    {
      "hash" : "0x6dc6dc65928c79c81a1226096221aee7193b0d21f7ffa176cae58ed68183272c",
      "id" : "369000010"
    },
    {
      "hash" : "0xfca0e0365d4ea502a6276e3352bf5c8d69427c5f88ca8f17cdd234c7fed6c5db",
      "id" : "369000011"
    },
    {
      "hash" : "0x32d3e784918c0b7e951a93b699e53641444994a2e92d9bfe685dbf6d228fae99",
      "id" : "369000020"
    },
    {
      "hash" : "0xfbb2b1c23d85a0a1c39d69f4349f296de5eb3ec0483689e2052ae4d478e7ecc8",
      "id" : "369000041"
    },
    {
      "hash" : "0x45ea81eb9ab903520d96142ae21c574706c1007e6766f1f5f8a774eeeceed362",
      "id" : "369000043"
    },
    {
      "hash" : "0x4cd289235661bef0cda45dde89c519b02bfd22344950a2a7b6a18ddda572583f",
      "id" : "369000006"
    },
    {
      "hash" : "0x95c849772f0aeed95a5dd5fa640de49c2480cbd6316ed5e46b5c660ee020ca4b",
      "id" : "369000007"
    },
    {
      "hash" : "0x2b4b49b70ccc9dbb72120054ad39f259be1bcb5965d57fd438f3263ebc07db62",
      "id" : "369000048"
    },
    {
      "hash" : "0x97e80e70e0183036778d0c78848bb75cc2c071385a2ad92cb8233e1e31d94063",
      "id" : "369000039"
    },
    {
      "hash" : "0x66b5f70e683abd06dd24abb23d93b9769bfbeec2c808db5510f795f67fac6e76",
      "id" : "369000001"
    },
    {
      "hash" : "0x4b993da33a4d2fa47e8e740dcb9691ec3936b904074400c4749a51120f6f7888",
      "id" : "369000014"
    },
    {
      "hash" : "0x5cc83b9551756f9df85c94af59107d0d22a025d697f7a5a22ab0415fcde63031",
      "id" : "369000036"
    },
    {
      "hash" : "0x984d4960ff151c8d640a07b0b1726dff63d9f676de14e3bcb0e1f570531c9349",
      "id" : "369000049"
    },
    {
      "hash" : "0x63e7b8a7e162ca685c1fe2945b89b85c2ad40d5f00c0d0650ea36627a09d9e0c",
      "id" : "369000037"
    },
    {
      "hash" : "0x29c13dc2657cf0f094ffdf2da82f5ac0b717bc493537f05e0b6cb603c879b4b3",
      "id" : "369000038"
    },
    {
      "hash" : "0xe93bd2b8d48495c3edcaa091ff56999aacf6a955baa4f770c84713c9932998a2",
      "id" : "369000027"
    },
    {
      "hash" : "0x10d5271eaea7dc2f3cc241ddedd2e543598cadd30da60c859e9e30af260c9d23",
      "id" : "369000002"
    },
    {
      "hash" : "0x596dd5525b0aee51e261e1fa7c2b497709f4ca4387518b2658cbee9a9096e1c3",
      "id" : "369000016"
    },
    {
      "hash" : "0xbc722f8255abb41be7bb37273d294e53abb0bba7171b50dd762522369dbf06ad",
      "id" : "369000013"
    },
    {
      "hash" : "0x7b65e673f6a86489c8c8532802569790bb9771aa66c8b0844ee9dcfd7f98ed24",
      "id" : "369000023"
    },
    {
      "hash" : "0x3e8b0b1454cc36f8c121d5215b9298c59cffaa14a0b0c57e870b6c76f45a099b",
      "id" : "369000045"
    }
  ]
}