{
  "contractAddress" : "0x99a9b7c1116f9ceeb1652de04d5969cce509b069",
  "kind" : "js",
  "projectId" : "416",
  "script" : "\/\/\"use strict\";\nlet N = 20;\nlet Nrand = 100;\nlet R;\nlet dx=0.0,dy=0.0,dz=0.0;\nlet dxc=0.0,dyc=0.0,dzc=0.0;\nlet dxp=0.0,dyp=0.0,dzp=0.0;\nlet xc=0,yc=0,zc=1;\nlet TWO_PI=6.28318530718;\n\nlet pals = [];\npals.push([[359, 31, 56], [353, 19, 97], [6,20,96], [22, 21, 92], [20, 16, 98], [28, 21, 99], [6,20,96], [347,13,96]]);\npals.push([[208,49,38], [205,41,59], [192,29,45], [190,14,64], [220, 9, 78], [12, 4, 45], [167,16,81], [180,7,100]]);\npals.push([[222,86,22], [208,88,29], [203,61,57], [215, 49, 74], [211,68, 93], [236,100,24], [195,85,45]]);\npals.push([[4,100,34],[1,96,84],[26,92,94],[34,58,89],[48,100,99],[21,100,84],[8,100,17]]);\npals.push([[43,35,28],[46,39,42],[41,27,90],[39,46,49],[39,83,90],[46,6,96],[46,15,97]]);\npals.push([[209, 92, 15], [197, 98, 24], [195, 79, 37], [190, 42, 64], [189, 62, 90]]);\npals.push([[331,21,31], [265,23,40], [335,26,76], [163,32,22], [210, 24, 29], [180,31, 97], [49,30,63], [180,23,90], [170,13,48]]);\npals.push([[26, 71, 17],[26, 78, 23],[42, 68, 60], [40, 46, 60], [42, 76, 74], [37, 62, 74]]);\npals.push([[102,41,55], [123,37,63], [94,27,65], [121,30,69], [91, 26, 67], [125,37, 63]]);\npals.push([[115,52,17], [98,51,40],[78,58,54],[91,67,84],[6,54,38]]);\npals.push([[349, 83, 69],[250, 44, 66],[191, 44, 66],[27, 82, 72],[45, 85, 70],[0, 100, 79]])\npals.push([[221, 20, 21],[199, 26, 38],[190, 10, 81],[220, 0, 100],[190, 0, 100],[205, 30, 43],[183, 20, 100],[215, 43, 36],[185, 0, 100],[200, 0, 100]])\nlet header = `#version 300 es\nprecision highp float;`;\n\nvar src_vert = header+`\nin vec2 a;\nout vec2 u;\nvoid main() {\n  gl_Position = vec4(a,0.,1.);\n  u = a\/2. +vec2(.5,.5);\n}`;\nvar src_simp = header+`\nconst int N =20;\nconst float Nf =20.;\nconst int Nrand =100;\nconst float Nrandf =100.;\nconst float dn =0.1;\nconst int Nx =512;\nconst float Nxf =512.;\nconst float PI =3.1415926;\nconst int numOctaves =8;\n\nin vec2 u;\nout vec4 cout;\n\nuniform vec2 res;\nuniform int t; \/\/ frame number\nuniform highp sampler2D img;\nuniform highp sampler2D img00;\nuniform float kp[N];\nuniform float rand[Nrand];\nuniform vec3 dxy;\nuniform vec3 rc;\n\nvec2 hash2( in vec2 x ) {\n  int ii = int(mod(x.x+res.x*x.y,Nrandf)); \/\/counter into array of random #s\n  int i2 = int(mod(x.y-res.y*x.x,Nrandf)); \/\/counter into array of random #s\n  return vec2(rand[ii],rand[i2]);\n}\nfloat ddot ( in vec2 x, in vec2 y ) { return x.x+y.x + x.y*y.y; }\n\/\/ returns 3D value noise (in .x)  and its derivatives (in .yz)\nvec3 noise( in vec2 p ) {\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\n    vec2 u = f*f*f*(f*(f*6.0-15.0)+10.0);\n    vec2 du = 30.0*f*f*(f*(f-2.0)+1.0);\n\n    vec2 ga = hash2( i + vec2(0.0,0.0) );\n    vec2 gb = hash2( i + vec2(1.0,0.0) );\n    vec2 gc = hash2( i + vec2(0.0,1.0) );\n    vec2 gd = hash2( i + vec2(1.0,1.0) );\n\n    float va = ddot( ga, f - vec2(0.0,0.0) );\n    float vb = ddot( gb, f - vec2(1.0,0.0) );\n    float vc = ddot( gc, f - vec2(0.0,1.0) );\n    float vd = ddot( gd, f - vec2(1.0,1.0) );\n\n    return vec3( va + u.x*(vb-va) + u.y*(vc-va) + u.x*u.y*(va-vb-vc+vd),   \/\/ value\n                 ga + u.x*(gb-ga) + u.y*(gc-ga) + u.x*u.y*(ga-gb-gc+gd) +  \/\/ derivatives\n                 du * (u.yx*(va-vb-vc+vd) + vec2(vb,vc) - va));\n}\n\nvec3 fbm( in vec2 x, in float H ) {\n    float G = exp(-2.*H);float f = 1.0;float a = 1.0;vec3 t = vec3(0.);\n    for( int i=0; i<numOctaves; i++ )\n    { t += a*noise(f*x);f *= 2.0;a *= G; }\n    return t;\n}\n\nvec4 laplacian(in sampler2D img, in vec2 uv, in float dx) {\n  vec2 dt = 1.\/res;\n  vec4 rg = texture(img, uv + vec2(-1., -1.)*dt)*(0.05+dx);\n  rg += texture(img, uv + vec2(0., -1.)*dt)*(0.2-dx);\n  rg += texture(img, uv + vec2(1., -1.)*dt)*(0.05+dx);\n  rg += texture(img, uv + vec2(-1., 0.)*dt)*(0.2-dx);\n  rg -= texture(img, uv + vec2(0., 0.)*dt);\n  rg += texture(img, uv + vec2(1., 0.)*dt)*(0.2-dx);\n  rg += texture(img, uv + vec2(-1., 1.)*dt)*(0.05+dx);\n  rg += texture(img, uv + vec2(0., 1.)*dt)*(0.2-dx);\n  rg += texture(img, uv + vec2(1., 1.)*dt)*(0.05+dx);\n  return rg;\n}\n\nvoid main(void) \/\/( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 dt = rc.z\/res;\n    vec2 uv = (u+dxy.xy-vec2(0.5))*(1.+dxy.z)+vec2(0.5);\n    vec2 uc = -rc.xy + u*rc.z; \/\/ global coords\n    vec3 ff = (0.4+0.6*kp[9])*fbm(uc+fbm(0.8*uc,0.7).yz,0.7);\n    vec3 f2 = (0.4+0.6*kp[10])*fbm(-uc+fbm(-0.8*uc,0.7).yz,0.7);\n    vec4 cc;\nvec4 lp,lp2,cv,cu,cv2,cu2;\nfloat aa,bb;\n   if ((uv.x>1. || uv.x<0. || uv.y>1. || uv.y<0.)) {\n  cc = texture(img00,uc);\n  aa = cc.x\/256. + cc.y;\n  bb = cc.z\/256. + cc.w;\n  lp = laplacian(img00,uc,(kp[0]*2.-1.)*f2.x*(1.-aa));\n  lp2 = laplacian(img00,uc,(kp[1]*2.-1.)*ff.x*bb);\n  cv= texture(img00, uc + vec2(0., 1.)*dt);\n  cu= texture(img00, uc + vec2(1., 0.)*dt);\n  cv2= texture(img00, uc + vec2(0., -1.)*dt);\n  cu2= texture(img00, uc + vec2(-1., 0.)*dt);\n\n} else {\n  uc=uv;\n  cc = texture(img,uc);\n  aa = cc.x\/256. + cc.y;\n  bb = cc.z\/256. + cc.w;\n  lp = laplacian(img,uc,(kp[0]*2.-1.)*f2.x*(1.-aa));\n  lp2 = laplacian(img,uc,(kp[1]*2.-1.)*ff.x*bb);\n  cv= texture(img, uc + vec2(0., 1.)*dt);\n  cu= texture(img, uc + vec2(1., 0.)*dt);\n  cv2= texture(img, uc + vec2(0., -1.)*dt);\n  cu2= texture(img, uc + vec2(-1., 0.)*dt);\n}\n\nfloat da = 1.2*(1.-kp[15])*(1.-bb)*(lp.x+256.*lp.y)\/256. + 3.*( -aa*bb*bb + 0.015*(1.+kp[17])*(1.-aa))*ff.x*ff.x ;\nfloat db = 1.2*(1.-kp[16])*(1.+kp[7])*(0.02+ff.x*ff.x)*aa*0.5*(lp2.z+256.*lp2.w)\/256. + 3.*( aa*bb*bb - 0.04*(1.+1.*kp[6])*bb)*ff.x*ff.x;\nfloat dda=sin(3.*(1.+kp[2]*(ff.x-1.))*aa*1.57)*kp[15]*0.18*((cu.x\/256.+cu.y-cu2.x\/256.-cu2.y)*ff.y + (cv.x\/256.+cv.y-cv2.x\/256.-cv2.y)*ff.z);\nfloat ddb=sin(3.*(1.+kp[3]*(f2.x-1.))*bb*1.57)*kp[16]*0.18*((cu.z\/256.+cu.w-cu2.z\/256.-cu2.w)*f2.y + (cv.z\/256.+cv.w-cv2.z\/256.-cv2.w)*f2.z);\n\nuv += 2.*f2.yz;\nfloat uv2 = .003+uv.x*uv.x+uv.y*uv.y;\nuv2 = (cu.x\/256.+cu.y-cu2.x\/256.-cu2.y)*uv.y\/uv2 - (cv.x\/256.+cv.y-cv2.x\/256.-cv2.y)*uv.x\/uv2;\ndda += kp[12]*0.04*uv2;\nddb += kp[13]*0.04*uv2;\n\nda += dda*(1.-dda);\ndb += ddb*(1.-ddb);\nda*=46000.;\ndb*=46000.;\n\nda+=aa*256.*256.;\ndb+=bb*256.*256.;\n\nfloat yn = floor(da\/256.);\nfloat xn = (da-yn*256.);\nfloat wn = floor(db\/256.);\nfloat zn = (db-wn*256.);\n\ncout = vec4(xn,yn,zn,wn)\/256.;\n}`;\n\nvar src_colp = header+`\nconst int N =20;\nconst float Nf =20.;\nconst int Nrand =100;\nconst float Nrandf =100.;\nconst float dn =0.1;\nconst int Nx =512;\nconst float Nxf =512.;\nconst float PI =3.1415926;\nconst int numOctaves =8;\n\nin vec2 u;\nout vec4 cc;\n\nuniform vec2 res;\nuniform vec2 L;\nuniform int t; \/\/ frame number\nuniform highp sampler2D img;\nuniform highp sampler2D img2;\nuniform sampler2D pal; \/\/ palette\nuniform float rand[Nrand];\nuniform vec3 dxy;\nuniform vec3 rc;\n\nvec2 hash2( in vec2 x ) {\n  int ii = int(mod(x.x+res.x*x.y,Nrandf));\n  int i2 = int(mod(x.y-res.y*x.x,Nrandf));\n  return vec2(rand[ii],rand[i2]);\n}\nfloat ddot ( in vec2 x, in vec2 y ) { return x.x+y.x + x.y*y.y; }\n\/\/ returns 3D value noise (in .x)  and its derivatives (in .yz)\nvec3 noise( in vec2 p ) {\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\n    vec2 u = f*f*f*(f*(f*6.0-15.0)+10.0);\n    vec2 du = 30.0*f*f*(f*(f-2.0)+1.0);\n\n    vec2 ga = hash2( i + vec2(0.0,0.0) );\n    vec2 gb = hash2( i + vec2(1.0,0.0) );\n    vec2 gc = hash2( i + vec2(0.0,1.0) );\n    vec2 gd = hash2( i + vec2(1.0,1.0) );\n\n    float va = ddot( ga, f - vec2(0.0,0.0) );\n    float vb = ddot( gb, f - vec2(1.0,0.0) );\n    float vc = ddot( gc, f - vec2(0.0,1.0) );\n    float vd = ddot( gd, f - vec2(1.0,1.0) );\n\n    return vec3( va + u.x*(vb-va) + u.y*(vc-va) + u.x*u.y*(va-vb-vc+vd),   \/\/ value\n                 ga + u.x*(gb-ga) + u.y*(gc-ga) + u.x*u.y*(ga-gb-gc+gd) +  \/\/ derivatives\n                 du * (u.yx*(va-vb-vc+vd) + vec2(vb,vc) - va));\n}\nvec3 fbm( in vec2 x, in float H ) {\n    float G = exp(-2.*H);float f = 1.0;float a = 1.0;vec3 t = vec3(0.);\n    for( int i=0; i<numOctaves; i++ )\n    { t += a*noise(f*x);f *= 2.0;a *= G; }\n    return t;\n}\nvec4 laplacian(in sampler2D img, in vec2 uv, in float dx) {\n  vec2 dt = 1.\/res;\n  vec4 rg = texture(img, uv + vec2(-1., -1.)*dt)*(0.05+dx);\n  rg += texture(img, uv + vec2(0., -1.)*dt)*(0.2-dx);\n  rg += texture(img, uv + vec2(1., -1.)*dt)*(0.05+dx);\n  rg += texture(img, uv + vec2(-1., 0.)*dt)*(0.2-dx);\n  rg -= texture(img, uv + vec2(0., 0.)*dt);\n  rg += texture(img, uv + vec2(1., 0.)*dt)*(0.2-dx);\n  rg += texture(img, uv + vec2(-1., 1.)*dt)*(0.05+dx);\n  rg += texture(img, uv + vec2(0., 1.)*dt)*(0.2-dx);\n  rg += texture(img, uv + vec2(1., 1.)*dt)*(0.05+dx);\n  return rg;\n}\n\/\/ from http:\/\/www.java-gaming.org\/index.php?topic=35123.0\nvec4 cubic(float v){\n    vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;\n    vec4 s = n*n*n;\n    float x = s.x;\n    float y = s.y - 4.0 * s.x;\n    float z = s.z - 4.0 * s.y + 6.0 * s.x;\n    float w = 6.0 - x - y - z;\n    return vec4(x, y, z, w)*(1.\/6.);\n}\nvec4 textureBicubic(in sampler2D img, in vec2 uv){\n    vec2 dt = 1.\/res;\n    uv = uv\/dt - 0.5;\n    vec2 fxy = fract(uv);\n    uv -= fxy;\n\n    vec4 xc = cubic(fxy.x);\n    vec4 yc = cubic(fxy.y);\n\n    vec4 c = uv.xxyy + vec2 (-0.5, +1.5).xyxy;\n\n    vec4 s = vec4(xc.xz + xc.yw, yc.xz + yc.yw);\n    vec4 offset = c + vec4 (xc.yw, yc.yw) \/ s;\n\n    offset *= dt.xxyy;\n\n    vec4 sample0 = vec4(texture(img, offset.xz));\n    vec4 sample1 = vec4(texture(img, offset.yz));\n    vec4 sample2 = vec4(texture(img, offset.xw));\n    vec4 sample3 = vec4(texture(img, offset.yw));\n\n    float sx = s.x \/ (s.x + s.y);\n    float sy = s.z \/ (s.z + s.w);\n\n    return mix(mix(sample3, sample2, sx), mix(sample1, sample0, sx), sy);\n}\nvoid main(void)\n{\nvec2 uv = (u+dxy.xy)*(1.+dxy.z); \/\/vTexCoord.xy;\nvec2 uc = -rc.xy + u*rc.z;\nif (L.x>L.y) {\n  uv.y = 0.5 + (L.y\/L.x)*(uv.y-0.5);\n  uc.y = 0.5 + (L.y\/L.x)*(uc.y-0.5);\n} else {\n  uv.x = 0.5 + (L.x\/L.y)*(uv.x-0.5);\n  uc.x = 0.5 + (L.x\/L.y)*(uc.x-0.5);\n}\n\n    vec3 ff = .5*fbm(uc+fbm(0.8*uc,0.7).yz,0.7);\n    vec3 f2 = fbm(-uc+fbm(-0.8*uc,0.7).yz,0.7);\n\n   cc = textureBicubic(img,uv);\n   vec4 cco = textureBicubic(img2,uv);\n\n    float aa = (cc.x+256.*cc.y)\/256.;\n    float bb = (cc.z+256.*cc.w)\/256.;\nfloat aao = (cco.x+256.*cco.y)\/256.;\nfloat bbo = (cco.z+256.*cco.w)\/256.;\n\nvec4 lpo = laplacian(img2,uv,3.*0.3*ff.x*aao);\nvec4 lp = laplacian(img,uv,3.*0.3*ff.x*aa);\n\naao=4.*0.03*(lp[0]+lp[1]*256.-lpo[0]-lpo[1]*256.);\nbbo=4.*0.03*(lp[2]+lp[3]*256.-lpo[2]-lpo[3]*256.);\n\nvec4 cc_hsl = texture(pal,vec2(clamp(2.*bb*aa+0.4*(aa)*ff.x+0.4*(bb)*f2.x,0.,1.),clamp(ff*bb,0.,1.)));\nvec4 cco_hsl = texture(pal,vec2(clamp(2.*bbo*aao+0.4*(aao)*ff.x+0.4*(bbo)*f2.x,0.,1.),clamp(ff*bbo,0.,1.)));\ncc_hsl -= 0.5*(cc_hsl-cco_hsl);\n\ncc_hsl.x += 0.3*ff.x*(1.-f2.x) + 0.01*f2.x*bb + rc.x*rc.y;\ncc_hsl.x = mod(cc_hsl.x,1.);\ncc_hsl.z *= 0.2+(3.*bb+6.*aa*bb);\ncc_hsl.y *= (1.1-ff.x*bb)*(1.-f2.x*f2.x);\nvec3 rgb = clamp( abs(mod(cc_hsl.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\nrgb = cc_hsl.z + cc_hsl.y * (rgb-0.5)*(1.0-abs(2.0*cc_hsl.z-1.0));\nrgb *= .75+.32*rgb*(3.-2.*rgb);\ncc = vec4(pow(rgb[0],0.9), pow(rgb[1],0.9), pow(rgb[2],0.85), 1.);\nvec4 ccoo = vec4(.4+.3*aao-f2.x,.1*(aao+bbo),1.-bbo,1.);\ncc = mix(cc,ccoo,clamp(2.*ff.x*bbo*aao,-0.5,1.));\ncc=clamp(cc,0.,1.);\n}`;\nlet useA,prngA,prngB;\nclass Random {\n  constructor() {\n    useA = false;\n    let sfc32 = function (uint128Hex) {\n      let a = parseInt(uint128Hex.substr(0, 8), 16);\n      let b = parseInt(uint128Hex.substr(8, 8), 16);\n      let c = parseInt(uint128Hex.substr(16, 8), 16);\n      let d = parseInt(uint128Hex.substr(24, 8), 16);\n      return function () {\n        a |= 0; b |= 0; c |= 0; d |= 0;\n        let t = (((a + b) | 0) + d) | 0;\n        d = (d + 1) | 0;\n        a = b ^ (b >>> 9);\n        b = (c + (c << 3)) | 0;\n        c = (c << 21) | (c >>> 11);\n        c = (c + t) | 0;\n        return (t >>> 0) \/ 4294967296;\n      };\n    };\n    \/\/ seed prngA with first half of tokenData.hash\n    prngA = new sfc32(tokenData.hash.substr(2, 32));\n    \/\/ seed prngB with second half of tokenData.hash\n    prngB = new sfc32(tokenData.hash.substr(34, 32));\n    for (let i = 0; i < 1e6; i += 2) {\n       prngA(); prngB();\n    }\n  }\n  random_dec() {\n    useA = !useA;\n    return useA ? prngA() : prngB();\n  }\n}\nfunction rnd() { return R.random_dec() }\n\nfunction vecscl(v,k) { let w=[]; for (let i=0; i<v.length; i++) { w[i] = v[i]*k; } return w }\nfunction clamp(x) { return Math.max(0,Math.min(1,x)); }\nfunction dot2(x,y) { return x[0]*y[0]+x[1]*y[1]; }\n\nR = new Random();\n\nlet C,D,body,gl,Shader;\ndocument.body.style.backgroundColor = \"#030303\";\nconsole.log(\"Calian by Eric De Giuli\");\nC=({body}=D=document).createElement('canvas');\nbody.appendChild(C);\ngl=C.getContext('webgl2');\n\nShader=(typ,src)=>{\n  const s =gl.createShader(typ);\n  gl.shaderSource(s,src);\n  gl.compileShader(s);\n  if (!gl.getShaderParameter(s, gl.COMPILE_STATUS)) {\n                console.error(`Error compiling ${typ === gl.VERTEX_SHADER ? \"vertex\" : \"fragment\"} shader \"${src}\":`);\n                console.log(gl.getShaderInfoLog(s));\n            }\n  return s;\n}\nvar GET = {};\nvar query = window.location.search.substring(1).split(\"&\");\nfor (var i = 0, max = query.length; i < max; i++)\n{\n    if (query[i] === \"\")\n        continue;\n    var param = query[i].split(\"=\");\n    GET[decodeURIComponent(param[0])] = decodeURIComponent(param[1] || \"\");\n}\nlet simp,colp,vs,fs;\nlet Lx,Ly,Nx,Ny;\nNx = 512;if (GET.N) { Nx=GET.N; }\nNy=Nx;\nconst head = \/\\bHeadlessChrome\\\/\/.test(navigator.userAgent);\n\nlet PI = 3.1415926;\n\nlet pal,pj,inv;\nlet palp = [3,5,3,4,1,2,4,4,1,3,2,2,4,2,3,3];\npalp = vecscl(palp,1\/46);\nlet cumpal = []; cumpal[0]=0;\nfor (let i=1; i<palp.length; i++) { cumpal[i]=cumpal[i-1]+palp[i-1]; }\nlet st = 1;\npj=1;\nlet palr = rnd();\nwhile (st<palp.length && cumpal[st]<palr) { st++; } st--;\nlet pj2 = Math.floor(11*rnd());\n(tokenData.tokenId%1000000==0)&&(st=1);\ninv=0;\nswitch(st) {\n  case 0: pj=6;pj2=7; break; \/\/ embers in half light\n  case 1: pj=11;pj2=7; break; \/\/ liquid circuit\n  case 2: pj=1;pj2=5; break; \/\/ alpenglow\n  case 3: pj=1;pj2=0; break; \/\/ zabriskie point\n  case 4: pj=3;pj2=9; break; \/\/ aurum\n  case 5: pj=6;pj2=0; break; \/\/ tunguska\n  case 6: pj=5;pj2=7; break; \/\/ nocturne\n  case 7: pj=11;pj2=5; break; \/\/ kind of blue\n  case 8: pj=11;pj2=4; break; \/\/ inferno\n  case 9: pj=11;pj2=0; break; \/\/ constellation\n  case 10: pj=0;pj2=0;inv=1; break; \/\/ white heat\n  case 11: pj=3;pj2=3;inv=1; break; \/\/ calanque\n  case 12: pj=2;pj2=0; break; \/\/ bouquet\n  case 13: pj=2;pj2=10; break; \/\/ spectral\n  case 14: pj=10;pj2=8; break; \/\/ the forest path to the spring\n  case 15: pj=10;pj2=4; break; \/\/ abalone\n}\npal = new Uint8Array(10*4*2);\nfor (let k=0; k<11; k++) { \/\/ which colour in palette\n  for (let k2=0; k2<2; k2++) { \/\/ which palette\n  let pp = (k2==0) ? pj : pj2;\n  let kk = Math.min(k,pals[pp].length-1);\n  pal[3*k+3*10*k2]   = pals[pp][kk][0];\n  pal[3*k+3*10*k2+1] = pals[pp][kk][1];\n  pal[3*k+3*10*k2+2] = pals[pp][kk][2];\n  if (inv) { pal[3*k+3*10*k2] = (pal[3*k+3*10*k2]+180)%360; } \/\/invert colour\n}\n}\n\nlet kp,km,kv,kw,kl,rand;\nrand = []; for (let i=0; i<Nrand; i++) { rand[i]=rnd(); }\nlet k0=1;\nlet kl0=0.001;\nkp = new Float32Array(N);\nkm = new Float32Array(N);\nkl = new Float32Array(N);\n\nswitch(st) {\n  case 0: kp = [0.66, 0.95, 0.94, 0.037, 0.89, 0.26, 0.90, 0.94, 0.65, 0.76, 0.54, 0.11, 0.50, 0.66, 0.96, 0.74, 0.91, 0.33, 0.15, 0.85]; break;\n  case 1: kp = [0.97, 0.01, 0.89, 0.08, 0.78, 0.98, 0.16, 0.80, 0.53, 0.91, 0.40, 0.54, 0.84, 0.44, 0.14, 0.75, 0.45, 0.33, 0.47, 0.95]; break;\n  case 2: kp = [0.72, 0.85, 0.51, 0.08, 0.98, 0.29, 0.91, 0.19, 0.69, 0.24, 0.99, 0.32, 0.84, 0.03, 0.97, 0.14, 0.09, 0.04, 0.08, 0.26]; break;\n  case 3: kp = [0.14, 0.95, 0.24, 0.09, 0.05, 0.18, 0.96, 0.04, 0.47, 0.18, 0.13, 0.38, 0.21, 0.85, 0.66, 0.05, 0.15, 0.23, 0.25, 0.48]; break;\n  case 4: kp = [0.58, 0.02, 0.03, 0.84, 0.43, 0.40, 0.95, 0.76, 0.15, 0.55, 0.04, 0.49, 0.49, 0.55, 0.52, 0.07, 0.22, 0.16, 0.31, 0.37]; break;\n  case 5: kp = [0.21, 0.10, 0.21, 0.13, 0.07, 0.42, 0.26, 0.77, 0.28, 0.67, 0.79, 0.10, 0.28, 0.20, 0.04, 0.21, 0.35, 0.125, 0.75, 0.87]; break;\n  case 6: kp = [0.40, 0.28, 0.88, 0.36, 0.92, 0.96, 0.79, 0.24, 0.99, 0.73, 0.68, 0.03, 0.09, 0.52, 0.11, 0.29, 0.95, 0.01, 0.01, 0.62]; break;\n  case 7: kp = [0.10, 0.27, 0.31, 0.05, 0.40, 0.24, 0.67, 0.00, 0.02, 0.92, 0.75, 0.11, 0.40, 0.55, 0.97, 0.45, 0.12, 0.15, 0.54, 0.56]; break;\n  case 8: kp = [0.17, 0.81, 0.64, 0.19, 0.52, 0.27, 0.59, 0.11, 0.65, 0.87, 0.36, 0.17, 0.66, 0.10, 0.95, 0.08, 0.50, 0.43, 0.92, 0.13]; break;\n  case 9: kp = [0.59, 0.56, 0.03, 0.14, 0.58, 0.05, 0.80, 0.00, 0.09, 0.75, 0.80, 0.55, 0.07, 0.27, 0.46, 0.08, 0.35, 0.01, 0.17, 0.63]; break;\n  case 10: kp = [0.021, 0.68, 0.20, 0.04, 0.46, 0.40, 0.30, 0.76, 0.19, 0.20, 0.78, 0.50, 0.10, 0.58, 0.61, 0.13, 0.25, 0.39, 0.63, 0.38]; break;\n  case 11: kp = [0.11, 0.18, 0.02, 0.15, 0.49, 0.90, 0.73, 0.77, 0.69, 0.93, 0.95, 0.76, 0.78, 0.32, 0.13, 0.70, 0.07, 0.04, 0.30, 0.76]; break;\n  case 12: kp = [0.15, 0.27, 0.17, 0.11, 0.61, 0.44, 0.65, 0.21, 0.82, 0.79, 0.40, 0.33, 0.43, 0.22, 0.02, 0.07, 0.50, 0.13, 0.95, 0.34]; break;\n  case 13: kp = [0.89, 0.46, 0.48, 0.30, 0.38, 0.18, 0.13, 0.68, 0.20, 0.87, 0.92, 0.56, 0.06, 0.25, 0.32, 0.10, 0.05, 0.11, 0.31, 0.55]; break;\n  case 14: kp = [0.90, 0.025, 0.064, 0.439, 0.208, 0.154, 0.261, 0.085, 0.268, 0.917, 0.780, 0.709, 0.087, 0.068, 0.684, 0.057, 0.480, 0.282, 0.174, 0.819]; break;\n  case 15: kp = [0.81, 0.79, 0.38, 0.80, 0.19, 0.22, 0.39, 0.047, 0.82, 0.98, 0.90, 0.28, 0.12, 0.24, 0.12, 0.69, 0.62, 0.20, 0.99, 0.71]; break;\n}\n\nfor (let i=0; i<N; i++) { km[i]=k0*rnd(); }\nfor (let i=0; i<N; i++) { kl[i]=kl0*rnd(); }\n\nif (km[0]<0.15*k0 && st!=10 && st!=3 && st!=1) { kp[15]=0.69;kp[16]=1.34; }\n\nlet nx = 2+Math.floor(8*rnd());\nlet ny = 2+Math.floor(8*rnd());\nlet rr = rnd();\nlet n4 = Math.floor(Math.exp(4*rnd()));\nlet rbg = Math.floor(15*rnd());\n\/\/ initial conditions\nconst tex0 = new Uint8Array(Nx*Ny*4);\nlet th;\nfor (let x = 0; x < Nx; x++) {\n  for (let y = 0; y < Ny; y++) {\n      let i = x+Nx*y;\n      let r2 = (x-Nx\/2)**2+(y-Ny\/2)**2;\n      r2\/=(Nx*Nx+Ny*Ny)\/4;\n        switch(rbg) {\n        case 0: r2 = Math.sin(x\/nx)*Math.sin(y\/ny)*Math.sin(25*r2)>.1+.5*rr; break;\n        case 1: r2 = Math.sin(x\/Nx*nx*PI)*Math.sin(y\/Ny*ny*PI)*Math.sin(25*r2)>0.5*rr; break;\n        case 2: r2 = Math.sin(y*x\/Nx*nx*PI)*Math.sin(y\/Ny*ny*PI)*Math.sin(25*r2)>0.5*rr; break;\n        case 3: r2 = Math.sin(y*x\/Nx*nx*PI)*Math.sin(y\/Ny*ny*PI)*Math.sin(2*(x-Nx\/2)\/(y-Ny\/2)+1*(y-Ny\/2)\/(x-Nx\/2))>0.5*rr; break;\n  case 4: r2 = Math.sin(Math.sin(x\/Nx*n4)*y\/Ny*nx*PI)*Math.sin(y\/Ny*ny*PI)*Math.sin(2*(x-Nx\/2)\/(y-Ny\/2)+1*(y-Ny\/2)\/(x-Nx\/2))>0.5*rr; break;\n  case 5: r2 = Math.sin(Math.sin(x\/Nx*n4*PI)*y\/Ny*(1-y\/Ny)*ny*PI)*Math.sin(x\/Nx*nx*PI)>0.6*rr; break;\n  case 6: r2 = Math.sin(Math.sin(y\/Ny*n4*PI)*x\/Nx*(1-x\/Nx)*nx*PI)*Math.sin(y\/Ny*ny*PI)>0.6*rr; break;\n  case 7: r2 = Math.sin(30*x\/Nx*nx*PI)*Math.sin(x\/Nx*nx*PI)>0.6*rr; break;\n  case 8: r2 = Math.sin(30*x\/Nx*nx*PI)*Math.sin(y\/Ny*ny*PI)>0.6*rr; break;\n  case 9: r2 *= .7*(Math.sin(20*(x\/Nx-0.5)*nx)+Math.sin(2*(y\/Ny-0.5))); break;\n  case 10: r2 = r2*Math.sin(20*r2*nx)>.3*rr; break;\n  case 11: r2 = Math.sin(r2*nx*Math.tan(n4*x\/Nx+9*y\/Ny))>.6*rr; break;\n  case 12: th = Math.atan2(y-Ny\/2,x-Nx\/2); r2*=1+0.2*Math.cos(nx*th)*(1+0.6*Math.sin(nx\/ny+3*nx*th)*(1+0.6*Math.cos(5*nx*th))); r2*=.72; break;\n  case 13: th = Math.atan2(y+(.3+.4*km[3])*Ny,x-.5*Nx); r2 = Math.sin(10*nx*(x-y)\/Nx*PI)*Math.sin((y+x)\/Ny*ny*PI+th*ny*nx)>(.2+km[2]*.8)*rr; break;\n  case 14: r2=0.6+.4*rr;\n  }\n      tex0[4*i]   = Math.floor(rnd()*255*(r2));\n      tex0[4*i+1] = Math.floor(rnd()*255*(1-r2) );\n      tex0[4*i+2] = Math.floor(rnd()*255*(1-r2) );\n      tex0[4*i+3] = Math.floor(rnd()*255*(r2) );\n    }\n  }\n\ndzc=0;\ndzp=dzc;\n\nlet loc_a,loc_ac,loc_img,loc_img00,loc_res,loc_t,loc_rand,loc_palc,loc_kp,loc_km,loc_kl,loc_kv,loc_kw,loc_imgc,loc_imgc2,loc_resc,loc_Lc,loc_tc,loc_randc,loc_aavg,loc_bavg,loc_dxy,loc_dxyc,loc_rc,loc_rcc;\n\nfunction thrower(prog) {\n  if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n      console.log(`Link failed:\\n${gl.getProgramInfoLog(prog)}`);\n      console.log(`VS LOG:\\n${gl.getShaderInfoLog(vs)}`);\n      console.log(`FS LOG:\\n${gl.getShaderInfoLog(fs)}`);\n      throw 'AARG DED';\n  }\n}\n\nsimp = gl.createProgram(); \/\/ simulation program\nvs = Shader(gl.VERTEX_SHADER, src_vert);\nfs = Shader(gl.FRAGMENT_SHADER, src_simp);\ngl.attachShader(simp, vs);\ngl.attachShader(simp, fs);\ngl.linkProgram(simp);\ngl.useProgram(simp);\nthrower(simp);\n\nfunction gul(pr,lab) { return gl.getUniformLocation(pr,lab); }\n\nloc_img=gul(simp,'img');\nloc_img00=gul(simp,'img00');\nloc_res=gul(simp,'res');\nloc_t  =gul(simp,'t');\nloc_rand =gul(simp,'rand');\nloc_kp =gul(simp,'kp');\nloc_km =gul(simp,'km');\nloc_kl =gul(simp,'kl');\nloc_dxy =gul(simp,'dxy');\nloc_rc  =gul(simp,'rc');\n\ngl.uniform1i(loc_img,0);\ngl.uniform1i(loc_img00,1);\ngl.uniform2f(loc_res,Nx,Ny);\n\nloc_a = gl.getAttribLocation(simp, \"a\");\ngl.activeTexture(gl.TEXTURE0);\ngl.vertexAttribPointer(loc_a, 2, gl.FLOAT, false, 0, 0);\ngl.enableVertexAttribArray(loc_a);\n\ncolp = gl.createProgram(); \/\/ colour program\nvs = Shader(gl.VERTEX_SHADER, src_vert);\nfs = Shader(gl.FRAGMENT_SHADER, src_colp);\ngl.attachShader(colp, vs);\ngl.attachShader(colp, fs);\ngl.linkProgram(colp);\ngl.useProgram(colp);\nthrower(colp);\n\nloc_imgc=gul(colp,'img');\nloc_imgc2=gul(colp,'img2');\nloc_palc=gul(colp,'pal');\nloc_resc=gul(colp,'res');\nloc_Lc=gul(colp,'L');\nloc_tc  =gul(colp,'t');\nloc_randc  =gul(colp,'rand');\nloc_dxyc  =gul(colp,'dxy');\nloc_rcc  =gul(colp,'rc');\n\ngl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\ngl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, -1.0, -1.0]),gl.STATIC_DRAW);\n\ngl.uniform1i(loc_imgc,0);\ngl.uniform1i(loc_imgc2,2);\ngl.uniform2f(loc_resc,Nx,Ny);\n\nloc_ac = gl.getAttribLocation(colp, \"a\"); \/\/'a');\ngl.activeTexture(gl.TEXTURE0);\ngl.vertexAttribPointer(loc_ac, 2, gl.FLOAT, false, 0, 0);\ngl.enableVertexAttribArray(loc_ac);\nlet M=1;\nvar isMobile = window.matchMedia(\"(hover: none)\").matches; \/\/ no hovering\nfunction resize_render() {\n  let w=innerWidth, h=innerHeight, dpr=devicePixelRatio;\n  C.width  = M*w*dpr|0;\n  C.height = M*h*dpr|0;\n  if (head || f1==1) {\n    Lx = Math.min(C.width,C.height); Ly=Lx;\n  } else if (f1==2 || isMobile) {\n    Lx = C.width; Ly=C.height;\n    if (Lx>Ly) { Lx=Math.min(Lx,2.5*Ly); }\n    if (Ly>Lx) { Ly=Math.min(Ly,2.5*Lx); }\n  } else {\n    Lx = Math.min(3*Nx,C.width);\n    Ly = Math.min(3*Ny,C.height);\n  }\n  C.style.width = w+'px';\n  C.style.height = h+'px';\n  gl.viewport((C.width-Lx)\/2,(C.height-Ly)\/2,Lx,Ly);\n  render();\n}\n\nfunction texset(wrap) {\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrap);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrap);\n   gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n   gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n}\nlet tex00,texA,texB,texC,fbA,fbB;\nlet wrap = gl.REPEAT;\n\ntex00 = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, tex00);\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, Nx, Ny, 0, gl.RGBA, gl.UNSIGNED_BYTE, tex0.subarray(0, Nx*Ny*4));\ntexset(wrap);\n\ntexA = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, texA);\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, Nx, Ny, 0, gl.RGBA, gl.UNSIGNED_BYTE, tex0.subarray(0, Nx*Ny*4));\nfbA = gl.createFramebuffer();\ngl.bindFramebuffer(gl.FRAMEBUFFER, fbA);\ngl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texA, 0);\ntexset(wrap);\n\ntexB = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, texB);\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, Nx, Ny, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\nfbB = gl.createFramebuffer();\ngl.bindFramebuffer(gl.FRAMEBUFFER, fbB);\ngl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texB, 0);\ntexset(wrap);\n\ntexC = gl.createTexture(); \/\/colormap\ngl.bindTexture(gl.TEXTURE_2D, texC);\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 10, 2, 0, gl.RGB, gl.UNSIGNED_BYTE, pal);\ntexset(wrap);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAX_LEVEL, 0);\n\ngl.useProgram(colp);\ngl.uniform1i(loc_palc, 1); \/\/texture 1\n\n\/\/ and assign uniforms\ngl.useProgram(simp);\ngl.uniform1fv(loc_km,km);\ngl.uniform1fv(loc_kl,kl);\ngl.uniform1fv(loc_rand,rand);\n\ngl.useProgram(colp);\ngl.uniform1fv(loc_randc,rand);\n\nlet prevt=performance.now();\nlet dt = 1000\/60;\n\nlet running=true;\nlet periodic=0;\nlet anim=0;\nlet flip=0;\nlet count=0;\nlet dxycount=0;\nlet TT = 120;\nlet om0 = 0.01, A=0.002;\nfunction render() {\n  if (running) {\n    count++;\n    let time=performance.now();\n    if (time-prevt>dt) {\n\n    gl.viewport(0,0,Nx,Ny);\n    gl.useProgram(simp);\n    if (count%TT==0) {\n      for (let i=0; i<Nrand; i++) { rand[i]=.7*rnd()+.3*rand[i]; }\n      gl.uniform1fv(loc_rand,rand);\n    }\n\n    if (dxycount==0) {\n      dx=dxc-dxp;\n      dy=dyc-dyp;\n      dz=dzc-dzp;\n      zc *= 1+2*dz;\n      xc -= (.5+(2*dx-0.5)*(1+2*dz))*zc;\n      yc -= (.5+(2*dy-0.5)*(1+2*dz))*zc;\n      kp[0]+= dx\/3;\n      kp[1]+= dy\/3;\n      kp[15]*=Math.exp(dx\/3);\n      kp[16]*=Math.exp(dy\/3);\n    }\n    gl.uniform1fv(loc_kp,kp);\n\n    if (dx!=0 || dy!=0 || dz!=0) {\n      dxycount++;\n    }\n    gl.uniform3fv(loc_dxy,[dx, dy, dz]);\n    gl.uniform3fv(loc_rc,[xc, yc, zc]);\n    gl.uniform1i(loc_t,time);\n    for (let j=0; j<2; j++) {\n      flip = !flip;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, (flip ? fbB : fbA));\n      gl.activeTexture(gl.TEXTURE0);\n      gl.bindTexture(gl.TEXTURE_2D, (flip ? texA : texB));\n      gl.activeTexture(gl.TEXTURE1);\n      gl.bindTexture(gl.TEXTURE_2D, tex00);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n    gl.viewport((C.width-Lx)\/2,(C.height-Ly)\/2,Lx,Ly);\n    gl.useProgram(colp);\n\n    gl.uniform1i(loc_tc,time);\n    gl.uniform2f(loc_Lc,Lx,Ly);\n    gl.uniform3fv(loc_dxyc,[dx, dy, dz]);\n    gl.uniform3fv(loc_rcc,[xc, yc, zc]);\n    if (dxycount>=1) {\n      dxycount=0;\n      dx=0;dy=0;dz=0;\n      dxp=dxc;dyp=dyc;dzp=dzc;\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, (flip ? texB : texA));\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, texC);    \/\/color map\n    gl.activeTexture(gl.TEXTURE2);\n    gl.bindTexture(gl.TEXTURE_2D, (flip ? texA : texB));\n    if (dz==0) gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n    prevt=time-(time-prevt)%dt;\n  }\n\/\/  requestAnimationFrame(render.bind());\n    if (savescr==1) {\n    savescr=2;\n    resize_render();\n  }\n  if (savescr==2) {\n    savescr=0;\n    var tC = document.createElement(\"canvas\");\n    tC.width = Lx; tC.height = Ly;\n    var ctx = tC.getContext(\"2d\");\n    ctx.setTransform(1,0,0,-1,0,gl.height);\n    ctx.drawImage(C,-(C.width-Lx)\/2,-(C.height-Ly)\/2);\n    tC.toBlob((blob) => { saveBlob(blob, `Calian-${tokenData.tokenId}.png`); });\n  }\n  requestAnimationFrame(render);\n}\n\nconst saveBlob = (function() {\n  const a = document.createElement('a');\n  document.body.appendChild(a);\n  a.style.display = 'none';\n  return function saveData(blob, fileName) {\n     const url = window.URL.createObjectURL(blob);\n     a.href = url;\n     a.download = fileName;\n     a.click();\n  };\n}());\n\n\/\/ resize event\nlet tid=0;\nonresize => {\n  clearTimeout(tid);\n  tid=setTimeout(resize_render,150)\n};\n\nlet f1=0,savescr=0;\n\/\/ keyboard event\nonkeyup=e=>{\n  if (e.key==' ') { \/\/ spacebar\n    running = !running;\n  }\n  if ( window !== window.parent ) {\n      \/\/ iframe\n      if (e.keyCode==65) dxc-=0.01; \/\/a = left\n      if (e.keyCode==68) dxc+=0.01; \/\/d = right\n      if (e.keyCode==87) dyc+=0.01; \/\/w = up\n      if (e.keyCode==83) dyc-=0.01; \/\/s = down\n  } else {\n      \/\/ not iframe\n      if (e.keyCode==37) dxc-=0.01; \/\/left\n      if (e.keyCode==39) dxc+=0.01; \/\/right\n      if (e.keyCode==38) dyc+=0.01; \/\/up\n      if (e.keyCode==40) dyc-=0.01; \/\/down\n  }\n  if (e.keyCode==88) dzc-=0.03; \/\/x = in\n  if (e.keyCode==90) dzc=Math.min(0,dzc+0.03); \/\/z = out\n  if (e.keyCode==70) { f1=(f1+1)%3; resize_render(); } \/\/ f\n  if (e.keyCode==80) { savescr=1; Lx = Ly = min(C.width,C.height); } \/\/p = print screen\n  \/\/   dzc+=e.deltaY\/Ly;\n  return false;\n  \/\/e.stopPropagation(); e.preventDefault();\n}\n\nfunction handler(e) {\n    var scroll = (e.deltaY || -1*e.wheelDelta || 10*e.detail);\n    var isTouchPad = e.wheelDeltaY ? e.wheelDeltaY === -3 * e.deltaY : e.deltaMode === 0;\n    dzc=Math.min(0,dzc+.5*Math.max(-0.03,Math.min(0.03,scroll\/Ly*(1+3*isTouchPad))));\n    e.stopPropagation();\n    e.preventDefault();\n    return false;\n}\ngl.canvas.addEventListener(\"mousewheel\", handler, false);\ngl.canvas.addEventListener(\"DOMMouseScroll\", handler, false);\n\nconst delta = 6;\nlet startx;\nlet starty;\nlet startdist;\nlet mousedown=0;\n\nfunction handler_down(e) {\n  if (running) {\n    mousedown=1;\n    startx = (e.clientX || (e.touches && e.touches[0].clientX));\n    starty = (e.clientY || (e.touches && e.touches[0].clientY));\n    if (e.touches && e.touches.length === 2) {\n      e.preventDefault();\n      startx = startx\/2 + e.touches[1].clientX \/ 2;\n      starty = starty\/2 + e.touches[1].clientY \/ 2;\n      startdist = (e.touches[0].clientX-e.touches[1].clientX)**2+(e.touches[0].clientY-e.touches[1].clientY)**2;\n    }\n  }\n}\ngl.canvas.addEventListener(\"mousedown\", handler_down, false);\ngl.canvas.addEventListener(\"touchstart\", handler_down, false);\nfunction handler_move(e) {\n  if (running && mousedown) {\n    const sx = (e.clientX || (e.touches && e.touches[0].clientX));\n    const sy = (e.clientY || (e.touches && e.touches[0].clientY));\n    e.preventDefault();\n    if (e.touches && e.touches.length === 2) {\n      e.preventDefault(); \/\/ Prevent page scroll\n      let scale;\n      const deltaDistance = (e.touches[0].clientX-e.touches[1].clientX)**2+(e.touches[0].clientY-e.touches[1].clientY)**2;\n      scale = -100*(deltaDistance \/ startdist-1);\n      dzc=Math.min(0,dzc+.5*Math.max(-0.05,Math.min(0.05,scale\/Ly)));\n    } else {\n      dxc-=(sx-startx)\/Lx*Math.exp(-0.1*dzc);\n      dyc+=(sy-starty)\/Ly*Math.exp(-0.1*dzc);\n      startx = sx;\n      starty = sy;\n    }\n  }\n}gl.canvas.addEventListener(\"mousemove\", handler_move, false);\ngl.canvas.addEventListener(\"touchmove\", handler_move, false);\ngl.canvas.addEventListener('mouseleave', function (e) {\n  mousedown=0;\n});\ngl.canvas.addEventListener('mouseup', function (e) {\n  mousedown=0;\n});\ngl.canvas.addEventListener('touchend', function (e) {\n  mousedown=0;\n});\ngl.canvas.addEventListener('dblclick', function (e) {\n    running = !running;\n});\nresize_render();\n",
  "tokens" : [
    {
      "hash" : "0x40fe45b0e9c03949d25d1264ad87b2bb9465d8051d82c7a819e5e7781b2ffbcf",
      "id" : "416000225"
    },
    {
      "hash" : "0xc92466f3a0e8483e2ca99097eb9eacb96e13b2fd35cf8ef95ea453c4bb6418a1",
      "id" : "416000027"
    },
    {
      "hash" : "0x63ec51caafaebd55bea10629ade8a345223f884f25cd4c073a6dc56e24e17090",
      "id" : "416000153"
    },
    {
      "hash" : "0x4056084b70dd494fe031b35271bb336f3bb7d8e8c75160b17fc8199e7bea5da4",
      "id" : "416000000"
    },
    {
      "hash" : "0x91464985cdc93baade2effe3f053c4f927130795f7de441e21cccac85fd22c5f",
      "id" : "416000034"
    },
    {
      "hash" : "0xe2a6764eaad59e26c8a1c5fa07f0edd97cd3a23dd82c902c1bd398915a98cfb4",
      "id" : "416000004"
    },
    {
      "hash" : "0x27a44767dd77348915c0d300661097683e83c30afd85800e9e3f7845bf5dfd83",
      "id" : "416000046"
    },
    {
      "hash" : "0xf89754c4282b853e7293b7252fcd26861679faf12dbba631b887f9d9d66430bb",
      "id" : "416000232"
    },
    {
      "hash" : "0xa4ce341d53f40afa107aa3d449e8232b78852052a50109348ad76a87c78b0845",
      "id" : "416000244"
    },
    {
      "hash" : "0xae17d23b66061f4762fd15341b1b7861c5c715dde167ee74ffd87225f07f71e2",
      "id" : "416000240"
    },
    {
      "hash" : "0xbb4ef4561ac46018ccacfb19c21fd8dba634409bb89355f37b50a8fc48b76c36",
      "id" : "416000146"
    },
    {
      "hash" : "0xcd4254d68064046c10e2ae248de2b9fd58a44ac386dfc687677be9639bea682a",
      "id" : "416000247"
    },
    {
      "hash" : "0x94c206a918f57da1e3b5d026eab98e587f1a28b686fc0a6e1377e0aefe6b2400",
      "id" : "416000237"
    },
    {
      "hash" : "0x16606c24ac7f8cfdd03b60b0159211e8a08f41b26322666f48f7ab623733f1a4",
      "id" : "416000176"
    },
    {
      "hash" : "0x316007813315bec2475ae793f9d4b6dd095aed1a2177a1243f95ef22592eaf3e",
      "id" : "416000222"
    },
    {
      "hash" : "0x2cc4fcf25bcfa22d9b8515995f3f9c6c92929b1f0ef6005508acde632ac2dbdd",
      "id" : "416000221"
    },
    {
      "hash" : "0xa6f0c003298efc9f02c62bfcdddb389c145dcdf5bd41b9ed199aed13f9d88738",
      "id" : "416000219"
    },
    {
      "hash" : "0xc174446a60ce44df5a97cb430cb0e7b46223db27671bf3ceb04b3b8e39cb8d74",
      "id" : "416000001"
    },
    {
      "hash" : "0xeb184e1fe60698b16ddc843045ae3b9b20f781820827e1eb1e4ebeeb313563df",
      "id" : "416000076"
    },
    {
      "hash" : "0x03c9243e1ddc83ecbd9b0cecb7a9b916369e841ed966619bcfd27926ebc99b39",
      "id" : "416000120"
    },
    {
      "hash" : "0xbe4d74057809d326271a235cb01d8f1412a4721d668f654002871c6783211d4d",
      "id" : "416000230"
    },
    {
      "hash" : "0x31368532689769bd7d93e9f004e71c32413249e42020d1830cc941da2a1691cb",
      "id" : "416000013"
    },
    {
      "hash" : "0xd90a49677d7f74cfb331ac3604d21811641da7fc3dec4201ffc8693fe697cbb9",
      "id" : "416000012"
    },
    {
      "hash" : "0xc246e9e4759ef4a6dd1d6a2ffbadd66a3fbd194993609ffc8ef4ab87475e8755",
      "id" : "416000242"
    },
    {
      "hash" : "0xaf4361c750f944e3f15703d0309865c4a451844a13f85856c4dda9c5a8083feb",
      "id" : "416000122"
    },
    {
      "hash" : "0xeefc281251735dbfcf284ce98596085c4ce9c3ec2b4c4bacbadad2be49a4f9fa",
      "id" : "416000115"
    },
    {
      "hash" : "0xfc8a87121901fab9c2c015aeeba65177a409adaf0be1535e2df1bddbb5c47829",
      "id" : "416000009"
    },
    {
      "hash" : "0xb65fca59c3bdf402caac8d78176bedb6f2dcd1329b335d6336fe1efec5d4ba48",
      "id" : "416000157"
    },
    {
      "hash" : "0x96d17aea7c406e7ce5883b196703e17725169bfd24aed74c986a30c9560744f9",
      "id" : "416000233"
    },
    {
      "hash" : "0xdf8ae68304907641a7104aed5c210782697888bd7104cf0eb315554f1bb6e94d",
      "id" : "416000234"
    },
    {
      "hash" : "0x960bbcf043e3d00148f99ed3c968fcb772b62a37a9f2ab231a4c11dae838afbf",
      "id" : "416000205"
    },
    {
      "hash" : "0x727feffcf4d535e0a8e5b9875cd6a3c95fb5316528e8070a0a5f32dd211bab4e",
      "id" : "416000241"
    },
    {
      "hash" : "0xc17700f8cdb0de5471e4903d71ef546217f8b07f6d974fc42a297a781a42ceb2",
      "id" : "416000226"
    },
    {
      "hash" : "0x228d604b11897ee9df7c0313632e6221bdb1f22e84e5d115be03eaf6da790639",
      "id" : "416000246"
    },
    {
      "hash" : "0x6f2e30b88dbd1c2c6e5133f31d68a07a9d82356332c83958f4cb95df424e2e31",
      "id" : "416000011"
    },
    {
      "hash" : "0xbe6a9971ae0be3446bffe43af8c8e694e5d01038da007ac95f7ec3ffc426ff17",
      "id" : "416000254"
    },
    {
      "hash" : "0xc6e10ff24d13e15ad6bb23f8ae4796140e0040b36696d36506808b50b617e933",
      "id" : "416000125"
    },
    {
      "hash" : "0x4dbeb19a3a101cd73a6f95045d0ef54c8c2c43f2fa93cb78bbb9f6f673caa74e",
      "id" : "416000086"
    },
    {
      "hash" : "0xa3cf19fb2755d78cd20818fc91340d0533d52f31a7ad1dfb9987cc060dbfef3c",
      "id" : "416000080"
    },
    {
      "hash" : "0x7541dcf0e930ec2fe5b821c943ba1e79ce6e8f90646313aefb62e415b1d71b79",
      "id" : "416000112"
    },
    {
      "hash" : "0xc6538a04fc957ac2153284d8e5597ce1ce3b5d47655724651e03e1711ad70e91",
      "id" : "416000085"
    },
    {
      "hash" : "0x2990785d0d17bf7d3c53d76a005e71ebfe769be0ea3a2be1da0792dfa8873f90",
      "id" : "416000252"
    },
    {
      "hash" : "0xd990f6509371cc5d577013fa5e65ea7226df563131fdd301cd50d5c8ce09be8d",
      "id" : "416000203"
    },
    {
      "hash" : "0x6586a8a27520879f35df7c418ec1ca7af7c96c9eac30ed236e66ffc86ef15a94",
      "id" : "416000173"
    },
    {
      "hash" : "0x997565f70c0a863a20f5318cbaabb97eec10583352f329533a57542b287004c0",
      "id" : "416000243"
    },
    {
      "hash" : "0xaa645df07fcf70e40690ac9d32c155da623c4be2e1203e2f42057fdfe78d87ea",
      "id" : "416000245"
    },
    {
      "hash" : "0x55e566c440ebd794c31dfc3ce227bc80d8cbfde0d8bfa2719e3d7b9edc5dd600",
      "id" : "416000159"
    },
    {
      "hash" : "0x3d7ce310efdc21c7174cfa35b67e02821dbe3e99e4156a574df27cf622f05e28",
      "id" : "416000224"
    },
    {
      "hash" : "0x55ec8074cf39039479acb4acfda3b48ddd9d4962b2a8681ae702a06f76ef703c",
      "id" : "416000151"
    },
    {
      "hash" : "0xa2f7347950e91a2dbf2d0389b7586a93e8f803c6ea3796e24e98ff0628f38693",
      "id" : "416000060"
    },
    {
      "hash" : "0x47dcce4fdcbd087fe4f93a4d7d9fa5912b7bb8c172b6ac04a16c79698ce5adbb",
      "id" : "416000133"
    },
    {
      "hash" : "0x07798e46171a26b50763697ca167314c9eb78f5c3fc80394b4fd5781a5004abf",
      "id" : "416000199"
    },
    {
      "hash" : "0x5d3bd8776454a28082be6350e740c39c7e3620627923c7ce5ebb6f9a542fce5d",
      "id" : "416000250"
    },
    {
      "hash" : "0xfcf2e3cc1606b20811bcac82294abf7ffc390405e0f66a411deff2a4035fc064",
      "id" : "416000068"
    },
    {
      "hash" : "0xd67804fa4ec747a99213373d97dcc901660c9ac09bd42beaf6bd64263733cd6d",
      "id" : "416000184"
    },
    {
      "hash" : "0xfea60b5593d098eb72a51bd6178f5b51aaa37fc4300323e215a749981591d0e1",
      "id" : "416000029"
    },
    {
      "hash" : "0xdb7f1b536156da6fb088947d34302d0917afedeac6915ab1f8a570d7a26b363a",
      "id" : "416000177"
    },
    {
      "hash" : "0x53bc8dec0b8578f0b072ca752342d876e89c084060cb1ee7af6043c117f63c4b",
      "id" : "416000135"
    },
    {
      "hash" : "0x1198b19c286f79e1453a17bb0cb1b23d78a407a57e7b79df59eab00a009488e3",
      "id" : "416000062"
    },
    {
      "hash" : "0x7079aa5578b469f0fe3a14bcfb38ce97f74f709a05ec1b1b5c8d02bbcaf1bb65",
      "id" : "416000094"
    },
    {
      "hash" : "0x303a62ef503c7a94479042ecb3a74752112456efbd90cc127629c36e36cd147d",
      "id" : "416000239"
    },
    {
      "hash" : "0xf8155248426dd5c39afcc579c2707c674bdf01674a94ac7fb45d04ab7bbefe6d",
      "id" : "416000196"
    },
    {
      "hash" : "0x50e50918ea9aa3e22bc6082b179c1e1ccd6e0ce3537902d0a7fdfbcb87d718c8",
      "id" : "416000194"
    },
    {
      "hash" : "0x92b61a9929f2cab0d748b35bc99da1e3f99c48b0832841624ec9f2e5d1b53d0a",
      "id" : "416000063"
    },
    {
      "hash" : "0x6f5aff57bc4496b59722f7a8ad39e67245b6a079f7506c7e69af321c612b85b6",
      "id" : "416000231"
    },
    {
      "hash" : "0xb20af76464d84be64b6299d603860a133b2ec5a73e10a2b81052519b83ba841e",
      "id" : "416000130"
    },
    {
      "hash" : "0xa789d7d9e1e3bba7d7e214a5774c88f43e30d75632eb9b0b74d113a05eee0002",
      "id" : "416000175"
    },
    {
      "hash" : "0xebbac1c270d785832c48e8501170b4dfb9f8d87d1f5e766fded2aa2d1bfe99f2",
      "id" : "416000171"
    },
    {
      "hash" : "0x1a218305cbbfd390d9a4c6832ce25164213c22b40ae51023e68d3ec013a7ccc6",
      "id" : "416000047"
    },
    {
      "hash" : "0x35b77973caf986cafea6aff44cd4034453a995ee2371a7007a57acbabfce7a7a",
      "id" : "416000092"
    },
    {
      "hash" : "0xe1d21ec71df7a4c87eb8b79f864959253613f5e698adbd919e50e3df07b576b2",
      "id" : "416000116"
    },
    {
      "hash" : "0x490155821ddd402057953e87c38a3f8e0f9f2b244ab1ea8d3774f6619c493bc9",
      "id" : "416000180"
    },
    {
      "hash" : "0x9c3cb89aeec6a2f896b7b42096fda440d6aa96551c6b29132b0aac2fb6a15150",
      "id" : "416000172"
    },
    {
      "hash" : "0xe4314a405db744b9ad07cf0ac30439a951694e4e8b5514e47bb697257807f64f",
      "id" : "416000190"
    },
    {
      "hash" : "0x0c467a65475895e03cbfb8cfc9b070f1f70a5cad543478dbcfbc795bd2c7ad72",
      "id" : "416000119"
    },
    {
      "hash" : "0xd1b8c1a8104f0cf1a6b8d7355b1a00e2d67e9422e4fe99b71d8daf3cf3884b0f",
      "id" : "416000235"
    },
    {
      "hash" : "0x541e8a639e028e5a0d7dd4df998b2d716e6edc8889d8aba1b25848d7251ad318",
      "id" : "416000170"
    },
    {
      "hash" : "0x3e815f02fbccab7228b721a339f0d9761f1b0909844899b7b436c3450b355805",
      "id" : "416000026"
    },
    {
      "hash" : "0xe8d7c8b5dc252684e60be8bf10df867d5e96e2771edbd2caf882637494331f67",
      "id" : "416000081"
    },
    {
      "hash" : "0xf86029385518be1e903115c7702fc7977d7602c67b5e41904039f94ebb2cc544",
      "id" : "416000077"
    },
    {
      "hash" : "0xcfe6aed8449ff40af0e099cd2a3257fcab0818884443035f7459c7563a27fe9f",
      "id" : "416000114"
    },
    {
      "hash" : "0x84331885eada8631bf4cd25556e82ce4dc824c15aa3b16b7c75b5189cd20d6eb",
      "id" : "416000238"
    },
    {
      "hash" : "0xb7b8cba5c87eb9c255c38d89c37b3f3bc9b28d823461e95247982091ba81a086",
      "id" : "416000090"
    },
    {
      "hash" : "0x64a6f9c0a83d1ccab5dc1e9833b5f0fdeefca29fd49150028bfbb9476ac59784",
      "id" : "416000101"
    },
    {
      "hash" : "0x164b4758f9dcd9c261c3524890bb1cec2894ec73ea03144045db5d38b29aa9a7",
      "id" : "416000045"
    },
    {
      "hash" : "0x9c9e7a4bbeb4d82cd7baa5f68e70e1f216c884c5092bb1eb820db2614036a01b",
      "id" : "416000201"
    },
    {
      "hash" : "0x9e3ccd91176d4d59d646a1e62a7f94d1b7604b075a636c2991fc246b98fd73de",
      "id" : "416000054"
    },
    {
      "hash" : "0xca138803e136c1d07cde5ec8666f357715e033efd91a3d5a7a5bdd023038364f",
      "id" : "416000035"
    },
    {
      "hash" : "0xcf019dc15a090d21dbc829318b795eb2f0113d36e6dac549b12752bbe8a3e6ef",
      "id" : "416000032"
    },
    {
      "hash" : "0xda36b0fb0e739e40076b0060d467fcdeb44638128df27b3c24a36c1d42787e78",
      "id" : "416000021"
    },
    {
      "hash" : "0xd877d89e8d163e845aee6561681afcdd72aed95ccfeb54862f5bc10db89e747b",
      "id" : "416000191"
    },
    {
      "hash" : "0xa049562b32a4da060ca610b0462857a8c6bf3a206d527c9f943fff4b53b48077",
      "id" : "416000053"
    },
    {
      "hash" : "0xdb1915f6cf0c6ea95e64813c56717bdc45ea89e6e294daca6534f9e3e27b2a1e",
      "id" : "416000066"
    },
    {
      "hash" : "0x7075c6207f27f7a82e181b7bd241bb8cfe501417d9b9024b10a07a1ab4f117f1",
      "id" : "416000158"
    },
    {
      "hash" : "0x6cac061128c7559dec602925d4cb3943644353e971b14dd5bcbe41846aba7e2d",
      "id" : "416000010"
    },
    {
      "hash" : "0xb734a4c28cb9b247596840a5dceb8fc7288f4aa7a46cdea54f8ca34bacbd5241",
      "id" : "416000166"
    },
    {
      "hash" : "0x043d357662c12d69fc7e554b7abb9be7bccee43cbea0db9503d18df53c1e60fc",
      "id" : "416000040"
    },
    {
      "hash" : "0xfc62af0768d5ad7e46a82c929f6dd0d597bd7a944dd9f2f9be56fa197f950e9a",
      "id" : "416000041"
    },
    {
      "hash" : "0x2569370011ad896a5cf73cd3d745ea223d446e25fab07ee930dcd273e2124eae",
      "id" : "416000103"
    },
    {
      "hash" : "0xd4471376f4d574230bd9503bf2a867470e81613d93af4bd5080b6ebe9cbe8257",
      "id" : "416000100"
    },
    {
      "hash" : "0x102c2b979c9e4ead45c3ea66b42f23a9159f6f5e66bcddfb3666235acfa5de8d",
      "id" : "416000020"
    },
    {
      "hash" : "0x594e55fe888f7c4537a17f422400bf02e06bbb0d11025b583c55969d5ed78e1f",
      "id" : "416000129"
    },
    {
      "hash" : "0x271db75b77e9ef6693d81c99f7c8c6d08354b3f061886c4252ff6aaec4976e11",
      "id" : "416000144"
    },
    {
      "hash" : "0x106a6b2075fdc4a00cea3ae9207175c2119c90cd03966093e19350c54c5cc0da",
      "id" : "416000174"
    },
    {
      "hash" : "0x8645bb9938c10521d17dde39cf76e8746eb3a12ced8b2f6b7b4554f5ff473aa9",
      "id" : "416000227"
    },
    {
      "hash" : "0x00a06a58db0fa8461c1ff059f2fb5d7a1eedfb959cd15793b42e3c7e87f97806",
      "id" : "416000091"
    },
    {
      "hash" : "0x91f59c775bfb30defa08b21aee948bf521e121d03d4042e1dc210ab9eb9263d4",
      "id" : "416000150"
    },
    {
      "hash" : "0xc24f51653157687f6c84cb4a43deea3fdfb9818ebdd0cf93cdbd404fcfe9d912",
      "id" : "416000067"
    },
    {
      "hash" : "0xc40b087c1f7c8c781ba5148849b98e0986f75333b9d38edfaf62f60cd969c6f9",
      "id" : "416000179"
    },
    {
      "hash" : "0xd71e43e42d1fb8d441e47238c64131beaa01ad8daddacab5536a2d7b8b6f3175",
      "id" : "416000229"
    },
    {
      "hash" : "0xe36b0a65b1fcf081b8edd8803e21ed3f27e6b794a55b975e415d1f10c773cafa",
      "id" : "416000178"
    },
    {
      "hash" : "0xa53cb780419599ad75d7d6efbd7dda49a76a739149377b7dfa002f9bf631419e",
      "id" : "416000211"
    },
    {
      "hash" : "0x4a7c7614d5c65a5612405ea7ebc330a24ba70fa7c0c434aebee1e64ee9dfe88e",
      "id" : "416000110"
    },
    {
      "hash" : "0x57c77565d5c77c51d2689865d747f6e7be2487f3ae9d4613dd09334a1c82d401",
      "id" : "416000214"
    },
    {
      "hash" : "0xb9ce481499e788142c1dbf4a2d8346b8a524d21cf4ea92c3fc15ee6e994e9872",
      "id" : "416000215"
    },
    {
      "hash" : "0xddf17503305a45b927181502bffe6d9f60394120bec6c5fb0ca30e479d3071eb",
      "id" : "416000210"
    },
    {
      "hash" : "0x7a3d45f0b7bae19977e8704eb4b5b50911e970fc1bc91dfaa4e695d107192609",
      "id" : "416000147"
    },
    {
      "hash" : "0xf4d15649786a46a73c744cf0306a915ffa8806b9bdf9eb9ff6105559fbc582b7",
      "id" : "416000143"
    },
    {
      "hash" : "0x5c069aece5b5cb029249f6dd2df3bb62b2cb11490f36143d083cfae71d28f2e9",
      "id" : "416000197"
    },
    {
      "hash" : "0x38a6c4e3ca6c4863bb0ecdac2ab356ae78df8f2ce7be1cfe94a8edc9480b2440",
      "id" : "416000202"
    },
    {
      "hash" : "0x2dd67ad78c636163e8bf17f8d76495fa2abaccc60ba2643e69b3aafb6a807d5a",
      "id" : "416000095"
    },
    {
      "hash" : "0xf48daeb75cbd02cb320578eb3c598311cc80e6c1fc3cf9ee103d7cf1601b269e",
      "id" : "416000131"
    },
    {
      "hash" : "0x971373786c765265562cbee2c74c968ea1ca88bb90254201434a94c2939493c7",
      "id" : "416000195"
    },
    {
      "hash" : "0xb3c6d8f8c04cc79d98ae60c3de4355674442fcf117ed6c307aceae59e13c9ed5",
      "id" : "416000079"
    },
    {
      "hash" : "0x1a6f273c2d9f639e5991bba43367147f8e19d867fd36a51ee7d49806b052ed3d",
      "id" : "416000104"
    },
    {
      "hash" : "0x1ddf890c99bf15eb34b857f9519e878524d225aba077983dac51bd695e623403",
      "id" : "416000105"
    },
    {
      "hash" : "0x7ee39d66325734d06f55dbdc2ef21951cde1cb8ade9df097fd9a4814c4632927",
      "id" : "416000005"
    },
    {
      "hash" : "0x8706a22cfeebc5bc3b73dbf498c6d62aa73c222f165cf4a1812b7e5f0f64cd8f",
      "id" : "416000082"
    },
    {
      "hash" : "0x5a753fb2f9cbf15506d7989e17aed6071675d1efe347a8984d10be630346f766",
      "id" : "416000083"
    },
    {
      "hash" : "0x95a1797212a091c550ff0003be04200559f6827b3742a8fda053129d4a404c38",
      "id" : "416000050"
    },
    {
      "hash" : "0x367f388235757c884ab039ee58fbf22bc631651880b85173ea90a8af0c500b28",
      "id" : "416000212"
    },
    {
      "hash" : "0xa4d1cc0a80170863f8f8a3893af2052dbd65db6ba8012559d24b35881264bd7b",
      "id" : "416000167"
    },
    {
      "hash" : "0xa8d1224be935b0a37dd768147afd4af58d94aba61caabf325400dbf6091bb5cb",
      "id" : "416000128"
    },
    {
      "hash" : "0xf50e0501fcb40f6a225261a8170d210ae318fd4b3bc1f248786b04ff5bf3f19c",
      "id" : "416000018"
    },
    {
      "hash" : "0xc2000d8aaff5fee3508f3ad8469a9b397f3189ad8302ac0a585a378a2dcfc841",
      "id" : "416000019"
    },
    {
      "hash" : "0x58a7535ab73effe70ebf7b28b480cf2448131e1e1d5dcd66f46861792f7af71c",
      "id" : "416000255"
    },
    {
      "hash" : "0x48ee773752c7b9e741b55294130ba197318b513cc50544a13c0833ab5d77f8f7",
      "id" : "416000220"
    },
    {
      "hash" : "0x43a58c2b193f296bf10e1f5f90b665e15b33095bc20aa6d4b3e01affedaa8646",
      "id" : "416000048"
    },
    {
      "hash" : "0x596fb815bf739b7ee1d2cc1ca5de024bbd2d9aaa4057d698375353888b0eedb6",
      "id" : "416000064"
    },
    {
      "hash" : "0xbd8eb145cd1f1112dc855d7d336def97c9fe3d1a721e545410fe7dcc7eb55977",
      "id" : "416000065"
    },
    {
      "hash" : "0x09f571f90f4a60808e704302d3ca70c4234f22b829a88e771aa7ab0486c58af9",
      "id" : "416000253"
    },
    {
      "hash" : "0x78a0bccfbcd3f9a7e8f7aa2f10305b6e644c46c6fa949fc9b4e2e6e369d72fd6",
      "id" : "416000051"
    },
    {
      "hash" : "0xf12bdd897c134747320bf51156d4c792ca3b930bb5e64f7d48324c30d49cadc5",
      "id" : "416000049"
    },
    {
      "hash" : "0xf88cef64f9096a6df4901ee658d163b06f4db1b14e8b0f7c88c7768584ea5151",
      "id" : "416000002"
    },
    {
      "hash" : "0xb18297ea0aecca93c9350fd107ff1e2e608143cbcd4dbd7c9ef6c13fecd2b023",
      "id" : "416000003"
    },
    {
      "hash" : "0xb5ef3b00807cd2255e06d03b4eb221598f2e214f2e900d2c26b0d07cd71f0a35",
      "id" : "416000186"
    },
    {
      "hash" : "0xac5ad2e60f29376e4a4d27e973e2437a3e625edb2e27267fea69f88f9b004cc8",
      "id" : "416000006"
    },
    {
      "hash" : "0xaf55b47f82c82b4dde40b0abb5e19e3d2f063d0c9eb80e578de18273fdfcff49",
      "id" : "416000165"
    },
    {
      "hash" : "0x2256f5e4819ab6b6219a295f529d36f7fc1ef5aae989682112a967c477576df4",
      "id" : "416000145"
    },
    {
      "hash" : "0xb3820eea7043529982df237e305c97dafcb95bc185b7f6b0bc6ad3d96b80b517",
      "id" : "416000134"
    },
    {
      "hash" : "0x84017cfcb96c1c4a0a391b97dd9358e492833890539bae373bd57fb88e35f8bf",
      "id" : "416000136"
    },
    {
      "hash" : "0x239d22c1788340b718a7cee8c2521552326d96e6bc611c44dab3a9ef84c7b27d",
      "id" : "416000137"
    },
    {
      "hash" : "0x749292a48b8f3ce24f58f70bb0377371430ac55591274d02c106f17f7820d260",
      "id" : "416000084"
    },
    {
      "hash" : "0xa3406877e69c2646988db7bc25486e845b5e75c7ef9fb929bb957637b1ca8dab",
      "id" : "416000168"
    },
    {
      "hash" : "0xbda74d43b4f17128d35ab553958d1184e15affaace58dfc1004be390f34331f1",
      "id" : "416000187"
    },
    {
      "hash" : "0x5433fe1648ddb89f0fdff33aa4166dd81f3716e627dd1bc84af61369f8651737",
      "id" : "416000093"
    },
    {
      "hash" : "0x76c1bfc410f758151b2b7e6fec8a41d11d5c40ea6d0e2b3d8bf793c86746402c",
      "id" : "416000251"
    },
    {
      "hash" : "0x5ce56bf380cf38c0ad6fee794dcecd224177ef9691ebea243dfdf103ddd1f96f",
      "id" : "416000223"
    },
    {
      "hash" : "0x353c0c57c4803da4b348f6c72f732f3333fe8e1dd55943e16c99b585d5db8a42",
      "id" : "416000078"
    },
    {
      "hash" : "0xa8e3d4c01b4e02c008693ed628f71aac52b053acdfcad67d1f5ad0bbe3594270",
      "id" : "416000127"
    },
    {
      "hash" : "0x0a1c0f3d2e6dd5262c0b6a85d2ca1dc69bc8f06ecace03eebecfee5e74fb9b15",
      "id" : "416000209"
    },
    {
      "hash" : "0xf879cb86f6ae612be3cd891c78c05bc7afe043a18cabb0a05ff28a16693247de",
      "id" : "416000208"
    },
    {
      "hash" : "0x3a703bf77016ecf916be41ee803025425171117edc8f8941a3cc3633c84a65d7",
      "id" : "416000023"
    },
    {
      "hash" : "0xcb1e2e9a5e17b951defc8bb94a12c2d59313cd24b879250c33cdf248f9861337",
      "id" : "416000022"
    },
    {
      "hash" : "0xd51f45c6a802eae7273bd6e31429080031a746f200ee05c2e63982e27a79bb4d",
      "id" : "416000132"
    },
    {
      "hash" : "0xff3275e2f6ef453284bfa5dca0de6043229f639f6da5705ecb785e038eef2c07",
      "id" : "416000189"
    },
    {
      "hash" : "0x838fb3b23ad3a5e3e8ddd2c8da7ee926b10eca802621e8b612734b2c2bd6d99e",
      "id" : "416000016"
    },
    {
      "hash" : "0x1beacc3f988a3a3b5e5aadd508ab5114645d690c0450b192ddcec37f443cc693",
      "id" : "416000017"
    },
    {
      "hash" : "0x197170e4218a2e7ab32b2651e01dbd218698244009aeec76005658aaae36a2f5",
      "id" : "416000248"
    },
    {
      "hash" : "0x3bb1513e82d7b892ce54391887eec8baf070530b01d6cb59670c612add32e511",
      "id" : "416000069"
    },
    {
      "hash" : "0xa9e4f47973cea88301fcd1968367d6a07bf0b82d968bc30864611e2aaf505ba0",
      "id" : "416000074"
    },
    {
      "hash" : "0x8786b8137856bbb6a320f5fc6fe0f4510a77fef0367ae4030a63a73c6cc4f652",
      "id" : "416000098"
    },
    {
      "hash" : "0xc03a6efdc412cd6665211aaeead8df3a729381c99e3f498fa6c923e53aad1b3a",
      "id" : "416000249"
    },
    {
      "hash" : "0x1588458507f668eb7e9853470f4af74fa49796e16d4536e0be48ae6e34d709b4",
      "id" : "416000204"
    },
    {
      "hash" : "0x71c645b231b3b3e008a5cfb7eb29e4223cdfa3b612ba729634f19d55d1dbf6e2",
      "id" : "416000148"
    },
    {
      "hash" : "0x6504f7c7e64b53b55ba72ed4e87f0cdb9a12dea852ab7d910f7c4d43fe3a68c7",
      "id" : "416000075"
    },
    {
      "hash" : "0x451c535e26e698548805e80ebdee8ae5172b66ea01a52695d99bcd5251a58fbf",
      "id" : "416000162"
    },
    {
      "hash" : "0xdcae9f9d74129d38017e9490bc44ec46b574d9c6c93de568c2248b40b90837b9",
      "id" : "416000163"
    },
    {
      "hash" : "0xec19450d78d8d874c5a97466191eb63fe5726c1bc128c9c6988f781790ef93f5",
      "id" : "416000192"
    },
    {
      "hash" : "0xea4670e1d6eca7326e96bdcc25aa28460580deef600d31f9062914237b517714",
      "id" : "416000042"
    },
    {
      "hash" : "0x3d9226837292c2d1a89d92766f607b206374f12dee09afa5c20f7e4d21328a05",
      "id" : "416000113"
    },
    {
      "hash" : "0xd58f8129adc89d1aed6ba3cc2fc3a1af8d27cf630177b38fafaa3c212f828e0f",
      "id" : "416000140"
    },
    {
      "hash" : "0x61cdbb991d580b8eebd1ba67e758ee098052e34bbb7021cb3f7693d3cfafef4a",
      "id" : "416000141"
    },
    {
      "hash" : "0x396699f039fd22a43c2f003e628a06a8b8e42d010f9f2334c3c14da4d32e0879",
      "id" : "416000188"
    },
    {
      "hash" : "0x0104c2cab7f69714318506fa9fbdddd06ec9b3a189cc174b8a03fd10e85163c2",
      "id" : "416000160"
    },
    {
      "hash" : "0xadd8c9bbdca7de85b2693f07c6ef54d83fed9160c5d15fa55a39ecfaf3d98230",
      "id" : "416000025"
    },
    {
      "hash" : "0x515219d1e1b6d7b14927b72935f8c457ce4b6af883e054a4b94605b1e0c93b26",
      "id" : "416000056"
    },
    {
      "hash" : "0x5e9f7fdc0887e984f8a507e6084a6b5fb089a08fdb42b4f097fe9ce5d9c2cdc0",
      "id" : "416000057"
    },
    {
      "hash" : "0x1e8a62ae063da30fe45f9f9d457d69800ef811f53ebbb7b801c1d4f20cad1668",
      "id" : "416000126"
    },
    {
      "hash" : "0x59044fb89974630085752ec15dd4bc4434dddf3d21c330087f8ce671900abedf",
      "id" : "416000149"
    },
    {
      "hash" : "0x87d36a25502f65082ca84c7dfb75d9985d2030049ffde23628e83b4dd604a145",
      "id" : "416000193"
    },
    {
      "hash" : "0x5b8664e807c1a3bb876f8df9135dd866c2841f0049f9796a02519ef6d18d63bc",
      "id" : "416000014"
    },
    {
      "hash" : "0x4c9c3a240f216026798e9fbfc48eb28c188e84f0b16459f68cd302212d5d8b19",
      "id" : "416000015"
    },
    {
      "hash" : "0x1d8cbbb14418447b2affdd817591336ab29a55fc67100e3c34faae278f007c15",
      "id" : "416000121"
    },
    {
      "hash" : "0xfc8a4f140daab79d100d2c0482cbcf38b62f80564395bef252f20f53dca0970f",
      "id" : "416000218"
    },
    {
      "hash" : "0x9fb5c49265cbc994532d1786c1903135b7e6a493d6700e062685302c07e0673f",
      "id" : "416000236"
    },
    {
      "hash" : "0xb1638a768770b185611a21fcac19ba1512c38f0b967a1cd3e690e7f00ee4e628",
      "id" : "416000043"
    },
    {
      "hash" : "0x6d90835122c045993a212ab07896d4b5fd25027ddd2f1f840f1682ab5daff022",
      "id" : "416000118"
    },
    {
      "hash" : "0x75cd639d03acde3c01bce79eb62fd28d12ba622b6185ae0faeae73610194bdc7",
      "id" : "416000102"
    },
    {
      "hash" : "0x62f7c8e77b9fb86e424038edba5024f7a78e03f9042bb87c33b1ba46c28c80be",
      "id" : "416000198"
    },
    {
      "hash" : "0x2f39c120053b8a6743a4ebdd816d0748a985074d30e568e0d16a57e0778c8786",
      "id" : "416000087"
    },
    {
      "hash" : "0x2f5c481d152b92b1cc58c3d226fcf64b63c57ee397cb8be4da422531038718c6",
      "id" : "416000072"
    },
    {
      "hash" : "0xddae17668d0f46a70c6b8d4318583dca6b3ee40ae72e43e240f01ab41fa0566a",
      "id" : "416000036"
    },
    {
      "hash" : "0xb8a018ee3e2a979fe65e854ba74e0f64371b4a7a6fa99ca8440963e1ad0ac5f4",
      "id" : "416000073"
    },
    {
      "hash" : "0x57d188e4771b22a23412e3ed0f9a4874d5404c3f76b72c3101d35854c0c2d627",
      "id" : "416000161"
    },
    {
      "hash" : "0x34dab6bff8ff74ea38da699c1f35ed2e34741bfc43dc406acdbb183aa4d36acb",
      "id" : "416000071"
    },
    {
      "hash" : "0xf676981072dde32db6c092ddc661a6dc4bce3eb354f9e5724805a68e62b17be0",
      "id" : "416000152"
    },
    {
      "hash" : "0x33801c35f023dd7011dde21eb4c1825ddb71cd2d6561949cdcf3dbe79fa4af6d",
      "id" : "416000155"
    },
    {
      "hash" : "0x25c0836da2252a55d5264b6f2b342c8a0c6704c2af0b66ce4a6589616dc784aa",
      "id" : "416000185"
    },
    {
      "hash" : "0xd4a543f64e594a50b0f0eb4e2420978ba25d6a373fc2ff8d717e0384921c38dc",
      "id" : "416000070"
    },
    {
      "hash" : "0x29bce02c23fc4ae05a2d3211b9e940d86c6debb20e2a5cfa2126846735fdec89",
      "id" : "416000138"
    },
    {
      "hash" : "0x9680bf1f02869004d872c75cca63c82fbcd12e375e6ffe050b0ad54797572d93",
      "id" : "416000028"
    },
    {
      "hash" : "0xb906c95c3220162be0004c7655d4714d092a0e90a084268fa54b93a091b9a618",
      "id" : "416000052"
    },
    {
      "hash" : "0xd528b04b56a9e4ecdcccd910326e4238d5475d5e09f1e6a855b87a0bdd82b7a2",
      "id" : "416000107"
    },
    {
      "hash" : "0xd4210a4b14fab136cb3cb17efa40641badc52a9753a7347c0306ad4c7ad24a40",
      "id" : "416000117"
    },
    {
      "hash" : "0x88646badc3654538698b9de4e6018a17993d78d5c82d5ca0f424b0d0a839a5ad",
      "id" : "416000183"
    },
    {
      "hash" : "0x83d796d6d9e1668632a3c8de1954e82c8c88ff3d17b4e0404f8fa43f7da91f8a",
      "id" : "416000182"
    },
    {
      "hash" : "0xdc243e44746e1275fe5a4b4aebf9fcf3f6feef708bb0949c93d84800be8ea6b4",
      "id" : "416000058"
    },
    {
      "hash" : "0x5dc13cf816189208dd38e82808984975c56fa444929ad14fb85a0a3c800ef347",
      "id" : "416000156"
    },
    {
      "hash" : "0xd0685872d37454abb3142ee6fb120e59afc40804e59ebd32b44e919d49c1d8ec",
      "id" : "416000055"
    },
    {
      "hash" : "0x014dc95f1e7371e330a83c9f453277a0bd8c55d69cdccb027d885400c4084da8",
      "id" : "416000031"
    },
    {
      "hash" : "0x7c0dbe2e05e53415c63f1e24340edb59dfaea0477d23390c7037eae7071d32cc",
      "id" : "416000059"
    },
    {
      "hash" : "0x122075f5bc8e78a329d51c5e1b149f9a832a13afa5a29aeb4f9e636e94c92df6",
      "id" : "416000139"
    },
    {
      "hash" : "0xcd0c115e67382d0cab30d822e51e68a645f5cf4a823bbe13912a6ff6b584021e",
      "id" : "416000181"
    },
    {
      "hash" : "0xee5c8c602b1f017d5dbe69a6863e462972843141e7a95d5031fe2302c88efaf3",
      "id" : "416000033"
    },
    {
      "hash" : "0x0f9be60655b608a14ff79041e4dfaa3acb9386b4341dc55c07cceaaf956d6f31",
      "id" : "416000217"
    },
    {
      "hash" : "0x9a7bfc0edb18405d14a315ec9ef2c79cde70756b6d926260c0fdf345d2e198dd",
      "id" : "416000007"
    },
    {
      "hash" : "0x2b5e52e2b0f76c52dfa4169db22a0f6ff451dd114c8ccf43a92aef085a1a01fd",
      "id" : "416000037"
    },
    {
      "hash" : "0xe3516852ea97a92bb7fab31fa01f9647794200d03f4c321cf03eefc6c0b5741c",
      "id" : "416000030"
    },
    {
      "hash" : "0x3cb0efda2346d5b0908f47adc3d110591acaad0bff4faf204349db1d684213a9",
      "id" : "416000096"
    },
    {
      "hash" : "0xe2d1deeab3f21db1a8da91904c59eaa974c62611f2f76daec56a2b5b13488f4e",
      "id" : "416000106"
    },
    {
      "hash" : "0x596e76d8bb88396841e28c98c92d7514445dd8f7b2a7bdfc1e660b3c62d9b337",
      "id" : "416000228"
    },
    {
      "hash" : "0x12748f646de6e4370ec3c29381e7fcc16521613554097733fc57b13b261392ca",
      "id" : "416000111"
    },
    {
      "hash" : "0x31f1e6b234c14e368be3b18d5009f4bc239e38c1970674544d2297069ba0aed2",
      "id" : "416000207"
    },
    {
      "hash" : "0xe444188b67f1bc94089b4c8fd31348f6f05ebac510ee62eb7f5280b15723adcc",
      "id" : "416000038"
    },
    {
      "hash" : "0xf7d1aacd2ddd6faccf86d4090795a688a4f284dfba7aba1171b539ee7d04614d",
      "id" : "416000024"
    },
    {
      "hash" : "0x34d9d71b48a67b973212c9ce72fe5c4e391e6009d1ce6a352d029e7849896ace",
      "id" : "416000044"
    },
    {
      "hash" : "0xc34c4e6ac0cc14b2da7800c8f8c8e955ab23fefd1d2178102865155ea5cbca9e",
      "id" : "416000213"
    },
    {
      "hash" : "0xf8d9b04c43cc55ea82f0a8b6626006ec0f6ac6817cb99c6349d97dc6b6bddbbe",
      "id" : "416000206"
    },
    {
      "hash" : "0x7b8d28fdc7a143e3b31c0284d1c477ae5bc656a05f27f74c06cf221db19f6f21",
      "id" : "416000097"
    },
    {
      "hash" : "0xf8397c069185fe405315bf63dd0d6ae699f8d8d7ca804d1f5b439f1542a9d99b",
      "id" : "416000169"
    },
    {
      "hash" : "0x141fc51877d0656a915faa4d0d0c57e0917c3d1cc36118fd8c5c29783d6b225e",
      "id" : "416000088"
    },
    {
      "hash" : "0x37e42b20d81730ce74ff2115843e81eea5a380ce4cc9c6358ff67c4fd143f4c5",
      "id" : "416000108"
    },
    {
      "hash" : "0x947d6a1dd6ca41f62c769a65b4941520608e3c0551ed0e0116fe8d1ca50df5f0",
      "id" : "416000123"
    },
    {
      "hash" : "0x78e0929404ba8b763a984587c0b0397945e73977855639bd815bfa65e54c4502",
      "id" : "416000216"
    },
    {
      "hash" : "0x2d7d30f06fbfcb82c1288aaf1b304aa908a1de382358406d0ee5d04e7bff47aa",
      "id" : "416000039"
    },
    {
      "hash" : "0x072cfb9633d043114350abc2bde071d48a8da299e2cc8beea0745c1ed7113d4a",
      "id" : "416000200"
    },
    {
      "hash" : "0x6c91bbc69efb4eef1d3add4c1a8cbb299ac75ee79fc43fe431710c3af3ee8892",
      "id" : "416000164"
    },
    {
      "hash" : "0x828d598899fcb3145a39ad48a29527df7203ad4ec13126115043bc9265b8b4cb",
      "id" : "416000089"
    },
    {
      "hash" : "0x04476159f5a4894f35bb4f6c4d07f9cd7a1f31a8a22a8006c37877e1df973e02",
      "id" : "416000109"
    },
    {
      "hash" : "0x64ea3aacab4d8b2f49308311f847d75450dd9c02542ce38f1f0ce2f60572aa25",
      "id" : "416000142"
    },
    {
      "hash" : "0xf8df4c5014152b63b399ffe2bfeae611f3deacd64e9302ae5964c7185c88224f",
      "id" : "416000154"
    },
    {
      "hash" : "0x69628a74e705c6b4cf96379641e4228fd9113a64bfc52b95e9179246e05d9c13",
      "id" : "416000061"
    },
    {
      "hash" : "0x81227d6c4b70dcd94fb4cec7ff1fb41059bf14795a9251db4ba4f2b8a1cf6af9",
      "id" : "416000008"
    },
    {
      "hash" : "0xbab06828bd171c2ce5b559b94b27a4221838c71a53c5382a91784f451886e43c",
      "id" : "416000099"
    },
    {
      "hash" : "0x64e2b17fd14565c18c91312706f4121e7261fbfccdd1d6ac513a9f602992a195",
      "id" : "416000124"
    }
  ]
}