{
  "kind" : "p5js100",
  "screensaverFileName" : "lumen",
  "value" : "let hash = tokenData.hash;\n            \n                        class Random {\n                            constructor() {\n                              this.useA = false;\n                              let sfc32 = function (uint128Hex) {\n                                let a = parseInt(uint128Hex.substr(0, 8), 16);\n                                let b = parseInt(uint128Hex.substr(8, 8), 16);\n                                let c = parseInt(uint128Hex.substr(16, 8), 16);\n                                let d = parseInt(uint128Hex.substr(24, 8), 16);\n                                return function () {\n                                  a |= 0; b |= 0; c |= 0; d |= 0;\n                                  let t = (((a + b) | 0) + d) | 0;\n                                  d = (d + 1) | 0;\n                                  a = b ^ (b >>> 9);\n                                  b = (c + (c << 3)) | 0;\n                                  c = (c << 21) | (c >>> 11);\n                                  c = (c + t) | 0;\n                                  return (t >>> 0) \/ 4294967296;\n                                };\n                              };\n                              \n                              this.prngA = new sfc32(tokenData.hash.substr(2, 32));\n                              this.prngB = new sfc32(tokenData.hash.substr(34, 32));\n                              for (let i = 0; i < 1e6; i += 2) {\n                                this.prngA();\n                                this.prngB();\n                              }\n                            }\n                            random_dec() {\n                              this.useA = !this.useA;\n                              return this.useA ? this.prngA() : this.prngB();\n                            }\n                            random_num(a, b) {\n                              return a + (b - a) * this.random_dec();\n                            }\n                            random_int(a, b) {\n                              return Math.floor(this.random_num(a, b + 1));\n                            }\n                            random_bool(p) {\n                              return this.random_dec() < p;\n                            }\n                            random_choice(list) {\n                              return list[this.random_int(0, list.length - 1)];\n                            }\n                          }            \n                          let R = new Random();\n\n            p5.disableFriendlyErrors = true;\n            let t = 0.0;\n            let pg;\n            let runners = null;\n            let finalCol;\n            let palette = [ \n                 [['#e2e6ec', '#FF0000', '#00FF00', '#0000FF']],\n                 [['#006dff',  '#00FF00', '#e2e6ec']],\n                 [['#EB79F1', '#e2e6ec', '#d8ff00', '#78fffa']],\n                 [['#00f0ff', '#e2e6ec', '#00FF00']],\n                 [['#c6c7d5', '#cbff00', '#0000f4']],\n                 [['#b084f7', '#cbff00', '#f4f1ee']],\n                 [['#1db83c', '#cbff00', '#f4f1ee', '#e93326']],\n                 [['#29ff00', '#d4d9dc', '#0000f4']],\n                 [['#d7fe52', '#ed6ef7', '#eb4e4d', '#50b4ff', '#ffffff']],\n                 [[ '#ff1500', '#bec544', '#ffffff']],\n                 [['#b084f7','#ff5110', '#ffffff', '#5cf5ff']],\n                 [['#00e000','#8000ff', '#fd0400']],\n                [['#acff00', '#e2e6ec', '#00d8ff']],\n                [[ '#0000ff', '#bec544', '#ffffff']],\n                [['#ccff08', '#1d9eff', '#ebebeb']],\n                [['#b084f7','#ccff08', '#ffffff', '#5cf5ff']],\n                [['#00adcb', '#e2e6ec', '#ff5217']]\n            ];\n            \n            let palette1;\n            let palettePicker;\n            let colorPicker;\n            let numSystems;\n            let canvas;\n            let density = 1;\n            let xx = false;\n            let rainbow = false;\n            let strokeSize;\n            \n            function setup() {\n                canvas = createCanvas(windowWidth, windowHeight);\n                let pgX = int(1920\/4);\n                let pgY = int(2020\/4);\n                pg = createGraphics(pgX, pgY, WEBGL);\n                pg.colorMode(HSB, 360, 100, 100);\n                start();\n            }\n            \n            function draw() {        \n                    background(0);\n                    pg.clear();\n                    pgShow();\n                    imageMode(CENTER);\n                    image(pg, windowWidth\/2, windowHeight\/2, windowWidth > windowHeight ? windowWidth : windowHeight, windowWidth < windowHeight ? windowHeight : windowWidth);\n            }\n    \n            function windowResized() {\n                resizeCanvas(windowWidth, windowHeight);\n            }\n            \n            function pgShow(){\n                t++;\n                if(t==1){\n                            for(let i=0; i<numSystems; i++){\n                                colorPicker = floor(map(R.random_dec(), 0, 1, 0, palette[palettePicker][0].length));\n                                if(i==2){\n                                    finalCol = color(palette[palettePicker][0][palette[palettePicker][0].length-1]);\n                                }else if(i==3){\n                                    finalCol = color(palette[palettePicker][0][palette[palettePicker][0].length-2]);\n                                }else{\n                                    finalCol = color(palette[palettePicker][0][colorPicker]);\n                                }\n                                palette1[i] = finalCol;\n                                runners.push(new ParticleSystem(palette1[i], i, pg.width, pg.height));\n                            }\n                }\n            \n                for(let i=0; i<runners.length; i++){\n                    let p = runners[i];\n                    p.addParticle();\n                    p.display();\n                }\n            }\n            \n            function start(){\n                t = 0.0;\n                frameRate(30);\n                noCursor();\n                noiseSeed(4);\n                runners = [];\n                pg.noStroke();\n                pg.colorMode(HSB, 360, 100, 100, 100);\n                pg.rectMode(CENTER);\n            \n                canvas.imageSmoothingEnabled = false;\n                canvas.style[\"image-rendering\"] = \"pixelated\";\n                pixelDensity(1);\n                pg.pixelDensity(1);\n                pg.noSmooth();\n                noSmooth();\n            \n                palette1 = [];\n                palettePicker = floor(map(R.random_dec(), 0, 1, 0, palette.length));\n            \n                   if(R.random_dec()<0.65){\n                       density = 1;\n                   }else{\n                       density = 2;\n                   }\n\n                   if(density == 1){\n                        numSystems = floor(R.random_num(24,30));\n                   }else if(density == 2){\n                        numSystems = floor(R.random_num(40,50));\n                   }\n        \n                   if(R.random_dec()<0.15){\n                    xx = true;\n                   }else{\n                    xx = false;\n                   }\n                   \n                   if(R.random_dec()<0.05 && xx==false){\n                    rainbow = true;\n                   }else{\n                    rainbow = false;\n                   }\n            \n                   strokeSize = R.random_num(5, 30);\n            \n                console.log('the passage is open');\n            }\n\n            let ParticleSystem = function(tempCor, tempIndex, tempW, tempH) {\n              this.particles = [];\n              this.cor = tempCor;\n              this.index = tempIndex;\n              this.w = tempW;\n              this.h = tempH;\n              this.centerStart = R.random_num(8,20);\n              this.maxSize = R.random_num(tempW\/2, tempW);\n              this.maxSize = R.random_num(tempW\/2, tempW);\n            \n              if(density == 1){\n                  this.dist = this.centerStart + this.index * R.random_num(10, 13);\n              }else if(density == 2){\n                  this.dist = this.centerStart + this.index * R.random_num(8, 10);\n              }\n              \n              if(density == 1){\n                  if(R.random_dec() < 0.9){\n                      this.index<2 ? this.segments = floor(R.random_num(4, 14)) : this.segments = floor(R.random_num(4, 30)); \n                  }else{\n                      this.index<2 ? this.segments = floor(R.random_num(4, 14)) : this.segments = floor(R.random_num(10, 30)); \n                  }\n              }else if(density == 2){\n                  this.index<3 ? this.segments = floor(R.random_num(4, 12)) : this.segments = floor(R.random_num(4, 50));\n              }\n\n              if(density == 1){\n                  this.index<6 ? this.size = R.random_num(0.15, 0.3) : this.size = R.random_num(0.3, 0.7);  \n              }else if(density == 2){\n                  this.index<6 ? this.size = R.random_num(0.15, 0.3) : this.size = R.random_num(0.3, 0.7);\n              }\n              \n              this.rot = R.random_num(0, 360);\n              this.rotDiff = R.random_num(0.5, 1);\n            \n              if (density == 1){\n                  this.dotSize = R.random_dec()<0.1 ? R.random_num(15, 30) : R.random_num(4, 15);\n              }else if(density == 2){\n                  this.dotSize = R.random_dec()<0.05 ? R.random_num(6, 14) : R.random_num(2, 15);\n              }\n              \n              if(xx == true){\n                  this.dotSize = R.random_num(10, 35);\n                  this.index<3 ? this.segments = floor(R.random_num(4, 12)) : this.segments = floor(R.random_num(10, 20));\n              }\n        \n              this.theShape;\n              R.random_dec() > 0.5 ? this.theShape = \"line\" : this.theShape = \"dot\";\n            \n              if(this.index>0){\n                  let p = runners[this.index-1];\n                  if(p.theShape == \"line\"){\n                      this.theShape = \"dot\";\n                  }else{\n                      this.theShape = \"line\";\n                  }\n              }\n            };\n            \n            ParticleSystem.prototype.addParticle = function() {\n              if(t==1){\n                  for(let i = 0; i < this.segments; i++){\n                      this.j = i * 360\/this.segments;\n              \n                      this.xx = this.dist * cos(radians(this.j));\n                      this.yy = this.dist * sin(radians(this.j));\n                      \n                      this.particles.push(new Particle(this.xx, this.yy, this.cor, i, this.index, this.size, this.theShape, this.dotSize, this.segments));\n                      \n                  }\n              }\n            }\n            \n            ParticleSystem.prototype.display = function() {\n              pg.push();\n              pg.rotate(radians(this.rot + t*this.rotDiff));\n              let len = this.particles.length;\n                  for(let i = 0; i < len; i++){\n                      let particle = this.particles[i];\n                          particle.force();\n                          particle.update();\n                          particle.display();\n                  }\n              pg.pop();\n            \n            }\n            \n            let Particle = function (x, y, tempCor, tempObjIndex, tempSysIndex, tempSize, tempShape, tempDotSize, tempSegments) {\n              this.loc = createVector(0, 0);\n              this.vel = createVector(0, 0);\n              this.acc = createVector(0, 0);\n              this.destiny = createVector(x, y);\n              this.segments = tempSegments;\n              this.cor = tempCor;\n              this.index = tempObjIndex;\n              this.sysIndex = tempSysIndex;\n              this.theShape = tempShape;\n              this.size = tempSize;\n              this.dotSize = tempDotSize;\n            }\n            \n            Particle.prototype.update = function() {\n              this.vel.add(this.acc);\n              this.loc.add(this.vel);\n              this.vel.limit(3);\n              this.acc.mult(0);\n              this.vel.mult(0.9);\n            }\n            \n            Particle.prototype.force = function () {\n                  this.p = p5.Vector.sub(this.destiny, this.loc);\n                  this.d = this.loc.dist(this.destiny);\n                  this.p.normalize();\n              if(this.d > 10){\n                  this.p.mult(2);\n                  this.applyForce(this.p);\n              }else{\n                  this.p.mult(0.05);\n                  this.applyForce(this.p);\n              }\n            }\n            \n            Particle.prototype.applyForce = function(f) {\n              this.acc.add(f);\n            }\n            \n            Particle.prototype.display = function() {\n                                  this.m = this.destiny.mag(0, 0);\n                                  this.d = this.loc.dist(this.destiny);\n                                  this.finalDotSize = map(this.d, 0, this.m, this.dotSize, 0);\n            \n                  if(this.theShape == \"line\"){\n                      if(rainbow){\n                          pg.fill(360);\n                      }else{\n                          pg.fill(this.cor);\n                      }\n                      \n                      pg.push();\n                      pg.translate(this.loc.x, this.loc.y);\n                      pg.rotate(radians(this.index * (360\/this.segments)+90));\n                      pg.rect(0, 0, 1, strokeSize*this.size);\n                      pg.pop();\n            \n                  }else{\n                      if(rainbow){\n                          this.finalCol = map(sin(radians(t + this.index*4 + this.sysIndex*4)), -1, 1, 0, 360);\n                          pg.fill(this.finalCol, 100, 100);\n                      }else{\n                          pg.fill(this.cor);\n                      }\n                      pg.ellipse(this.loc.x, this.loc.y, this.finalDotSize, this.finalDotSize);\n                  }\n            \n            }"
}