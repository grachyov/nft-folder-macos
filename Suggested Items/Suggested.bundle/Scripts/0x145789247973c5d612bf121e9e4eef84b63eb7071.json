{
  "kind" : "p5js100",
  "screensaverFileName" : "923.EMPTY.ROOMS",
  "value" : "var seed = parseInt(tokenData.hash.slice(0, 16), 16);\nlet projectNumber = Math.floor(parseInt(tokenData.tokenId) \/ 1000000);\nlet mintNumber = parseInt(tokenData.tokenId) % 1000000;\n\np5.disableFriendlyErrors = true;\n\nlet rezs = [150, 200, 300];\nlet cIndex = 1;\n\nlet lineThickness;\nlet lineDepth;\nlet lineLength;\nlet lineSpacing;\nlet depth = 255.0;\n\nlet displayRed = true;\nlet displayGreen = true;\nlet displayBlue = true;\n\nlet stillLifeDim = -1;\nlet stillLifeDepthNeg = 0;\nlet stillLifeDepthPos = 0;\nlet depthScalar = 1.0;\nlet speedScalar = 1.0;\nlet speeds = [0.25, 0.5, 1.0, 2.0, 0.0];\nlet speedIndex = 2;\nlet SEED = 0;\nlet lengthScalar = 1.3;\n\nlet index = 0;\nlet laIndex = 771;\nlet combination = [];\n\nlet angle = 0.0;\n\nlet alphapix;\n\nlet cla, cny, cberlin, ccdmx, clondon, ctokyo;\nlet s1, s2, s3, s4;\nlet sc;\nlet foregrounds = [];\nlet bColor = 246;\n\nlet shapes = [];\n\nlet gl;\nlet stillLifePO2 = 2;\nlet ext;\nlet pgl;\nlet viewDiagram = false;\nlet viewMatrix;\nlet modelViewMatrix;\nlet dispMapTexture;\n\nlet CDMXSpin = 1;\n\nconst vertCode = `precision highp float;\nuniform mat4 uViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uModelViewProjectionMatrix;\nuniform vec2 canvasSize;\nuniform float stillLifeDim;\nuniform float stillLifePO2;\nuniform float stillLifeDepthNeg;\nuniform float stillLifeDepthPos;\nuniform float depthScalar;\nuniform float lineThickness;\nuniform float lineDepth;\nuniform float lineLength;\nuniform vec3 color;\nuniform sampler2D displacementMap;\nattribute vec3 coordinates;\n\nfloat map(float value, float min1, float max1, float min2, float max2)\n{\n    return min2 + (value - min1) * (max2 - min2) \/ (max1 - min1);\n}\n\nstruct Line\n{\n    vec3 start;\n    vec3 end;\n};\n\nLine getLineFromDisplacementMap(int x_origin, int y_origin)\n{\n    Line l;\n\n    vec2 imageCoords = vec2(x_origin, y_origin);\n    imageCoords.x += .5;\n    imageCoords.y += .5;\n\n    vec2 samplePos = imageCoords.xy\/stillLifePO2;\n    vec4 dispMapColor = texture2D(displacementMap, samplePos);\n    float maxEdge = max(canvasSize.x, canvasSize.y);\n\n    float x = float(x_origin);\n    float y = float(y_origin);\n    float z = map(dot(dispMapColor.xyz, color), 0.0, 1.0, -stillLifeDepthNeg, stillLifeDepthPos);\n\n    l.start.x = map(x, 0.0, stillLifeDim, -maxEdge \/ 2.0, maxEdge \/ 2.0);\n    l.start.y = map(y, 0.0, stillLifeDim, -maxEdge \/ 2.0, maxEdge \/ 2.0);\n    l.start.z = -z;\n\n    l.end.x = map(x, 0.0, stillLifeDim, -maxEdge \/ 2.0, maxEdge \/ 2.0) - lineDepth;\n    l.end.y = map(y, 0.0, stillLifeDim, -maxEdge \/ 2.0, maxEdge \/ 2.0) - lineDepth;\n    l.end.z = -lineLength - z;\n\n    return l;\n}\n\nvoid main()\n{\n    bool lineStart = false;\n    if (coordinates.y == 0.0) lineStart = true;\n    if (coordinates.y == 1.0) lineStart = true;\n    if (coordinates.y == 2.0) lineStart = false;\n    if (coordinates.y == 3.0) lineStart = true;\n    if (coordinates.y == 4.0) lineStart = false;\n    if (coordinates.y == 5.0) lineStart = false;\n\n    int imageCoordsY = int(floor(coordinates.x \/ stillLifeDim));\n    int imageCoordsX = int(floor(coordinates.x - float(imageCoordsY) * stillLifeDim));\n\n    Line l = getLineFromDisplacementMap(imageCoordsX, imageCoordsY);\n\n    vec3 vertexPosition;\n    if (lineStart) {\n        vertexPosition = l.start;\n    } else {\n        vertexPosition = l.end;\n    }\n\n    vec4 finalPos = vec4(vertexPosition, 1.0);\n    finalPos = uModelViewProjectionMatrix * finalPos;\n\n    vec4 projLineStart = uModelViewProjectionMatrix * vec4(l.start, 1.0);\n    vec4 projLineEnd = uModelViewProjectionMatrix * vec4(l.end, 1.0);\n    vec2 lineDirection = projLineStart.xy - projLineEnd.xy;\n    lineDirection = vec2(-lineDirection.y, lineDirection.x);\n    float maxEdge = max(canvasSize.x, canvasSize.y);\n    lineDirection \/= canvasSize \/ maxEdge;\n    vec2 displacement = normalize(lineDirection);\n    displacement \/= canvasSize;\n    displacement *= lineThickness;\n\n    if (coordinates.y == 0.0) finalPos.xy -= displacement;\n    if (coordinates.y == 2.0) finalPos.xy -= displacement;\n    if (coordinates.y == 5.0) finalPos.xy -= displacement;\n    if (coordinates.y == 1.0) finalPos.xy += displacement;\n    if (coordinates.y == 3.0) finalPos.xy += displacement;\n    if (coordinates.y == 4.0) finalPos.xy += displacement;\n\n    finalPos.z = 0.0;\n\n    gl_Position = finalPos;\n}\n`;\n\nconst fragCode = `precision highp float;\nuniform vec3 color;\nvoid main() {\n    gl_FragColor = vec4(color, 1.0);\n}\n`;\n\nlet triangle_buffer;\nlet numTris;\n\nfunction setupGeometry() {\n  let triangles = [];\n  numTris = 0;\n  for (let y = 0; y < rezs[cIndex]; y += 1) {\n    for (let x = 0; x < rezs[cIndex]; x += 1) {\n      triangles.push(x + y * stillLifeDim, 0, 0);\n      triangles.push(x + y * stillLifeDim, 1, 0);\n      triangles.push(x + y * stillLifeDim, 2, 0);\n      triangles.push(x + y * stillLifeDim, 3, 0);\n      triangles.push(x + y * stillLifeDim, 4, 0);\n      triangles.push(x + y * stillLifeDim, 5, 0);\n      numTris += 6;\n    }\n  }\n  triangle_buffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, triangle_buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(triangles), gl.STATIC_DRAW);\n  gl.bindBuffer(gl.ARRAY_BUFFER, null);\n}\n\nfunction setupShapes() {\n  let sss = 0.72; \n  shapes = [];\n  for (let i = 0; i < combination.length; i++) {\n    shapes.push(\n      new VShape(\n        -stillLifeDim \/ 2,\n        -stillLifeDim \/ 2,\n        stillLifeDim * sss,\n        combination[i]\n      )\n    );\n  }\n  theDetails();\n}\n\nfunction theDetails() {\n  let maxSide = max(width, height);\n  if (maxSide < 400) {\n    depthScalar = map(maxSide, 50, 400, 0.05, 0.3);\n  } else {\n    depthScalar = map(maxSide, 400, 3840, 0.3, 2.0);\n  }\n  stillLifeDepthNeg = 255.0;\n  stillLifeDepthPos = 255.0;\n  lengthScalar = 1.0;\n  if (index < 155) {\n    tokyoParams();\n  } else if (index < 309) {\n    berlinParams();\n  } else if (index < 463) {\n    londonParams();\n  } else if (index < 617) {\n    nycParams();\n  } else if (index < laIndex) {\n    cdmxParams();\n  } else {\n    laParams();\n  }\n}\n\nlet shaderProgram;\n\nfunction setupShaders() {\n  let vertShader = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(vertShader, vertCode);\n  gl.compileShader(vertShader);\n\n  const vertError = gl.getShaderInfoLog(vertShader);\n  if (vertError.length > 0) {\n    throw vertError;\n  }\n\n  let fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n  gl.shaderSource(fragShader, fragCode);\n  gl.compileShader(fragShader);\n\n  const fragError = gl.getShaderInfoLog(fragShader);\n  if (fragError.length > 0) {\n    throw fragError;\n  }\n\n  shaderProgram = gl.createProgram();\n  gl.attachShader(shaderProgram, vertShader);\n  gl.attachShader(shaderProgram, fragShader);\n  gl.linkProgram(shaderProgram);\n}\n\nfunction createDisplacementMapTexture() {\n  dispMapTexture = gl.createTexture();\n  while (stillLifePO2 < stillLifeDim) {\n    stillLifePO2 *= 2;\n  }\n}\n\nfunction transferDisplacementMap() {\n  let img = alphapix.get();\n  img.loadPixels();\n\n  let uvTexture = Array(stillLifePO2 * stillLifePO2 * 4).fill(255);\n\n  const randomStuff = new Uint8Array(uvTexture);\n  for (let x = 0; x < stillLifeDim; ++x) {\n    for (let y = 0; y < stillLifeDim; ++y) {\n      const index1 = 4 * (y * stillLifePO2 + x);\n      const index2 = 4 * (y * stillLifeDim + x);\n      randomStuff[index1 + 0] = img.pixels[index2 + 0];\n      randomStuff[index1 + 1] = img.pixels[index2 + 1];\n      randomStuff[index1 + 2] = img.pixels[index2 + 2];\n    }\n  }\n\n  gl.bindTexture(gl.TEXTURE_2D, dispMapTexture);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    gl.RGBA,\n    stillLifePO2,\n    stillLifePO2,\n    0,\n    gl.RGBA,\n    gl.UNSIGNED_BYTE,\n    randomStuff\n  );\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.bindTexture(gl.TEXTURE_2D, null);\n\n  gl.activeTexture(gl.TEXTURE2);\n  gl.bindTexture(gl.TEXTURE_2D, dispMapTexture);\n\n  const displaceMapLocation = gl.getUniformLocation(\n    shaderProgram,\n    \"displacementMap\"\n  );\n  gl.uniform1i(displaceMapLocation, 2);\n}\n\nfunction setMatrices() {\n  const viewMatrix = this._renderer._curCamera.cameraMatrix;\n  const projectionMatrix = this._renderer.uPMatrix;\n  const modelViewMatrix = this._renderer.uMVMatrix;\n  const modelViewProjectionMatrix = modelViewMatrix.copy();\n  modelViewProjectionMatrix.mult(projectionMatrix);\n\n  gl.uniformMatrix4fv(\n    gl.getUniformLocation(shaderProgram, \"uViewMatrix\"),\n    false,\n    viewMatrix.mat4\n  );\n  gl.uniformMatrix4fv(\n    gl.getUniformLocation(shaderProgram, \"uProjectionMatrix\"),\n    false,\n    projectionMatrix.mat4\n  );\n  gl.uniformMatrix4fv(\n    gl.getUniformLocation(shaderProgram, \"uModelViewMatrix\"),\n    false,\n    modelViewMatrix.mat4\n  );\n  gl.uniformMatrix4fv(\n    gl.getUniformLocation(shaderProgram, \"uModelViewProjectionMatrix\"),\n    false,\n    modelViewProjectionMatrix.mat4\n  );\n}\n\nfunction setUniforms() {\n  gl.uniform2f(\n    gl.getUniformLocation(shaderProgram, \"canvasSize\"),\n    width,\n    height\n  );\n  gl.uniform1f(\n    gl.getUniformLocation(shaderProgram, \"stillLifeDim\"),\n    stillLifeDim\n  );\n  gl.uniform1f(\n    gl.getUniformLocation(shaderProgram, \"stillLifePO2\"),\n    stillLifePO2\n  );\n  gl.uniform1f(\n    gl.getUniformLocation(shaderProgram, \"depthScalar\"),\n    depthScalar\n  );\n  gl.uniform1f(\n    gl.getUniformLocation(shaderProgram, \"stillLifeDepthNeg\"),\n    stillLifeDepthNeg * depthScalar\n  );\n    gl.uniform1f(\n    gl.getUniformLocation(shaderProgram, \"stillLifeDepthPos\"),\n    stillLifeDepthPos * depthScalar\n  );\n  gl.uniform1f(\n    gl.getUniformLocation(shaderProgram, \"lineThickness\"),\n    lineThickness\n  );\n  gl.uniform1f(gl.getUniformLocation(shaderProgram, \"lineLength\"), lineLength);\n  gl.uniform1f(gl.getUniformLocation(shaderProgram, \"lineDepth\"), lineDepth);\n}\n\nfunction beginLinesShader() {\n  gl.useProgram(shaderProgram);\n  gl.bindBuffer(gl.ARRAY_BUFFER, triangle_buffer);\n\n  transferDisplacementMap();\n  setUniforms();\n\n  const coord = gl.getAttribLocation(shaderProgram, \"coordinates\");\n  gl.vertexAttribPointer(coord, 3, gl.FLOAT, false, 0, 0);\n  gl.enableVertexAttribArray(coord);\n\n  gl.enable(gl.BLEND);\n  gl.disable(gl.DEPTH_TEST);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  gl.viewport(0, 0, canvas.width, canvas.height);\n}\n\nfunction endLinesShader() {\n  gl.useProgram(null);\n}\n\nfunction drawLines() {\n  beginLinesShader();\n\n  setMatrices();\n  gl.uniform3f(gl.getUniformLocation(shaderProgram, \"color\"), 1, 0, 0);\n  if (displayRed) {\n    gl.drawArrays(gl.TRIANGLES, 0, numTris);\n  }\n\n  translate(lineSpacing, 0.0, 0.1);\n  setMatrices();\n  gl.uniform3f(gl.getUniformLocation(shaderProgram, \"color\"), 0, 1, 0);\n  if (displayGreen) {\n    gl.drawArrays(gl.TRIANGLES, 0, numTris);\n  }\n  \n  translate(lineSpacing, 0.0, 0.1);\n  setMatrices();\n  gl.uniform3f(gl.getUniformLocation(shaderProgram, \"color\"), 0, 0, 1);\n  if (displayBlue) {\n    gl.drawArrays(gl.TRIANGLES, 0, numTris);\n  }\n  endLinesShader();\n}\n\nfunction setupTransform() {\n  ortho();\n  scale(1.45);\n  rotateY(0.33);\n  rotateX(-0.33);\n}\n\nfunction setupCombination(code) {\n  combination = [];\n  let comb = str(code);\n  for (let i = 0; i < comb.length; i++) {\n    let char = comb[i];\n    if (char != \"0\") {\n      let c = int(comb[i]) - 1;\n      combination.push(c);\n    }\n  }\n}\n\nfunction defineColors() {\n  let aaa = 254;\n  ctokyo = color(227, 143, 53, aaa); \/\/ Orange\n  cberlin = color(53, 155, 227, aaa);  \/\/ Blue\n  clondon = color(231, 71, 71, aaa); \/\/ Red\n  cny = color(166, 79, 206, aaa); \/\/ Lavender\n  ccdmx = color(76, 205, 82, aaa); \/\/ Green \n  cla = color(238, 211, 30, aaa); \/\/ Yellow\n  foregrounds = [ctokyo, cberlin, clondon, cny, ccdmx, cla];\n  s1 = color(255, 226, 204);\n  s2 = color(204, 255, 226);\n  s3 = color(225, 204, 226);\n  s4 = color(164, 204, 255);  \n  sc = [s1, s2, s3, s4];\n}\n\nfunction windowResized() {\n  resizeCanvas(windowWidth, windowHeight);\n  theDetails();\n}\n\nfunction setup() {\n  createCanvas(windowWidth, windowHeight, WEBGL);\n  \n  r = new RND(seed);\n  \n  defineRez();\n  \n  if (mintNumber >= 924) {\n    index = int(random(0, 924));\n  } else {\n    index = mintNumber;\n  }\n  \n  defineColors();\n  imageMode(CENTER);\n  gl = document.getElementById(\"defaultCanvas0\").getContext(\"webgl\");\n  stillLifeDim = rezs[cIndex];\n  alphapix = createGraphics(stillLifeDim, stillLifeDim, WEBGL);\n  pgl = alphapix._renderer.GL;\n  pgl.disable(gl.DEPTH_TEST);\n  setupShaders();  \n  doIt();\n}\n\nfunction defineRez() {\n  cIndex = 1;\n}\n\nfunction doIt() {\n  stillLifeDim = rezs[cIndex];\n  alphapix.resizeCanvas(stillLifeDim, stillLifeDim);\n  setupCombination(allCombinations[index]);\n  setupShapes();\n  setupGeometry();\n  createDisplacementMapTexture();\n  createStillLife();\n}\n\nfunction createGround() {\n  if (speedIndex != 4) {\n    angle += 0.0005;\n  }\n  let ss = map(sin(angle), -1, 1, 0, 1);\n  let c1 = lerpColor(sc[0], sc[1], ss);\n  let c2 = lerpColor(sc[1], sc[2], ss);\n  let c3 = lerpColor(sc[2], sc[3], ss);\n  let c4 = lerpColor(sc[3], sc[1], ss);\n  alphapix.background(255);\n  alphapix.blendMode(BLEND);\n  alphapix.beginShape();\n  alphapix.fill(c1);\n  alphapix.vertex(-alphapix.width\/2, -alphapix.height\/2);\n  alphapix.fill(c2);\n  alphapix.vertex(alphapix.width\/2, -alphapix.height\/2);\n  alphapix.fill(c3);\n  alphapix.vertex(alphapix.width\/2, alphapix.height\/2);\n  alphapix.fill(c4);\n  alphapix.vertex(-alphapix.width\/2, alphapix.height\/2);\n  alphapix.endShape();\n}\n\nfunction createStillLife() {\n  createGround();\n  alphapix.blendMode(MULTIPLY); \n  for (let i = 0; i < shapes.length; i++) {\n    shapes[i].move();\n    shapes[i].display(alphapix);\n  }\n}\n\nfunction draw() {\n  let scaleFactor = max(width, height) \/ 1200.0;\n  if (cIndex == 2) {\n    lineThickness = 1.66 * scaleFactor;\n    lineLength = 3.0 * lengthScalar * scaleFactor;\n  } else if (cIndex == 0) {\n    lineThickness = 3.33 * scaleFactor;\n    lineLength = 8.0 * lengthScalar * scaleFactor;\n  } else {\n    lineThickness = 2.22 * scaleFactor;\n    lineLength = 12.0 * lengthScalar * scaleFactor;\n  }\n  \n  lineDepth = 2 * scaleFactor;\n  lineSpacing = 2.22 * scaleFactor;\n  createStillLife();\n  background(bColor);\n  \n  push();\n  setupTransform();\n  drawLines();\n  pop();\n\n  if (viewDiagram) {\n    fill(255);\n    noStroke();\n    rect(0, 0, -stillLifeDim\/2, -stillLifeDim\/2);\n    image(alphapix, 0, 0);\n  }\n  \n  if (speedIndex != 4) {\n    CDMXSpin++;\n  }\n}\n\nclass VShape {\n  constructor(xin, yin, uin, win) {\n    this.scale = 1.0;\n    this.targetScale = 1.0;\n    this.scaleStep = 0.2;\n\n    this.dia = uin * 0.75;\n    this.mdia = uin * 0.8;\n    this.rdia = uin * 0.66;\n    this.ddia = uin * 0.55;\n    \n    this.tdia = uin * 0.8;\n    this.tdia2 = uin * 0.7;\n    \n    this.hu = uin * 0.5;\n    this.qr1 = uin * 0.3;\n    this.qr2 = uin * 0.2;\n    this.sr = uin * 0.4;\n    this.x = xin;\n    this.y = yin;\n    this.unit = stillLifeDim;\n    this.rx = this.x + (this.unit - this.rdia) \/ 2;\n    this.ry = this.y + (this.unit - this.rdia) \/ 2;\n    this.cx = this.x + this.unit \/ 2;\n    this.cy = this.y + this.unit \/ 2;\n\n    this.cindex = win;\n    this.sindex = win;\n\n    this.movex = 0;\n    this.movey = 0;\n    \n    this.hexx = uin * 0.2;\n    this.hexy = uin * 0.346; \n\n    this.moonAngle = r.rb(0, TWO_PI);\n\n    this.moveyval = r.rb(0.0005, 0.002);\n    this.movexval = r.rb(0.0005, 0.002);\n    if (r.rb(1) > 0.5) {\n        this.moveyval *= -1;\n      }\n    if (r.rb(1) > 0.5) {\n        this.movexval *= -1;\n      }\n  }\n  \n  resetScale() {\n    this.targetScale = 1.0;\n  }\n\n  upScale() {\n    this.targetScale += this.scaleStep;\n  }\n\n  downScale() {\n    this.targetScale -= this.scaleStep;\n    this.targetScale = max(0.0, this.targetScale);\n  }\n\n  move() {\n    this.movex += this.movexval * speedScalar;\n    this.movey += this.moveyval * speedScalar;\n    this.scale = (this.targetScale - this.scale) * 0.05 + this.scale;\n  }\n\n  display(pg) {\n    if (this.sindex == 0) {\n      this.sTokyo(pg);\n    } else if (this.sindex == 1) {\n      this.sBerlin(pg);\n    } else if (this.sindex == 2) {\n      this.sLondon(pg);\n    } else if (this.sindex == 3) {\n      this.sNYC(pg);\n    } else if (this.sindex == 4) {\n      this.sCDMX(pg);\n    } else if (this.sindex == 5) {\n      this.sLA(pg);\n    }\n  }\n  \n  sTokyo(pg) {\n    pg.noStroke();\n    pg.push();\n    pg.scale(this.scale);\n    pg.translate(this.cx, this.cy);\n    pg.rotateY(this.movey);\n    pg.rotateX(this.movex);\n    pg.fill(foregrounds[this.cindex]);\n    pg.ellipse(0, 0, this.dia, this.dia);\n    pg.pop();\n  }\n  \n  sBerlin(pg) {\n    pg.noStroke();\n    pg.fill(foregrounds[this.cindex]);\n    pg.push();\n    pg.scale(this.scale);\n    pg.beginShape();\n    pg.translate(this.cx, this.cy);\n    pg.rotateX(this.movex);\n    pg.rotateY(this.movey);\n    pg.vertex(-this.qr1, -this.hu);\n    pg.vertex(this.qr1, -this.qr2);\n    pg.vertex(this.qr1, this.hu);\n    pg.vertex(-this.qr1, this.qr2);\n    pg.endShape();\n    pg.pop();\n  }\n\n  sLondon(pg) {\n    pg.push();\n    pg.scale(this.scale);\n    pg.translate(this.rx + this.rdia \/ 2, this.ry + this.rdia \/ 2);\n    pg.rotateY(this.movey);\n    pg.rotateX(this.movex);\n    pg.noStroke();\n    pg.fill(foregrounds[this.cindex]);\n    pg.beginShape();\n    pg.vertex(-this.rdia \/ 2, -this.rdia \/ 2);\n    pg.vertex(this.rdia \/ 2, -this.rdia \/ 2);\n    pg.vertex(this.rdia \/ 2, this.rdia \/ 2);\n    pg.vertex(-this.rdia \/ 2, this.rdia \/ 2);\n    pg.endShape();\n    pg.pop();\n  }\n\n  sNYC(pg) {\n    pg.push();\n    pg.scale(this.scale);\n    pg.translate(this.rx + this.rdia \/ 2, this.ry + this.rdia \/ 2);\n    pg.rotateY(this.movey);\n    pg.rotateX(this.movex);\n    pg.noStroke();\n    pg.fill(foregrounds[this.cindex]);\n    pg.beginShape();\n    pg.vertex(this.hexx, -this.hexy);\n    pg.vertex(this.hexx*2, 0);\n    pg.vertex(this.hexx, this.hexy);\n    pg.vertex(-this.hexx, this.hexy);\n    pg.vertex(-this.hexx*2, 0);\n    pg.vertex(-this.hexx, -this.hexy);\n    pg.endShape();\n    pg.pop();\n  }\n    \n  sCDMX(pg) {\n    pg.push();\n    pg.scale(this.scale);\n    pg.translate(this.rx + this.rdia \/ 2, this.ry + this.rdia \/ 2.66);\n    pg.rotateY(this.movey);\n    pg.rotateX(this.movex);\n    pg.rotateZ(CDMXSpin\/1000.0);\n    pg.noStroke();\n    pg.fill(foregrounds[this.cindex]);\n    pg.beginShape();\n    pg.vertex(0, -this.tdia \/ 2);\n    pg.vertex(this.tdia \/ 2, this.tdia2 \/ 2);\n    pg.vertex(-this.tdia \/ 2, this.tdia2 \/ 2);\n    pg.endShape();\n    pg.pop();\n  }\n  \n  sLA(pg) {\n    pg.noStroke();\n    pg.fill(foregrounds[this.cindex]);\n    pg.push();\n    pg.scale(this.scale);\n    pg.translate(this.cx, this.cy);\n    pg.rotate(this.moonAngle);\n    pg.rotateX(this.movex);\n    pg.rotateY(this.movey);\n    pg.rotateZ(CDMXSpin\/1000.0);\n    pg.arc(0, 0, this.mdia, this.mdia, 0.7, TWO_PI - 0.7, CHORD);\n    pg.pop();\n  }\n\n}\n\nfunction tokyoParams() {\n  displayRed = true;\n  displayGreen = true;\n  displayBlue = true;\n  bColor = 246;\n  lengthScalar = 0.8;\n}\n\nfunction berlinParams() {\n  displayRed = false;\n  displayGreen = true;\n  displayBlue = true;\n  bColor = 15;\n  lengthScalar = 0.5;\n  if (index === 155) {\n    stillLifeDepthNeg = 350.0;\n    stillLifeDepthPos = 150.0;\n  }\n}\n\nfunction londonParams() {\n  displayRed = true;\n  displayGreen = false;\n  displayBlue = true;\n  bColor = 246;\n  lengthScalar = 0.5;\n}\n\nfunction nycParams() {\n  displayRed = false;\n  displayGreen = false;\n  displayBlue = true;\n  bColor = 246;\n  lengthScalar = 0.7;\n  if (index === 463) {\n    stillLifeDepthNeg = 400.0;\n    stillLifeDepthPos = 100.0;\n  }\n}\n\nfunction cdmxParams() {\n  displayRed = false;\n  displayGreen = true;\n  displayBlue = false;\n  bColor = 51;\n  lengthScalar = 0.7;\n  if (index === 617) {\n    stillLifeDepthNeg = 500.0;\n    stillLifeDepthPos = 0.0;\n  }\n}\n\nfunction laParams() {\n  displayRed = true;\n  displayGreen = true;\n  displayBlue = true;\n  bColor = 26;\n  lengthScalar = 0.8;\n}\n\nfunction keyPressed() {\n  if (key == '=' || key == '+') {\n    for (let i = 0; i < shapes.length; i++) {\n      shapes[i].upScale();\n    }\n  } else if (key == '-' || key == '_') {\n    for (let i = 0; i < shapes.length; i++) {\n      shapes[i].downScale();\n    }\n  } else if (key == 'd' || key == 'D') {\n    viewDiagram = !viewDiagram;\n  } else if (key == ' ') {\n    bColor -= 26;\n    if (bColor <= 0) {\n      bColor = 255;\n    }\n  } else if (key == 'r' || key == 'R') {\n    displayRed = !displayRed;\n  } else if (key == 'g' || key == 'G') {\n    displayGreen = !displayGreen;\n  } else if (key == 'b' || key == 'B'){\n    displayBlue = !displayBlue;\n  } else if (key == '1') {\n    tokyoParams();\n  } else if (key == '2') {\n    berlinParams();\n  } else if (key == '3') {\n    londonParams();\n  } else if (key == '4') {\n    nycParams();\n  } else if (key == '5') {\n    cdmxParams();\n  } else if (key == '6') {\n    laParams();\n  } else if (keyCode == UP_ARROW) {\n    stillLifeDepthNeg += 26;\n    stillLifeDepthPos += 26;\n  } else if (keyCode == DOWN_ARROW) {\n    stillLifeDepthNeg -= 26;\n    stillLifeDepthPos -= 26;\n  } else if (key == 's' || key == 'S') {\n    speedIndex++;\n    speedIndex = speedIndex % speeds.length;\n    speedScalar = speeds[speedIndex];\n  } else if (key == '0') {\n    lengthScalar += 0.2;\n  } else if (key == '9') {\n    if (lengthScalar > 0.4) {\n      lengthScalar -= 0.2;\n    }\n  } else if (key == 't' || key == 'T') {\n    cIndex++;\n    if (cIndex >= rezs.length) {\n      cIndex = 0;\n    }\n    doIt();\n  } else if (key == 'p' || key == 'P') {\n    saveCanvas(nf(index,3) + '-' + allCombinations[index] + \"-\" + frameCount + \".png\", 0, 0, width, height);\n  }\n}\n\nclass RND {\n  constructor(seed) {\n    this.seed = seed;\n  }\n  rd() {\n    this.seed ^= this.seed << 13;\n    this.seed ^= this.seed >> 17;\n    this.seed ^= this.seed << 5;\n    return ((this.seed < 0 ? ~this.seed + 1 : this.seed) % 1000) \/ 1000;\n  }\n  rb(a, b) {\n    return a + (b - a) * this.rd();\n  }\n}let allCombinations = [\n  999999,\n  100000, 110000, 120000, 130000, 140000, 111000, 112000, 113000, 114000, 115000, 116000, 123000,\n  124000, 134000, 111100, 111200, 111300, 111400, 111500, 111600, 112200, 113300, 112300, 112400,\n  112500, 112600, 113400, 113500, 113600, 114500, 114600, 115600, 123400, 123500, 124500, 111110,\n  111120, 111130, 111140, 111150, 111160, 111220, 111330, 111440, 111550, 111660, 111230, 111240,\n  111250, 111260, 111340, 111350, 111360, 111450, 111460, 111560, 112230, 112240, 113320, 112250,\n  112260, 114420, 113340, 113350, 114430, 113360, 112340, 112350, 112360, 112450, 112460, 112560,\n  113450, 113460, 113560, 114560, 123450, 111111, 111112, 111113, 111114, 111115, 111116, 111122,\n  111133, 111144, 111155, 111166, 111123, 111124, 111125, 111126, 111134, 111135, 111136, 111145,\n  111146, 111156, 111222, 111333, 111223, 111224, 111225, 111226, 111332, 111442, 111552, 111662,\n  111334, 111335, 111336, 111443, 111553, 111663, 111445, 111446, 111554, 111664, 111556, 111665,\n  111234, 111235, 111236, 111245, 111246, 111256, 111345, 111346, 111356, 111456, 112233, 112244,\n  112255, 113344, 113355, 112234, 112235, 113324, 112236, 112245, 113325, 114423, 112246, 113326,\n  112256, 114426, 115524, 114435, 113356, 112345, 112346, 112356, 112456, 113456, 200000, 220000,\n  230000, 240000, 250000, 222000, 221000, 223000, 224000, 225000, 226000, 234000, 235000, 245000,\n  222200, 222100, 222300, 222400, 222500, 222600, 223300, 224400, 221300, 221400, 221500, 221600,\n  223400, 223500, 223600, 224500, 224600, 225600, 234500, 234600, 235600, 222220, 222210, 222230,\n  222240, 222250, 222260, 222110, 222330, 222440, 222550, 222660, 222130, 222140, 222150, 222160,\n  222340, 222350, 222360, 222450, 222460, 222560, 223340, 223350, 224430, 223360, 223310, 225530,\n  224450, 224460, 225540, 224410, 221340, 221350, 221360, 221450, 221460, 221560, 223450, 223460,\n  223560, 224560, 234560, 222222, 222221, 222223, 222224, 222225, 222226, 222211, 222233, 222244,\n  222255, 222266, 222213, 222214, 222215, 222216, 222234, 222235, 222236, 222245, 222246, 222256,\n  222333, 222444, 222113, 222114, 222115, 222116, 222331, 222441, 222551, 222661, 222334, 222335,\n  222336, 222443, 222553, 222663, 222445, 222446, 222554, 222664, 222556, 222665, 222134, 222135,\n  222136, 222145, 222146, 222156, 222345, 222346, 222356, 222456, 223344, 223355, 223366, 224455,\n  223345, 223346, 224435, 223314, 223356, 224436, 225534, 223315, 224413, 223316, 226634, 225536,\n  225513, 224415, 224416, 221345, 221346, 221356, 221456, 223456, 300000, 330000, 340000, 350000,\n  360000, 333000, 331000, 332000, 334000, 335000, 336000, 345000, 346000, 356000, 333300, 333100,\n  333200, 333400, 333500, 333600, 334400, 335500, 336600, 331200, 331400, 331500, 331600, 332400,\n  332500, 332600, 334500, 334600, 335600, 345600, 314500, 333330, 333310, 333320, 333340, 333350,\n  333360, 333110, 333220, 333440, 333550, 333660, 333120, 333140, 333150, 333160, 333240, 333250,\n  333260, 333450, 333460, 333560, 334450, 334460, 335540, 334410, 334420, 336640, 335560, 335510,\n  336650, 335520, 331240, 331250, 331260, 331450, 331460, 331560, 332450, 332460, 332560, 334560,\n  314560, 333333, 333331, 333332, 333334, 333335, 333336, 333311, 333322, 333344, 333355, 333366,\n  333312, 333314, 333315, 333316, 333324, 333325, 333326, 333345, 333346, 333356, 333444, 333555,\n  333666, 333112, 333114, 333115, 333116, 333221, 333441, 333551, 333661, 333224, 333225, 333226,\n  333442, 333552, 333662, 333445, 333446, 333554, 333664, 333556, 333665, 333124, 333125, 333126,\n  333145, 333146, 333156, 333245, 333246, 333256, 333456, 334455, 334466, 334456, 334415, 335546,\n  334416, 335514, 334425, 336645, 334426, 335524, 331145, 334412, 331146, 336624, 335526, 335512,\n  336625, 331245, 331246, 331256, 331456, 332456, 400000, 440000, 450000, 460000, 444000, 441000,\n  442000, 443000, 445000, 446000, 456000, 415000, 416000, 426000, 444400, 444100, 444200, 444300,\n  444500, 444600, 445500, 446600, 441100, 441200, 441300, 441500, 441600, 442300, 442500, 442600,\n  443500, 443600, 445600, 415600, 425600, 444440, 444410, 444420, 444430, 444450, 444460, 444110,\n  444220, 444330, 444550, 444660, 444120, 444130, 444150, 444160, 444230, 444250, 444260, 444350,\n  444360, 444560, 445560, 445510, 446650, 445520, 441150, 446610, 445530, 441160, 446620, 446630,\n  441230, 441250, 441260, 441350, 441360, 441560, 442350, 442360, 442560, 443560, 412560, 444444,\n  444441, 444442, 444443, 444445, 444446, 444411, 444422, 444433, 444455, 444466, 444412, 444413,\n  444415, 444416, 444423, 444425, 444426, 444435, 444436, 444456, 444555, 444666, 444111, 444112,\n  444113, 444115, 444116, 444221, 444331, 444551, 444661, 444223, 444225, 444226, 444332, 444552,\n  444662, 444335, 444336, 444553, 444663, 444556, 444665, 444123, 444125, 444126, 444135, 444136,\n  444156, 444235, 444236, 444256, 444356, 445566, 441155, 441166, 445516, 446615, 445526, 441156,\n  445512, 446625, 445536, 445513, 446635, 441125, 446612, 442256, 445523, 441136, 446623, 441235,\n  441236, 441256, 441356, 442356, 500000, 550000, 560000, 510000, 555000, 551000, 552000, 553000,\n  554000, 556000, 516000, 526000, 512000, 513000, 555500, 555100, 555200, 555300, 555400, 555600,\n  556600, 551100, 552200, 551200, 551300, 551400, 551600, 552300, 552400, 552600, 553400, 553600,\n  554600, 512600, 513600, 555550, 555510, 555520, 555530, 555540, 555560, 555110, 555220, 555330,\n  555440, 555660, 555120, 555130, 555140, 555160, 555230, 555240, 555260, 555340, 555360, 555460,\n  556610, 551160, 556620, 556630, 551120, 552260, 556640, 551130, 552210, 551140, 551230, 551240,\n  551260, 551340, 551360, 551460, 552340, 552360, 552460, 553460, 512360, 555555, 555551, 555552,\n  555553, 555554, 555556, 555511, 555522, 555533, 555544, 555566, 555512, 555513, 555514, 555516,\n  555523, 555524, 555526, 555534, 555536, 555546, 555666, 555111, 555222, 555112, 555113, 555114,\n  555116, 555221, 555331, 555441, 555661, 555223, 555224, 555226, 555332, 555442, 555662, 555334,\n  555336, 555443, 555663, 555446, 555664, 555123, 555124, 555126, 555134, 555136, 555146, 555234,\n  555236, 555246, 555346, 551166, 552266, 553366, 556612, 551126, 556613, 551136, 552216, 556614,\n  556623, 551146, 556624, 551123, 553316, 556634, 552246, 551134, 552214, 551234, 551236, 551246,\n  551346, 552346, 600000, 660000, 610000, 620000, 666000, 661000, 662000, 663000, 664000, 665000,\n  612000, 613000, 623000, 666600, 666100, 666200, 666300, 666400, 666500, 661100, 662200, 661200,\n  661300, 661400, 661500, 662300, 662400, 662500, 663400, 663500, 664500, 612300, 612400, 613400,\n  666660, 666610, 666620, 666630, 666640, 666650, 666110, 666220, 666330, 666440, 666550, 666120,\n  666130, 666140, 666150, 666230, 666240, 666250, 666340, 666350, 666450, 661120, 661130, 662210,\n  661140, 661150, 663310, 662230, 662240, 663320, 662250, 661230, 661240, 661250, 661340, 661350,\n  661450, 662340, 662350, 662450, 663450, 612340, 666666, 666661, 666662, 666663, 666664, 666665,\n  666611, 666622, 666633, 666644, 666655, 666612, 666613, 666614, 666615, 666623, 666624, 666625,\n  666634, 666635, 666645, 666111, 666222, 666112, 666113, 666114, 666115, 666221, 666331, 666441,\n  666551, 666223, 666224, 666225, 666332, 666442, 666552, 666334, 666335, 666443, 666553, 666445,\n  666554, 666123, 666124, 666125, 666134, 666135, 666145, 666234, 666235, 666245, 666345, 661122,\n  661133, 662244, 661123, 661124, 662213, 661125, 661134, 662214, 663312, 661135, 662215, 661145,\n  663314, 663315, 664413, 662235, 662245, 661234, 661235, 661245, 661345, 662345, 612345\n];"
}