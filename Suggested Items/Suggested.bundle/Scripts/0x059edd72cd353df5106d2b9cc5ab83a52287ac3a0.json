{
  "instructions" : "click to animate | space bar changes background color",
  "kind" : "p5js100",
  "screensaverFileName" : "Chromie.Squiggle",
  "value" : "let numHashes = tokenData.hashes.length;\nlet hashPairs = [];\nfor (let i = 0; i < numHashes; i++) {\n     for (let j = 0; j < 32; j++) {\n          hashPairs.push(tokenData.hashes[i].slice(2 + (j * 2), 4 + (j * 2)));\n     }\n}\nlet decPairs = hashPairs.map(x => {\n     return parseInt(x, 16);\n});\n\nlet seed = parseInt(tokenData.hashes[0].slice(0, 16), 16);\nlet color;\nlet backgroundIndex = 0;\nlet backgroundArray = [255, 225, 200, 175, 150, 125, 100, 75, 50, 25, 0, 25, 50, 75, 100, 125, 150, 175, 200, 225];\nlet index = 0;\nlet ht;\nlet wt = 2;\nlet speed = 1;\nlet segments;\nlet amp = 1;\nlet direction = 1;\nlet loops = false;\nlet startColor = decPairs[29];\nlet reverse = decPairs[30] < 128;\nlet slinky = decPairs[31] < 35;\nlet pipe = decPairs[22] < 32;\nlet bold = decPairs[23] < 15;\nlet segmented = decPairs[24] < 30;\nlet fuzzy = pipe && !slinky;\n\n\nfunction setup() {\n     let portrait = windowWidth < windowHeight;\n     createCanvas(windowWidth > windowHeight * 3 \/ 2 ? windowHeight * 3 \/ 2 : windowWidth, windowWidth > windowHeight * 3 \/ 2 ? windowHeight : windowWidth * 2 \/ 3);\n     var el = document.getElementsByTagName(\"canvas\")[0];\n     el.addEventListener(\"touchstart\", mouseClicked, false);\n     colorMode(HSB, 255);\n     segments = map(decPairs[26], 0, 255, 12, 20);\n     ht = map(decPairs[27], 0, 255, 3, 4);\n     spread = decPairs[28] < 3 ? 0.5 : map(decPairs[28], 0, 255, 5, 50);\n     strokeWeight(height\/1200);\n}\n\nfunction draw() {\n     color = 0;\n     background(backgroundArray[backgroundIndex]);\n     let div = Math.floor(map(Math.round(decPairs[24]), 0, 230, 3, 20));\n     let steps = slinky ? 50 : fuzzy ? 1000 : 200;\n     translate((width \/ 2) - (width \/ wt \/ 2), height \/ 2);\n     for (let j = 0; j < segments - 2; j++) {\n          for (let i = 0; i <= steps; i++) {\n               let t = i \/ steps;\n               let x = curvePoint(width \/ segments \/ wt * j, width \/ segments \/ wt * (j + 1), width \/ segments \/ wt * (j + 2), width \/ segments \/ wt * (j + 3), t);\n               let y = curvePoint(map(decPairs[j], 0, 255, -height \/ ht, height \/ ht) * amp, map(decPairs[j + 1], 0, 255, -height \/ ht, height \/ ht) * amp, map(decPairs[j + 2], 0, 255, -height \/ ht, height \/ ht) * amp, map(decPairs[j + 3], 0, 255, -height \/ ht, height \/ ht) * amp, t);\n               let hue = reverse ? 255 - (((color \/ spread) + startColor + index) % 255) : (((color \/ spread) + startColor) + index) % 255;\n\n               if (fuzzy) {\n                    noStroke();\n                    fill(hue, 255, 255, 20);\n                    let fuzzX = x + map(rnd(), 0, 1, 0, height \/ 10);\n                    let fuzzY = y + map(rnd(), 0, 1, 0, height \/ 10);\n                    if (dist(x, y, fuzzX, fuzzY) < height \/ 11.5) {\n                         circle(fuzzX, fuzzY, map(rnd(), 0, 1, height \/ 160, height \/ 16));\n                    }\n               } else {\n                    if (slinky && pipe) {\n                         if (i == 0 || i == steps - 1) {\n                              fill(0);\n                         } else {\n                              noFill();\n                         }\n                         stroke(0);\n                         circle(x, y, (height \/ 7))\n                    }\n\n                    if (slinky) {\n                         if (i == 0 || i == steps - 1) {\n                              fill(hue, 255, 255);\n                         } else {\n                              noFill();\n                         }\n                         stroke(hue, 255, 255);\n                    } else {\n                         noStroke();\n                         fill(hue, 255, 255);\n                    }\n\n                    circle(x, y, bold && !slinky ? height \/ 5 : height \/ 13);\n\n                    if (segmented && !slinky && !bold) {\n                         if (i % div === 0 || i == 0 || i == steps - 1) {\n                              noStroke();\n                              fill(decPairs[25]);\n                              circle(x, y, height \/ 12);\n                         }\n                    }\n               }\n               color++;\n          }\n          seed = parseInt(tokenData.hashes[0].slice(0, 16), 16);\n     }\n\n\n     loops === true ? index = index + speed : index = index;\n     if (keyIsDown(UP_ARROW)) {\n          if (keyIsDown(SHIFT)) {\n               if (speed < 20) {\n                    speed++;\n               } else {\n                    speed = 20;\n               }\n          } else {\n               if (speed < 20) {\n                    speed = speed + 0.1;\n               } else {\n                    speed = 20;\n               }\n          }\n     } else if (keyIsDown(DOWN_ARROW)) {\n          if (keyIsDown(SHIFT)) {\n               if (speed > 1) {\n                    speed--;\n               } else {\n                    speed = 0.1;\n               }\n          } else {\n               if (speed > 0.1) {\n                    speed = speed - 0.1;\n               } else {\n                    speed = 0.1;\n               }\n          }\n     }\n\n}\n\nfunction keyPressed() {\n     if (keyCode === 32) {\n          if (backgroundIndex < backgroundArray.length - 1) {\n               backgroundIndex++;\n          } else {\n               backgroundIndex = 0;\n          }\n     }\n}\n\nfunction mouseClicked() {\n     if (loops === false) {\n          loops = true;\n     } else {\n          loops = false;\n     }\n}\n\nfunction rnd() {\n\n\n     seed ^= seed << 13;\n\n     seed ^= seed >> 17;\n\n     seed ^= seed << 5;\n\n     return (((seed < 0) ? ~seed + 1 : seed) % 1000) \/ 1000;\n}\nmouseClicked();backgroundIndex=10;"
}