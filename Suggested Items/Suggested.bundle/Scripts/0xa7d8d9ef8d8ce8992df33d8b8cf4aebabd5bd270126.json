{
  "abId" : "126",
  "address" : "0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270",
  "instructions" : "Click to toggle clock hands | Press \"s\" to save frame | Press \"w\" to toggle background color.",
  "kind" : "p5js100",
  "name" : "Timepiece",
  "screensaverFileName" : "Timepiece",
  "value" : "let seed = parseInt(tokenData.hash.slice(0, 16), 16);\nlet p = [];\nfor (let j = 0; j < 32; j++) {\n     p.push(tokenData.hash.slice(2 + (j * 2), 4 + (j * 2)));\n}\nlet z = p.map(x => {\n     return parseInt(x, 16) \/ 255;\n});\nlet maSh,\n     sro, mro, hro, sum,\n     sf, mf, hf,\n     sr0, mr0, hr0,\n     wc1, wc2,\n     sr1min = 0.2,\n     sr1max = 0.3,\n     sr2min = 0.41,\n     sr2max = 0.55,\n     sfL = [0.5, 1, 1.6, 2],\n     mr1min = 0.15,\n     mr1max = 0.35,\n     mr2min = 0.36,\n     mr2max = 0.56,\n     mfL = [0.4, 0.8, 1.4, 1.75],\n     hr1min = 0.1,\n     hr1max = 0.35,\n     hr2min = 0.36,\n     hr2max = 0.54,\n     hfL = [0.3, 0.6, 1.2, 1.5],\n     wc1L = [1.5, 1.7, 1.9],\n     wc2L = [2.0, 2.3, 2.5],\n     wcfL = [0.4, 2, 1, 0.2],\n     t, t0,\n     tL = [6.2, 6.6, 7, 12, 12.5, 14],\n     ws = 0.9,\n     wm = 1,\n     wh = 1.1,\n     wbs = 1,\n     wbm = 1,\n     wbh = 1,\n     ra2,\n     ra, gs = 200,\n     dens,\n     cl = false,\n     w = false,\n     pals = \"7dcfcbc4ede79fdfd844b6c51594a8Zf0f9ff8ab4d03f80abd9e4ecbed2dfZ1414144747477a7a7ab8b8b8f7f7f7Z1a31613889ccebf3fa9ac3e5f76d4aZc3464663174af27340420042290029Zed2b2dfe4858ff6a4dff9352ffdb70Zecec7eecb57eec7e7eecd07eed997eZbaf77d8de795e7ff61f4ffdb5ed4afZ0a8a680b504808c48505faa00e1b2fZ14d3ff74d9fba8f2ffe5fffcff8082Z517dec82cfee59b9edc5d0ff875cd6Ze8c0f2da95f9a771f88358fa5f3cfaZ00508500b0b32fdf9367ee87a3fbabZ1b30a710207a010938000529010f5aZdfd9f7017de94f14bd3d094800c8f5Zf67160f77e6eff8861ff9166ff9970Z9060c366d4ffc085ffff579201769dZ78de7d858bdbcbf8252cceab20b6b6Zfcc0d2f1b1cee28dbfcc6bb7853c96Z7400b85e60ce4ea8de56cfe180ffdbZ1bf6fe01b3f9001347015dc600277aZc4f7f156205572557c8a88a5a6c5ceZff66663fcefdffadadfff47b05ffe2Zf9c8caf4e7d7e2c0c7c8b7c5f8d8ceZf44510ffae00901414e70d0d1a0000Zf76464ff2776ffd4e00ef6d0b900f6Z055e0215890257b80e73e702a4f723\".split `Z`.map(c => c.match(\/.{6}\/g).map(s => '#' + s)),\n     palp = [4.8, 4.8, 4.8, 4.8, 4.8, 4.8, 4.8, 4.8, 4.8, 4.8, 4.8, 4.8, 4.8, 4.8, 3.1, 3.1, 3.1, 3.1, 3.1, 3.1, 3.1, 3.1, 2, 2, 1.5, 1.5, 1],\n     pali, pal, Pts2 = [],\n     Ptsb2 = [],\n     cL = [],\n     cbL = [],\n     bg, e, mov, bm, bc, p2, v,\n     sec1, sn, mn, hn, s2, m2, h2,\n     psec, mrt = 0,\n     msh = false,\n     msha = 0;\n\nfunction preload() {\n     maSh = getShader(this._renderer);\n}\n\nfunction setup() {\n     cnv = createCanvas(windowWidth, windowHeight, WEBGL);\n     pixelDensity();\n     dens = pixelDensity();\n     frameRate();\n     colorMode(RGB, 1);\n     const gl = canvas.getContext('webgl');\n     gl.disable(gl.DEPTH_TEST);\n\n     ra = min(width * dens, height * dens) \/ 2;\n     ra2 = max(width * dens, height * dens) \/ 2;\n\n     sn = second();\n     mn = minute();\n     hn = hour();\n\n     psec = sn;\n     hprev = hn;\n     SetDomains();\n\n     xr = width * dens;\n     yr = height * dens;\n\n     if (xr * yr > pow(5760, 2)) {\n          xr1 = int(xr * pow(pow(5760, 2) \/ (xr * yr), 0.5));\n          yr1 = int(yr * pow(pow(5760, 2) \/ (xr * yr), 0.5));\n     } else {\n          xr1 = xr\n          yr1 = yr\n     }\n\n     pali = floor(map(z[26], 0, 1, 0, pals.length - 0.01));\n     let palt;\n     let th = 0;\n     pali = 0;\n     for (i = 0; i < pals.length; i++) {\n          palt = pals[i];\n          th += palp[i] \/ 100;\n          if (z[26] * 0.999 > th) {\n               pali = i + 1;\n          }\n     }\n     pal = pals[pali];\n     p2 = floor(z[28] * 4.99);\n\n     cs = color(pal[(0 + p2) % 5]);\n     cm = color(pal[(1 + p2) % 5]);\n     ch = color(pal[(2 + p2) % 5]);\n     c0 = color(pal[(3 + p2) % 5]);\n     cb = color(pal[(4 + p2) % 5]);\n     cL = [red(cs), green(cs), blue(cs), red(cm), green(cm), blue(cm), red(ch), green(ch), blue(ch), red(c0), green(c0), blue(c0), red(cb), green(cb), blue(cb)];\n     cbL = [1, 0, 0, 0, 1, 0, 0, 0, 1, red(c0), green(c0), blue(c0), red(cb), green(cb), blue(cb)];\n\n     shader(maSh);\n\n     e = z[17] < 0.52 ? 0 : 1;\n     e = z[17] > 0.6 ? 2 : e;\n     e = z[17] > 0.65 ? 3 : e;\n     e = z[17] > 0.75 ? 4 : e;\n     e = z[17] > 0.9 ? 5 : e;\n     v = z[29] < 0.88 ? 0 : 1\n     v = e == 4 ? 0 : v;\n     bg = z[18] < 0.65 ? 0 : 1;\n     bg = z[18] > 0.85 ? 3 : bg;\n     bg = z[18] > 0.95 ? 4 : bg;\n     bg = (e == 4 || e == 5) ? 2 : bg;\n     mov = z[19] < 0.7 ? 0 : 1;\n     bm = z[20] < 0.4 ? 0 : 1;\n     bm = z[20] > 0.8 ? 2 : bm;\n     bm = (mov == 1 && t0 > 10) ? 0 : bm;\n     bm = v == 1 ? 0 : bm;\n     bc = z[21] < 0.2 ? 1 : 2;\n     bc = z[21] > 0.6 ? 3 : bc;\n     bc = bm == 0 ? 0 : bc;\n     bc = bm == 2 ? 3 : bc;\n\n     sU(\"cL\", cL);\n     sU(\"xr\", xr);\n     sU(\"yr\", yr);\n     sU(\"xr1\", xr1);\n     sU(\"yr1\", yr1);\n     sU(\"dens\", dens);\n     sU(\"ra\", ra);\n     sU(\"bm\", bm);\n     sU(\"bc\", bc);\n     sU(\"v\", v);\n}\n\nfunction draw() {\n     SetPoints();\n\n     let bg2;\n     if (w == true) {\n          if (bg == 3) {\n               bg2 = 4;\n          } else {\n               bg2 = 3;\n          }\n          if (e == 4) {\n               e2 = 0;\n          } else {\n               e2 = e;\n          }\n     } else {\n          bg2 = bg;\n          e2 = e;\n     }\n\n     sU(\"t\", t);\n     sU(\"Pts2\", Pts2);\n     sU(\"Ptsb2\", Ptsb2);\n     sU(\"cbL\", cbL);\n     sU(\"cl\", cl);\n     sU(\"bg\", bg2);\n     sU(\"e\", e2);\n     quad(-1, -1, 1, -1, 1, 1, -1, 1);\n\n     if (cl === true) {\n          stroke(1);\n          let drg = ra \/ (dens * gs);\n          strokeWeight(drg);\n          let s2 = createVector(s1.x, s1.y);\n          s2.sub(sro);\n          s2.normalize();\n          line(0, 0, s2.x * 57 * drg, s2.y * 57 * drg);\n          strokeWeight(drg * 0.5);\n          strokeWeight(2 * drg);\n          m1 = m1.sub(mro);\n          m1.normalize();\n          line(0, 0, m1.x * 45 * drg, m1.y * 45 * drg);\n          strokeWeight(drg);\n          strokeWeight(3.5 * drg);\n          h1 = h1.sub(hro);\n          h1.normalize();\n          line(0 - h1.x * 0.5 * drg, 0 - h1.y * 0.5 * drg, h1.x * 33 * drg, h1.y * 33 * drg);\n          strokeWeight(drg);\n     }\n}\n\nfunction getShader(_renderer) {\n     const vs =\n          `\n  precision highp float;\n  varying vec2 vPos;\n  attribute vec3 aPosition;\n  void main() { \nvPos = (gl_Position = vec4(aPosition,1.0)).xy; \n}`;\n     const fs =\n          `\n  precision highp float;\n  uniform float xr;\n  uniform float yr;\n  uniform float xr1;\n  uniform float yr1;\n  uniform float dens;\n  uniform vec3 Pts2[4];\n  uniform vec3 Ptsb2[4];\n  uniform vec3 Pt;\n  uniform vec3 cL[5];\n  uniform vec3 cbL[3];\n  uniform float t;\n  uniform float ra;\n  uniform bool cl;\n  uniform int e;\n  uniform int bg;\n  uniform int bm;\n  uniform int bc;\n  uniform int v;\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) \/ (max1 - min1);\n}\n  void main() {\n    vec3 cs = vec3(cL[0]);\n    vec3 cm = vec3(cL[1]);\n    vec3 ch = vec3(cL[2]);\n    vec3 c0 = vec3(cL[3]);\n    vec3 cb = vec3(cL[4]);\n    float xcoord = gl_FragCoord.x;\n    float ycoord = gl_FragCoord.y;\n    vec2 pttest1 = vec2(-30.0,-60.0);\n    float rw = 0.0;\n    float gw = 0.0;\n    float bw = 0.0;\n    float sum = 0.0;\n    float dsum = 0.0;\n    float th = 0.3;\n    float xsh; \n    float ysh; \n    float sc; \n\n    float badj = -1.0 * (1.0\/pow(ra\/500.0,0.35)+1.895);\n\n    if (xr * yr > pow(5760.0,2.0)){\n      sc = pow( xr*yr\/pow(5760.0,2.0) ,0.5);\n    } else {\n      sc = 1.0;\n    }\n\n    if (xr * yr > pow(5760.0,2.0)) {\n        xsh = (xr - xr1)\/2.0;\n        ysh = (yr - yr1)\/2.0;\n    } else {\n        xsh = 0.0;\n        ysh = 0.0;\n    }\n    if (bg==4){\n      th=0.15;\n    }\n   for (int i = 0; i < 4; i++) {\n      float dx = Pts2[i].x - xcoord * sc + xsh;\n      float dy = Pts2[i].y + ycoord * sc - ysh;\n\n      float r = Pts2[i].z;\n      float d = pow((dx * dx + dy * dy)+1000.0, -2.0);\n      dsum += d;\n      sum += (r * r) \/ (dx * dx + dy * dy);\n      rw += d * cL[i].r;\n      gw += d * cL[i].g;\n      bw += d * cL[i].b;\n    }\n    if (bm > 0 ) {\n      for (int i = 0; i < 3; i++) {\n\n       float dx = Ptsb2[i].x - xcoord * sc + xsh;\n       float dy = Ptsb2[i].y + ycoord * sc - ysh;\n\n        float r = Ptsb2[i].z;\n        float d = pow((dx * dx + dy * dy)+50.0, badj);\n        dsum += d;\n        sum += (r * r) \/ (dx * dx + dy * dy);\n        if (bc == 1){\n          rw += d * cL[3].r;\n          gw += d * cL[3].g;\n          bw += d * cL[3].b;\n        } else if (bc == 3){\n          rw += d * cbL[i].r;\n          gw += d * cbL[i].g;\n          bw += d * cbL[i].b;\n        } else {\n          rw += d * cL[i].r;\n          gw += d * cL[i].g;\n          bw += d * cL[i].b;\n        }\n      }\n    }  \n    float t1 = t * 0.00000065 * ra;\n    float rav = rw \/ dsum; \n    float gav = gw \/ dsum;\n    float bav = bw \/ dsum;\n    vec3 color = vec3(rav,gav,bav); \n    vec3 cgb = mix(color,cb, 0.3)+0.2;\n\n    if (v==1){\n       if (sum > t1 && sum <= t1 * 3.0) {\n        gl_FragColor = vec4(color,1.0);    \n        return;\n       } else if (sum > t1 * 3.0 && sum <= t1 * 3.1){\n          float sum2 = 1.0-map(sum, t1*3.15, t1*3.0,0.0,1.0);\n          sum2 = smoothstep(0.2,0.8,sum2);\n          gl_FragColor = vec4(mix(color,cb,sum2),1.0);   \n          return;\n       }else if (sum > t1 * 3.1){\n          gl_FragColor = vec4(cb,1.0);    \n          return;\n       }\n    } else{\n      if (sum > t1) {\n        gl_FragColor = vec4(color,1.0);    \n        return;\n       } \n    }\n    if (bg==1){\n      cb = cgb;\n    }\n    if (bg==3){\n      cb=vec3(1.0);\n    }\n    if (bg==4){\n      cb=vec3(0.0);\n    }\n    if (e==0){\n        if (sum <= t1 && sum > t1*0.95) {\n          float sum2 = 1.0-map(sum, t1*0.95, t1,0.0,1.0);\n          sum2 = smoothstep(0.2,0.8,sum2);\n          gl_FragColor = vec4(mix(color,cb,sum2),1.0);   \n          return;\n      }\n    }\n   if (e==2){\n        if (sum <= t1 && sum > t1*0.6) {\n          float sum2 = 1.0-map(sum, t1*0.6, t1,0.0,1.0);\n          sum2 = smoothstep(0.2,0.8,sum2);\n          gl_FragColor = vec4(mix(color,cb,sum2),1.0);   \n          return;\n      }\n    }\n    if (e==1){\n      if (sum <= t1 && sum> t1*th){ \n        float sum2 = 1.0-map(sum, t1*th, t1,0.0,1.0);\n        sum2 = smoothstep(0.0,0.7,sum2);\n        vec3 glow = mix(color, vec3(1.0), 0.2);\n        glow = mix(glow, cb, 0.1);\n        glow = mix(glow,cb,sum2);\n        if (sum > t1*0.95) {\n          float sum2 = 1.0-map(sum, t1*0.95, t1,0.0,1.0);\n          sum2 = smoothstep(0.2,0.8,sum2);\n          gl_FragColor = vec4(mix(color,glow,sum2),1.0);\n          return;\n        } \n        if (sum <= t1*0.95 && sum > t1*0.4) {\n            gl_FragColor = vec4(glow,1.0);\n            return;\n        }\n      }\n    } else if (e==3){\n        if (sum <= t1 && sum > t1*0.95) {\n          float sum2 = 1.0-map(sum, t1*0.95, t1,0.0,1.0);\n          sum2 = smoothstep(0.2,0.8,sum2);\n          gl_FragColor = vec4(mix(color,mix(color,cb,0.6),sum2),1.0);    \n          return;\n        } else if (sum <= t1*0.95 && sum > t1*0.75) {\n            gl_FragColor = vec4(mix(color,cb,0.6),1.0); \n            return;\n        } else if (sum <= t1*0.75 && sum > t1*0.7) {\n            float sum2 = 1.0-map(sum, t1*0.7,t1*0.75,0.0,1.0);\n            sum2 = smoothstep(0.2,0.8,sum2);\n            gl_FragColor = vec4(mix(mix(color,cb,0.6),cb,sum2),1.0); \n        }\n    }\n    if (bg==1){\n      color = cgb;\n      gl_FragColor = vec4(color,1.0); \n      return;\n    } else if (bg == 2){ \n        vec3 co;\n        if (e==4){\n          co = vec3(1.0);\n        } else {\n          co = cb;\n        }\n        cb = vec3(color)+0.04;\n        if (sum <= t1 && sum > t1*0.97) {\n          float sum2 = 1.0-map(sum, t1*0.97, t1,0.0,1.0);\n          sum2 = smoothstep(0.2,0.8,sum2);\n          gl_FragColor = vec4(mix(color,co,sum2),1.0);   \n          return;\n        } else if (sum <= t1*0.97 && sum > t1*0.94){\n          gl_FragColor = vec4(co, 1.0);\n           return;\n        } else if (sum <= t1*0.94 && sum > t1*0.91) {\n          float sum2 = 1.0-map(sum, t1*0.91,t1*0.94,0.0,1.0);\n          sum2 = smoothstep(0.2,0.8,sum2);\n          gl_FragColor = vec4(mix(co,cb,sum2),1.0); \n          return;\n        }\n      gl_FragColor = vec4(color,1.0)+0.04;\n      return;\n    } else if (bg == 3){  \n      if (e == 5){\n        vec3 co = vec3(cL[4]);\n        cb = vec3(1.0);\n        if (sum <= t1 && sum > t1*0.97) {\n          float sum2 = 1.0-map(sum, t1*0.97, t1,0.0,1.0);\n          sum2 = smoothstep(0.2,0.8,sum2);\n          gl_FragColor = vec4(mix(color,co,sum2),1.0); \n          return;\n        } else if (sum <= t1*0.97 && sum > t1*0.94){\n          gl_FragColor = vec4(co, 1.0);\n           return;\n        } else if (sum <= t1*0.94 && sum > t1*0.91) {\n          float sum2 = 1.0-map(sum, t1*0.91,t1*0.94,0.0,1.0);\n          sum2 = smoothstep(0.2,0.8,sum2);\n          gl_FragColor = vec4(mix(co,cb,sum2),1.0); \n          return;\n        }else {\n        gl_FragColor = vec4(vec3(1.0),1.0);\n        return;\n      }\n      } else {\n        gl_FragColor = vec4(vec3(1.0),1.0);\n        return;\n      }\n    } else if (bg == 4){ \n      gl_FragColor = vec4(0.0,0.0,0.0,1.0);\n      return;\n    }else {            \n      gl_FragColor = vec4(vec3(cL[4]),1.0);\n      return;\n    }\n  }`;\n     return new p5.Shader(_renderer, vs, fs);\n}\n\nfunction SetDomains() {\n     sr1 = map(z[0], 0, 1, sr1min, sr1max) * ra;\n     sr2 = map(z[1], 0, 1, sr2min, sr2max) * ra;\n     mr1 = map(z[2], 0, 1, mr1min, mr1max) * ra;\n     mr2 = map(z[3], 0, 1, mr2min, mr2max) * ra;\n     hr1 = map(z[4], 0, 1, hr1min, hr1max) * ra;\n     hr2 = map(z[5], 0, 1, hr2min, hr2max) * ra;\n\n     sf = sfL[floor(z[6] * sfL.length * 0.99)];\n     mf = mfL[floor(z[7] * mfL.length * 0.99)];\n     hf = hfL[floor(z[8] * hfL.length * 0.99)];\n     wcf = wcfL[floor(z[9] * wcfL.length * 0.99)];\n\n     t0 = tL[floor(z[10] * tL.length * 0.99)];\n\n     wc1 = wc1L[floor(z[11] * wc1L.length * 0.99)];\n     wc2 = wc2L[floor(z[12] * wc2L.length * 0.99)];\n\n     ws *= ra \/ gs;\n     wm *= ra \/ gs;\n     wh *= ra \/ gs;\n\n     wbs *= ra \/ gs;\n     wbm *= ra \/ gs;\n     wbh *= ra \/ gs;\n\n     wc1 *= ra \/ gs;\n     wc2 *= ra \/ gs;\n\n     t = t0 * gs \/ ra;\n}\n\nfunction SetPoints() {\n\n     let time = [second(), minute(), hour(), millis() \/ 1000];\n     let hc = time[2];\n     let mc = time[1];\n     let sc = time[0];\n     let sec = time[3];\n     let ms = millis();\n\n     if (psec != sc) {\n          mrt = ms;\n     }\n\n     var mils = constrain(floor(ms - mrt) \/ 1000, 0, 1);\n\n     if (psec != sc && frameCount != 1 && msh == false) {\n          msh = true;\n          msha = 1 - ms \/ 1000;\n     }\n\n     mils = mils - msha;\n     psec = sc;\n\n     s2 = sc + mils;\n     m2 = mc + (sc \/ 60) % 1\n     h2 = (hc + (mc \/ 60) % 1) % 12;\n\n     s = map(s2, 0, 60, 0, TWO_PI) - HALF_PI;\n     m = map(m2, 0, 60, 0, TWO_PI) - HALF_PI;\n     h = map(h2, 0, 12, 0, TWO_PI) - HALF_PI;\n\n     sr = map(cos((sec) * sf), -1, 1, sr1, sr2);\n     mr = map(cos((sec) * mf), -1, 1, mr1, mr2);\n     hr = map(cos((sec) * hf), -1, 1, hr1, hr2);\n     wc = map(cos((sec) * wcf), -1, 1, wc1, wc2);\n\n     let b0 = 12 * ra \/ gs;\n\n     let sbr = map(sr, sr1, sr2, sr - b0 \/ 1.5, sr - b0 \/ 1.5);\n     let mbr = map(mr, mr1, mr2, mr - b0 \/ 1.5, mr - b0 \/ 1.5);\n     let hbr = map(hr, hr1, hr2, hr - b0 \/ 1.5, hr - b0 \/ 1.5);\n\n     if (bm == 1) {\n          sbr = map(sr, sr1, sr2, b0, sr2 - b0);\n          mbr = map(mr, mr1, mr2, b0, mr2 - b0);\n          hbr = map(hr, hr1, hr2, b0, hr2 - b0);\n     };\n     if (bc == 3) {\n          let sbcr = 1 - map(sr, sr1, sr2, 0, 1);\n          let mbcr = 1 - map(mr, mr1, mr2, 0, 1);\n          let hbcr = 1 - map(hr, hr1, hr2, 0, 1);\n\n          let sbc = lerpColor(c0, cs, sbcr);\n          let mbc = lerpColor(c0, cm, mbcr);\n          let hbc = lerpColor(c0, ch, hbcr);\n          cbL = [red(sbc), green(sbc), blue(sbc), red(mbc), green(mbc), blue(mbc), red(hbc), green(hbc), blue(hbc)];\n     }\n\n     let sb1 = createVector(cos(s) * sbr, sin(s) * sbr);\n     let mb1 = createVector(cos(m) * mbr, sin(m) * mbr);\n     let hb1 = createVector(cos(h) * hbr, sin(h) * hbr);\n\n     Ptsb2 = [sb1.x + xr1 \/ 2, sb1.y - yr1 \/ 2, wbs, mb1.x + xr1 \/ 2, mb1.y - yr1 \/ 2, wbm, hb1.x + xr1 \/ 2, hb1.y - yr1 \/ 2, wbh, 0.0 + xr1 \/ 2, 0.0 - yr1 \/ 2, wc];\n\n     s1 = createVector(cos(s) * sr, sin(s) * sr);\n     m1 = createVector(cos(m) * mr, sin(m) * mr);\n     h1 = createVector(cos(h) * hr, sin(h) * hr);\n\n     if (mov == 1) {\n          sro = createVector(cos(sec * 2.6) * ra \/ 10, sin(sec * 2.6) * ra \/ 10);\n          s1 = s1.add(sro);\n          mro = createVector(cos(sec * 2.6) * ra \/ 30, sin(sec * 2.6) * ra \/ 30);\n          m1 = m1.add(mro);\n          hro = createVector(cos(sec * 2.6) * ra \/ 50, sin(sec * 2.6) * ra \/ 50);\n          h1 = h1.add(hro);\n     }\n     Pts2 = [s1.x + xr1 \/ 2, s1.y - yr1 \/ 2, ws, m1.x + xr1 \/ 2, m1.y - yr1 \/ 2, wm, h1.x + xr1 \/ 2, h1.y - yr1 \/ 2, wh, 0.0 + xr1 \/ 2, 0.0 - yr1 \/ 2, wc];\n\n\n\n}\n\nfunction mousePressed() {\n     if (cl == false) {\n          cl = true;\n     } else {\n          cl = false;\n     }\n}\n\nfunction mousePressed() {\n     if (cl == false) {\n          cl = true;\n     } else {\n          cl = false;\n     }\n}\n\nfunction keyPressed() {\n     if (keyCode === 87) {\n          if (w == false) {\n               w = true;\n          } else {\n               w = false;\n          }\n     }\n     if (keyCode === 83) {\n          save(cnv, floor(h2) + \"-\" + floor(m2) + \"-\" + round(s2, 2) + \"_\" + tokenData.hash + \".png\");\n     }\n}\n\nfunction sU(a, b) {\n     maSh.setUniform(a, b);\n}"
}