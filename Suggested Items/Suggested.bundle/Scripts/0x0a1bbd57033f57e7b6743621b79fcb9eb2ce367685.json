{
  "kind" : "p5js100",
  "screensaverFileName" : "89.Bright.x.Empty.Rooms",
  "value" : "var seed = parseInt(tokenData.hash.slice(0, 16), 16);\n\nlet projectNumber = Math.floor(parseInt(tokenData.tokenId) \/ 1000000);\nlet walletCount = parseInt(tokenData.tokenId) % 1000000;\n\nlet vertX = [0.59375, 0.40625, 0.59375, 0.40625, 0.59375, 0.40625];\nlet vertY = [0.75, 0.75, 0.5, 0.5, 0.25, 0.25];\nlet horiX = [0.75, 0.5, 0.25, 0.75, 0.5, 0.25];\nlet horiY = [0.59375, 0.59375, 0.59375, 0.40625, 0.40625, 0.40625];\nlet vertical;\nlet sixX, sixY;\nlet multiplyOn = false;\n\nlet mostShapeArr = [0, 0, 0, 0, 0, 0];\nlet shapesNames = [\"Sun\", \"Shard\", \"Cargo\", \"Hive\", \"Pyramid\", \"Moon\"];\n\np5.disableFriendlyErrors = true;\n\nlet rezs = [150, 200, 300];\nlet rezIndex = 2;\n\nlet lineThickness;\nlet lineDepth;\nlet lineLength;\nlet lineSpacing;\nlet depth = 255.0;\n\nlet displayRed = true;\nlet displayGreen = true;\nlet displayBlue = true;\n\nlet stillLifeDim = -1;\nlet stillLifeDepthNeg = 0;\nlet stillLifeDepthPos = 0;\nlet depthScalar = 1.0;\nlet speedScalar = 1.0;\nlet speeds = [0.25, 0.5, 1.0, 2.0, 0.0];\nlet speedIndex = 2;\nlet SEED = 0;\nlet lengthScalar = 1.3;\n\nlet combination = [];\n\nlet angle = 0.0;\n\nlet alphapix;\nlet overlay;\nlet cityNum;\n\nlet cla, cny, cberlin, ccdmx, clondon, ctokyo;\nlet s1, s2, s3, s4;\nlet sc;\nlet foregrounds = [];\nlet bColor = 246;\n\nlet shapes = [];\n\nlet gl;\nlet stillLifePO2 = 2;\nlet ext;\nlet pgl;\nlet viewDiagram = false;\nlet infoOverlay = false;\nlet viewMatrix;\nlet modelViewMatrix;\nlet dispMapTexture;\n\nlet CDMXSpin = 1;\n\nconst vertCode = `precision highp float;\nuniform mat4 uViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uModelViewProjectionMatrix;\nuniform vec2 canvasSize;\nuniform float stillLifeDim;\nuniform float stillLifePO2;\nuniform float stillLifeDepthNeg;\nuniform float stillLifeDepthPos;\nuniform float depthScalar;\nuniform float lineThickness;\nuniform float lineDepth;\nuniform float lineLength;\nuniform vec3 color;\nuniform sampler2D displacementMap;\nattribute vec3 coordinates;\n\nfloat map(float value, float min1, float max1, float min2, float max2)\n{\n    return min2 + (value - min1) * (max2 - min2) \/ (max1 - min1);\n}\n\nstruct Line\n{\n    vec3 start;\n    vec3 end;\n};\n\nLine getLineFromDisplacementMap(int x_origin, int y_origin)\n{\n    Line l;\n\n    vec2 imageCoords = vec2(x_origin, y_origin);\n    imageCoords.x += .5;\n    imageCoords.y += .5;\n\n    vec2 samplePos = imageCoords.xy\/stillLifePO2;\n    vec4 dispMapColor = texture2D(displacementMap, samplePos);\n    float maxEdge = max(canvasSize.x, canvasSize.y);\n\n    float x = float(x_origin);\n    float y = float(y_origin);\n    float z = map(dot(dispMapColor.xyz, color), 0.0, 1.0, -stillLifeDepthNeg, stillLifeDepthPos);\n\n    l.start.x = map(x, 0.0, stillLifeDim, -maxEdge \/ 2.0, maxEdge \/ 2.0);\n    l.start.y = map(y, 0.0, stillLifeDim, -maxEdge \/ 2.0, maxEdge \/ 2.0);\n    l.start.z = -z;\n\n    l.end.x = map(x, 0.0, stillLifeDim, -maxEdge \/ 2.0, maxEdge \/ 2.0) - lineDepth;\n    l.end.y = map(y, 0.0, stillLifeDim, -maxEdge \/ 2.0, maxEdge \/ 2.0) - lineDepth;\n    l.end.z = -lineLength - z;\n\n    return l;\n}\n\nvoid main()\n{\n    bool lineStart = false;\n    if (coordinates.y == 0.0) lineStart = true;\n    if (coordinates.y == 1.0) lineStart = true;\n    if (coordinates.y == 2.0) lineStart = false;\n    if (coordinates.y == 3.0) lineStart = true;\n    if (coordinates.y == 4.0) lineStart = false;\n    if (coordinates.y == 5.0) lineStart = false;\n\n    int imageCoordsY = int(floor(coordinates.x \/ stillLifeDim));\n    int imageCoordsX = int(floor(coordinates.x - float(imageCoordsY) * stillLifeDim));\n\n    Line l = getLineFromDisplacementMap(imageCoordsX, imageCoordsY);\n\n    vec3 vertexPosition;\n    if (lineStart) {\n        vertexPosition = l.start;\n    } else {\n        vertexPosition = l.end;\n    }\n\n    vec4 finalPos = vec4(vertexPosition, 1.0);\n    finalPos = uModelViewProjectionMatrix * finalPos;\n\n    vec4 projLineStart = uModelViewProjectionMatrix * vec4(l.start, 1.0);\n    vec4 projLineEnd = uModelViewProjectionMatrix * vec4(l.end, 1.0);\n    vec2 lineDirection = projLineStart.xy - projLineEnd.xy;\n    lineDirection = vec2(-lineDirection.y, lineDirection.x);\n    float maxEdge = max(canvasSize.x, canvasSize.y);\n    lineDirection \/= canvasSize \/ maxEdge;\n    vec2 displacement = normalize(lineDirection);\n    displacement \/= canvasSize;\n    displacement *= lineThickness;\n\n    if (coordinates.y == 0.0) finalPos.xy -= displacement;\n    if (coordinates.y == 2.0) finalPos.xy -= displacement;\n    if (coordinates.y == 5.0) finalPos.xy -= displacement;\n    if (coordinates.y == 1.0) finalPos.xy += displacement;\n    if (coordinates.y == 3.0) finalPos.xy += displacement;\n    if (coordinates.y == 4.0) finalPos.xy += displacement;\n\n    finalPos.z = 0.0;\n\n    gl_Position = finalPos;\n}\n`;\n\nconst fragCode = `precision highp float;\nuniform vec3 color;\nvoid main() {\n    gl_FragColor = vec4(color, 1.0);\n}\n`;\n\nlet triangle_buffer;\nlet numTris;\n\nfunction setupGeometry() {\n  let triangles = [];\n  numTris = 0;\n  for (let y = 0; y < rezs[rezIndex]; y += 1) {\n    for (let x = 0; x < rezs[rezIndex]; x += 1) {\n      triangles.push(x + y * stillLifeDim, 0, 0);\n      triangles.push(x + y * stillLifeDim, 1, 0);\n      triangles.push(x + y * stillLifeDim, 2, 0);\n      triangles.push(x + y * stillLifeDim, 3, 0);\n      triangles.push(x + y * stillLifeDim, 4, 0);\n      triangles.push(x + y * stillLifeDim, 5, 0);\n      numTris += 6;\n    }\n  }\n  triangle_buffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, triangle_buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(triangles), gl.STATIC_DRAW);\n  gl.bindBuffer(gl.ARRAY_BUFFER, null);\n}\n\nfunction setupShapes() {\n  let sss = 0.3;\n  shapes = [];\n  let currSet = all_sets[walletCount];\n  mostShapeArr = [0, 0, 0, 0, 0, 0];\n  if (vertical) {\n    sixX = vertX;\n    sixY = vertY;\n  } else {\n    sixX = horiX;\n    sixY = horiY;\n  }\n  let currShapesArr = [];\n  for (let currCombo = 0; currCombo < currSet.length; currCombo++) {\n    setupCombination(currSet[currCombo]);\n    for (let i = 0; i < combination.length; i++) {\n      currShapesArr.push(\n        new VShape(\n          -stillLifeDim * sixX[currCombo],\n          -stillLifeDim * sixY[currCombo],\n          stillLifeDim * sss,\n          combination[i]\n        )\n      );\n    }\n    shapes.push(currShapesArr);\n    currShapesArr = [];\n  }\n  theDetails();\n}\n\nfunction theDetails() {\n  let maxSide = max(width, height);\n  if (maxSide < 400) {\n    depthScalar = map(maxSide, 50, 400, 0.05, 0.3);\n  } else {\n    depthScalar = map(maxSide, 400, 3840, 0.3, 2.0);\n  }\n  stillLifeDepthNeg = 255.0 \/ 4;\n  stillLifeDepthPos = 255.0 \/ 4;\n  lengthScalar = 1.0;\n  let cityDigit = mostShapeArr.indexOf(Math.max(...mostShapeArr)) + 1;\n  if (cityDigit == 1) {\n    tokyoParams();\n  } else if (cityDigit == 2) {\n    berlinParams();\n  } else if (cityDigit == 3) {\n    londonParams();\n  } else if (cityDigit == 4) {\n    nycParams();\n  } else if (cityDigit == 5) {\n    cdmxParams();\n  } else {\n    laParams();\n  }\n}\n\nlet shaderProgram;\n\nfunction setupShaders() {\n  let vertShader = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(vertShader, vertCode);\n  gl.compileShader(vertShader);\n\n  const vertError = gl.getShaderInfoLog(vertShader);\n  if (vertError.length > 0) {\n    throw vertError;\n  }\n\n  let fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n  gl.shaderSource(fragShader, fragCode);\n  gl.compileShader(fragShader);\n\n  const fragError = gl.getShaderInfoLog(fragShader);\n  if (fragError.length > 0) {\n    throw fragError;\n  }\n\n  shaderProgram = gl.createProgram();\n  gl.attachShader(shaderProgram, vertShader);\n  gl.attachShader(shaderProgram, fragShader);\n  gl.linkProgram(shaderProgram);\n}\n\nfunction createDisplacementMapTexture() {\n  dispMapTexture = gl.createTexture();\n  while (stillLifePO2 < stillLifeDim) {\n    stillLifePO2 *= 2;\n  }\n}\n\nfunction transferDisplacementMap() {\n  let img = alphapix.get();\n  img.loadPixels();\n\n  let uvTexture = Array(stillLifePO2 * stillLifePO2 * 4).fill(255);\n\n  const randomStuff = new Uint8Array(uvTexture);\n  for (let x = 0; x < stillLifeDim; ++x) {\n    for (let y = 0; y < stillLifeDim; ++y) {\n      const index1 = 4 * (y * stillLifePO2 + x);\n      const index2 = 4 * (y * stillLifeDim + x);\n      randomStuff[index1 + 0] = img.pixels[index2 + 0];\n      randomStuff[index1 + 1] = img.pixels[index2 + 1];\n      randomStuff[index1 + 2] = img.pixels[index2 + 2];\n    }\n  }\n\n  gl.bindTexture(gl.TEXTURE_2D, dispMapTexture);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    gl.RGBA,\n    stillLifePO2,\n    stillLifePO2,\n    0,\n    gl.RGBA,\n    gl.UNSIGNED_BYTE,\n    randomStuff\n  );\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.bindTexture(gl.TEXTURE_2D, null);\n\n  gl.activeTexture(gl.TEXTURE2);\n  gl.bindTexture(gl.TEXTURE_2D, dispMapTexture);\n\n  const displaceMapLocation = gl.getUniformLocation(\n    shaderProgram,\n    \"displacementMap\"\n  );\n  gl.uniform1i(displaceMapLocation, 2);\n}\n\nfunction setMatrices() {\n  const viewMatrix = this._renderer._curCamera.cameraMatrix;\n  const projectionMatrix = this._renderer.uPMatrix;\n  const modelViewMatrix = this._renderer.uMVMatrix;\n  const modelViewProjectionMatrix = modelViewMatrix.copy();\n  modelViewProjectionMatrix.mult(projectionMatrix);\n\n  gl.uniformMatrix4fv(\n    gl.getUniformLocation(shaderProgram, \"uViewMatrix\"),\n    false,\n    viewMatrix.mat4\n  );\n  gl.uniformMatrix4fv(\n    gl.getUniformLocation(shaderProgram, \"uProjectionMatrix\"),\n    false,\n    projectionMatrix.mat4\n  );\n  gl.uniformMatrix4fv(\n    gl.getUniformLocation(shaderProgram, \"uModelViewMatrix\"),\n    false,\n    modelViewMatrix.mat4\n  );\n  gl.uniformMatrix4fv(\n    gl.getUniformLocation(shaderProgram, \"uModelViewProjectionMatrix\"),\n    false,\n    modelViewProjectionMatrix.mat4\n  );\n}\n\nfunction setUniforms() {\n  gl.uniform2f(\n    gl.getUniformLocation(shaderProgram, \"canvasSize\"),\n    width,\n    height\n  );\n  gl.uniform1f(\n    gl.getUniformLocation(shaderProgram, \"stillLifeDim\"),\n    stillLifeDim\n  );\n  gl.uniform1f(\n    gl.getUniformLocation(shaderProgram, \"stillLifePO2\"),\n    stillLifePO2\n  );\n  gl.uniform1f(\n    gl.getUniformLocation(shaderProgram, \"depthScalar\"),\n    depthScalar\n  );\n  gl.uniform1f(\n    gl.getUniformLocation(shaderProgram, \"stillLifeDepthNeg\"),\n    stillLifeDepthNeg * depthScalar\n  );\n  gl.uniform1f(\n    gl.getUniformLocation(shaderProgram, \"stillLifeDepthPos\"),\n    stillLifeDepthPos * depthScalar\n  );\n  gl.uniform1f(\n    gl.getUniformLocation(shaderProgram, \"lineThickness\"),\n    lineThickness\n  );\n  gl.uniform1f(gl.getUniformLocation(shaderProgram, \"lineLength\"), lineLength);\n  gl.uniform1f(gl.getUniformLocation(shaderProgram, \"lineDepth\"), lineDepth);\n}\n\nfunction beginLinesShader() {\n  gl.useProgram(shaderProgram);\n  gl.bindBuffer(gl.ARRAY_BUFFER, triangle_buffer);\n\n  transferDisplacementMap();\n  setUniforms();\n\n  const coord = gl.getAttribLocation(shaderProgram, \"coordinates\");\n  gl.vertexAttribPointer(coord, 3, gl.FLOAT, false, 0, 0);\n  gl.enableVertexAttribArray(coord);\n\n  gl.enable(gl.BLEND);\n  gl.disable(gl.DEPTH_TEST);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  gl.viewport(0, 0, canvas.width, canvas.height);\n}\n\nfunction endLinesShader() {\n  gl.useProgram(null);\n}\n\nfunction drawLines() {\n  beginLinesShader();\n\n  setMatrices();\n  gl.uniform3f(gl.getUniformLocation(shaderProgram, \"color\"), 1, 1, 0);\n  if (displayRed) {\n    gl.drawArrays(gl.TRIANGLES, 0, numTris);\n  }\n\n  translate(lineSpacing, 0.0, 0.1);\n  setMatrices();\n  gl.uniform3f(gl.getUniformLocation(shaderProgram, \"color\"), 0, 1, 1);\n  if (displayGreen) {\n    gl.drawArrays(gl.TRIANGLES, 0, numTris);\n  }\n\n  translate(lineSpacing, 0.0, 0.1);\n  setMatrices();\n  gl.uniform3f(gl.getUniformLocation(shaderProgram, \"color\"), 1, 0, 1);\n  if (displayBlue) {\n    gl.drawArrays(gl.TRIANGLES, 0, numTris);\n  }\n  endLinesShader();\n}\n\nfunction setupTransform() {\n  ortho();\n  scale(1.45);\n  rotateY(0.33);\n  rotateX(-0.33);\n}\n\nfunction setupCombination(code) {\n  combination = [];\n  let comb = str(code);\n  for (let i = 0; i < comb.length; i++) {\n    let char = comb[i];\n    if (char != \"0\") {\n      mostShapeArr[char - 1] += 1;\n      let c = int(comb[i]) - 1;\n      combination.push(c);\n    }\n  }\n}\n\nfunction defineColors() {\n  let aaa = 254;\n  ctokyo = color(227, 143, 53, aaa);\n  cberlin = color(53, 155, 227, aaa);\n  clondon = color(231, 71, 71, aaa);\n  cny = color(166, 79, 206, aaa);\n  ccdmx = color(76, 205, 82, aaa);\n  cla = color(238, 211, 30, aaa);\n  foregrounds = [ctokyo, cberlin, clondon, cny, ccdmx, cla];\n  s1 = color(255, 226, 204);\n  s2 = color(204, 255, 226);\n  s3 = color(225, 204, 226);\n  s4 = color(164, 204, 255);\n  sc = [s1, s2, s3, s4];\n}\n\nfunction changeAspectRatio() {\n  if (vertical) {\n    sixX = horiX;\n    sixY = horiY;\n  } else {\n    sixX = vertX;\n    sixY = vertY;\n  }\n  vertical = !vertical;\n  for (let i = 0; i < shapes.length; i++) {\n    for (let j = 0; j < shapes[i].length; j++) {\n      shapes[i][j].changeXandY(\n        -stillLifeDim * sixX[i],\n        -stillLifeDim * sixY[i]\n      );\n    }\n  }\n}\n\nfunction allCenter() {\n  for (let i = 0; i < shapes.length; i++) {\n    for (let j = 0; j < shapes[i].length; j++) {\n      shapes[i][j].changeXandY(-stillLifeDim * 0.5, -stillLifeDim * 0.5);\n      shapes[i][j].changeScale(3.0);\n    }\n  }\n}\n\nfunction allRandom() {\n  for (let i = 0; i < shapes.length; i++) {\n    for (let j = 0; j < shapes[i].length; j++) {\n      shapes[i][j].changeXandY(\n        -stillLifeDim * r.rb(0, 1),\n        -stillLifeDim * r.rb(0, 1)\n      );\n      shapes[i][j].changeScale(1.5);\n    }\n  }\n}\n\nfunction allGrid() {\n  for (let i = 0; i < shapes.length; i++) {\n    for (let j = 0; j < shapes[i].length; j++) {\n      shapes[i][j].changeXandY(\n        -stillLifeDim * sixX[i],\n        -stillLifeDim * sixY[i]\n      );\n      shapes[i][j].changeScale(1.0);\n    }\n  }\n}\n\nfunction windowResized() {\n  resizeCanvas(windowWidth, windowHeight);\n  if (windowWidth > windowHeight && vertical) {\n    changeAspectRatio();\n  } else if (windowHeight > windowWidth && !vertical) {\n    changeAspectRatio();\n  }\n}\n\nfunction setup() {\n  createCanvas(windowWidth, windowHeight, WEBGL);\n  if (windowWidth > windowHeight) {\n    vertical = false;\n  } else if (windowHeight > windowWidth) {\n    vertical = true;\n  }\n\n  r = new RND(seed);\n\n  defineColors();\n  imageMode(CENTER);\n  gl = document.getElementById(\"defaultCanvas0\").getContext(\"webgl\");\n  stillLifeDim = rezs[rezIndex];\n  alphapix = createGraphics(stillLifeDim, stillLifeDim, WEBGL);\n  pgl = alphapix._renderer.GL;\n  pgl.disable(gl.DEPTH_TEST);\n\n  overlay = createGraphics(1200, 1200);\n\n  setupShaders();\n  doIt();\n}\n\nfunction doIt() {\n  stillLifeDim = rezs[rezIndex];\n  alphapix.resizeCanvas(stillLifeDim, stillLifeDim);\n  setupShapes();\n  setupGeometry();\n  createDisplacementMapTexture();\n  createStillLife();\n}\n\nfunction createGround() {\n  if (speedIndex != 4) {\n    angle += 0.0005;\n  }\n  let ss = map(sin(angle), -1, 1, 0, 1);\n  let c1 = lerpColor(sc[0], sc[1], ss);\n  let c2 = lerpColor(sc[1], sc[2], ss);\n  let c3 = lerpColor(sc[2], sc[3], ss);\n  let c4 = lerpColor(sc[3], sc[1], ss);\n  alphapix.background(255);\n  alphapix.blendMode(BLEND);\n  alphapix.beginShape();\n  alphapix.fill(c1);\n  alphapix.vertex(-alphapix.width \/ 2, -alphapix.height \/ 2);\n  alphapix.fill(c2);\n  alphapix.vertex(alphapix.width \/ 2, -alphapix.height \/ 2);\n  alphapix.fill(c3);\n  alphapix.vertex(alphapix.width \/ 2, alphapix.height \/ 2);\n  alphapix.fill(c4);\n  alphapix.vertex(-alphapix.width \/ 2, alphapix.height \/ 2);\n  alphapix.endShape();\n}\n\nfunction createStillLife() {\n  createGround();\n  if (multiplyOn) {\n    alphapix.blendMode(MULTIPLY);\n  } else {\n    alphapix.blendMode(BLEND);\n  }\n  for (let i = 0; i < shapes.length; i++) {\n    for (let j = 0; j < shapes[i].length; j++) {\n      shapes[i][j].move();\n      shapes[i][j].display(alphapix);\n    }\n  }\n}\n\nfunction makeOverlay() {\n  push();\n  switch (cityNum) {\n    case 1:\n      overlay.background(128, 255, 128);\n      break;\n    case 2:\n      overlay.background(204, 204, 255);\n      break;\n    case 3:\n      overlay.background(255, 255, 0);\n      break;\n    case 4:\n      overlay.background(255, 0, 255);\n      break;\n    case 5:\n      overlay.background(0, 255, 255);\n      break;\n    case 6:\n      overlay.background(255, 191, 64);\n      break;\n    default:\n      overlay.background(0);\n  }\n\n  const totalShapes = mostShapeArr.reduce((a, b) => a + b, 0);\n  const mostUsed = Math.max(...mostShapeArr);\n  const indices = mostShapeArr.reduce((result, element, index) => {\n    if (element == mostUsed) {\n      result.push(index);\n    }\n    return result;\n  }, []);\n\n  let totalLinesPx = 568 + 36 + indices.length * 44;\n  let lineCoord = (1200 - totalLinesPx) \/ 2;\n\n  fill(0, 0, 0);\n  noStroke();\n  overlay.textAlign(CENTER, TOP);\n  overlay.textFont(\"Arial\", 36);\n\n  overlay.text(\"Wallet:\", 600, lineCoord);\n  lineCoord += 44;\n  overlay.text(all_wallets[walletCount], 600, lineCoord);\n  lineCoord += 72;\n\n  overlay.text(\"Sets:\", 600, lineCoord);\n  lineCoord += 44;\n  overlay.text(all_sets[walletCount].join(\" \"), 600, lineCoord);\n  lineCoord += 72;\n\n  overlay.text(totalShapes.toString() + \" Total Shapes: \", 600, lineCoord);\n  for (let i = 0; i < mostShapeArr.length; i++) {\n    lineCoord += 44;\n    if (mostShapeArr[i] == 1) {\n      overlay.text(\n        mostShapeArr[i].toString() + \" \" + shapesNames[i],\n        600,\n        lineCoord\n      );\n    } else {\n      overlay.text(\n        mostShapeArr[i].toString() + \" \" + shapesNames[i] + \"s\",\n        600,\n        lineCoord\n      );\n    }\n  }\n  lineCoord += 72;\n\n  overlay.text(\"Most Used Shape:\", 600, lineCoord);\n  if (indices.length > 1) {\n    for (let iShape = 0; iShape < indices.length; iShape++) {\n      lineCoord += 44;\n      if (mostUsed > 1) {\n        overlay.text(\n          mostUsed.toString() +\n            \" \" +\n            shapesNames[indices[iShape]].toString() +\n            \"s\",\n          600,\n          lineCoord\n        );\n      } else {\n        overlay.text(\n          mostUsed.toString() + \" \" + shapesNames[indices[iShape]].toString(),\n          600,\n          lineCoord\n        );\n      }\n    }\n  } else {\n    lineCoord += 44;\n    overlay.text(\n      mostUsed.toString() + \" \" + shapesNames[indices[0]].toString() + \"s\",\n      600,\n      lineCoord\n    );\n  }\n  pop();\n}\n\nfunction draw() {\n  let scaleFactor = max(width, height) \/ 1200.0;\n  if (rezIndex == 2) {\n    lineThickness = 1.66 * scaleFactor;\n    lineLength = 3.0 * lengthScalar * scaleFactor;\n  } else if (rezIndex == 0) {\n    lineThickness = 3.33 * scaleFactor;\n    lineLength = 8.0 * lengthScalar * scaleFactor;\n  } else {\n    lineThickness = 2.22 * scaleFactor;\n    lineLength = 12.0 * lengthScalar * scaleFactor;\n  }\n\n  lineDepth = 2 * scaleFactor;\n  lineSpacing = 2.22 * scaleFactor;\n  createStillLife();\n  background(bColor);\n\n  push();\n  setupTransform();\n  drawLines();\n  pop();\n\n  if (viewDiagram) {\n    fill(255);\n    noStroke();\n    rect(0, 0, -stillLifeDim \/ 2, -stillLifeDim \/ 2);\n    image(alphapix, 0, 0);\n  }\n\n  if (infoOverlay) {\n    push();\n    makeOverlay();\n    rectMode(CENTER);\n    fill(255);\n    noStroke();\n    rect(0, 0, max(width, height) \/ 3, max(width, height) \/ 3);\n    image(overlay, 0, 0, max(width, height) \/ 3, max(width, height) \/ 3);\n    pop();\n  }\n\n  if (speedIndex != 4) {\n    CDMXSpin++;\n  }\n}\n\nclass VShape {\n  constructor(xin, yin, uin, win) {\n    this.scale = 1.0;\n    this.targetScale = 1.0;\n    this.scaleStep = 0.2;\n\n    this.dia = uin * 0.75;\n    this.mdia = uin * 0.8;\n    this.rdia = uin * 0.66;\n    this.ddia = uin * 0.55;\n\n    this.tdia = uin * 0.8;\n    this.tdia2 = uin * 0.7;\n\n    this.hu = uin * 0.5;\n    this.qr1 = uin * 0.3;\n    this.qr2 = uin * 0.2;\n    this.sr = uin * 0.4;\n    this.unit = stillLifeDim;\n    this.x = xin;\n    this.y = yin;\n    this.rx = this.x + (this.unit - this.rdia) \/ 2;\n    this.ry = this.y + (this.unit - this.rdia) \/ 2;\n    this.cx = this.x + this.unit \/ 2;\n    this.cy = this.y + this.unit \/ 2;\n\n    this.cindex = win;\n    this.sindex = win;\n\n    this.movex = r.rb(0, TWO_PI);\n    this.movey = r.rb(0, TWO_PI);\n\n    this.hexx = uin * 0.2;\n    this.hexy = uin * 0.346;\n\n    this.moonAngle = r.rb(0, TWO_PI);\n\n    this.moveyval = r.rb(0.0005, 0.002);\n    this.movexval = r.rb(0.0005, 0.002);\n    if (r.rb(1) > 0.5) {\n      this.moveyval *= -1;\n    }\n    if (r.rb(1) > 0.5) {\n      this.movexval *= -1;\n    }\n  }\n\n  resetScale() {\n    this.targetScale = 1.0;\n  }\n\n  upScale() {\n    this.targetScale += this.scaleStep;\n  }\n\n  downScale() {\n    this.targetScale -= this.scaleStep;\n    this.targetScale = max(0.0, this.targetScale);\n  }\n\n  changeScale(newScale) {\n    this.targetScale = newScale;\n  }\n\n  move() {\n    this.movex += this.movexval * speedScalar;\n    this.movey += this.moveyval * speedScalar;\n    this.scale = (this.targetScale - this.scale) * 0.05 + this.scale;\n  }\n\n  changeXandY(xin, yin) {\n    this.x = xin;\n    this.y = yin;\n    this.rx = this.x + (this.unit - this.rdia) \/ 2;\n    this.ry = this.y + (this.unit - this.rdia) \/ 2;\n    this.cx = this.x + this.unit \/ 2;\n    this.cy = this.y + this.unit \/ 2;\n  }\n\n  display(pg) {\n    if (this.sindex == 0) {\n      this.sTokyo(pg);\n    } else if (this.sindex == 1) {\n      this.sBerlin(pg);\n    } else if (this.sindex == 2) {\n      this.sLondon(pg);\n    } else if (this.sindex == 3) {\n      this.sNYC(pg);\n    } else if (this.sindex == 4) {\n      this.sCDMX(pg);\n    } else if (this.sindex == 5) {\n      this.sLA(pg);\n    }\n  }\n\n  sTokyo(pg) {\n    pg.noStroke();\n    pg.push();\n    pg.translate(this.cx, this.cy);\n    pg.scale(this.scale);\n    pg.rotateY(this.movey);\n    pg.rotateX(this.movex);\n    pg.fill(foregrounds[this.cindex]);\n    pg.ellipse(0, 0, this.dia, this.dia);\n    pg.pop();\n  }\n\n  sBerlin(pg) {\n    pg.noStroke();\n    pg.fill(foregrounds[this.cindex]);\n    pg.push();\n    pg.beginShape();\n    pg.translate(this.cx, this.cy);\n    pg.scale(this.scale);\n    pg.rotateX(this.movex);\n    pg.rotateY(this.movey);\n    pg.vertex(-this.qr1, -this.hu);\n    pg.vertex(this.qr1, -this.qr2);\n    pg.vertex(this.qr1, this.hu);\n    pg.vertex(-this.qr1, this.qr2);\n    pg.endShape();\n    pg.pop();\n  }\n\n  sLondon(pg) {\n    pg.push();\n    pg.translate(this.rx + this.rdia \/ 2, this.ry + this.rdia \/ 2);\n    pg.scale(this.scale);\n    pg.rotateY(this.movey);\n    pg.rotateX(this.movex);\n    pg.noStroke();\n    pg.fill(foregrounds[this.cindex]);\n    pg.beginShape();\n    pg.vertex(-this.rdia \/ 2, -this.rdia \/ 2);\n    pg.vertex(this.rdia \/ 2, -this.rdia \/ 2);\n    pg.vertex(this.rdia \/ 2, this.rdia \/ 2);\n    pg.vertex(-this.rdia \/ 2, this.rdia \/ 2);\n    pg.endShape();\n    pg.pop();\n  }\n\n  sNYC(pg) {\n    pg.push();\n    pg.translate(this.rx + this.rdia \/ 2, this.ry + this.rdia \/ 2);\n    pg.scale(this.scale);\n    pg.rotateY(this.movey);\n    pg.rotateX(this.movex);\n    pg.noStroke();\n    pg.fill(foregrounds[this.cindex]);\n    pg.beginShape();\n    pg.vertex(this.hexx, -this.hexy);\n    pg.vertex(this.hexx * 2, 0);\n    pg.vertex(this.hexx, this.hexy);\n    pg.vertex(-this.hexx, this.hexy);\n    pg.vertex(-this.hexx * 2, 0);\n    pg.vertex(-this.hexx, -this.hexy);\n    pg.endShape();\n    pg.pop();\n  }\n\n  sCDMX(pg) {\n    pg.push();\n    pg.translate(this.rx + this.rdia \/ 2, this.ry + this.rdia \/ 2.66);\n    pg.scale(this.scale);\n    pg.rotateY(this.movey);\n    pg.rotateX(this.movex);\n    pg.rotateZ(CDMXSpin \/ 1000.0);\n    pg.noStroke();\n    pg.fill(foregrounds[this.cindex]);\n    pg.beginShape();\n    pg.vertex(0, -this.tdia \/ 2);\n    pg.vertex(this.tdia \/ 2, this.tdia2 \/ 2);\n    pg.vertex(-this.tdia \/ 2, this.tdia2 \/ 2);\n    pg.endShape();\n    pg.pop();\n  }\n\n  sLA(pg) {\n    pg.noStroke();\n    pg.fill(foregrounds[this.cindex]);\n    pg.push();\n    pg.translate(this.cx, this.cy);\n    pg.scale(this.scale);\n    pg.rotate(this.moonAngle);\n    pg.rotateX(this.movex);\n    pg.rotateY(this.movey);\n    pg.rotateZ(CDMXSpin \/ 1000.0);\n    pg.arc(0, 0, this.mdia, this.mdia, 0.7, TWO_PI - 0.7, CHORD);\n    pg.pop();\n  }\n}function tokyoParams() {\n  displayRed = true;\n  displayGreen = true;\n  displayBlue = true;\n  bColor = 246;\n  lengthScalar = 0.8;\n  cityNum = 1;\n}\n\nfunction berlinParams() {\n  displayRed = false;\n  displayGreen = true;\n  displayBlue = true;\n  bColor = 15;\n  lengthScalar = 0.5;\n  cityNum = 2;\n}\n\nfunction londonParams() {\n  displayRed = true;\n  displayGreen = false;\n  displayBlue = true;\n  bColor = 246;\n  lengthScalar = 0.5;\n  cityNum = 3;\n}\n\nfunction nycParams() {\n  displayRed = false;\n  displayGreen = false;\n  displayBlue = true;\n  bColor = 246;\n  lengthScalar = 0.7;\n  cityNum = 4;\n}\n\nfunction cdmxParams() {\n  displayRed = false;\n  displayGreen = true;\n  displayBlue = false;\n  bColor = 51;\n  lengthScalar = 0.7;\n  cityNum = 5;\n}\n\nfunction laParams() {\n  displayRed = true;\n  displayGreen = true;\n  displayBlue = true;\n  bColor = 26;\n  lengthScalar = 0.8;\n  cityNum = 6;\n}\n\nfunction keyPressed() {\n  if (key == \"=\" || key == \"+\") {\n    for (let i = 0; i < shapes.length; i++) {\n      for (let j = 0; j < shapes[i].length; j++) {\n        shapes[i][j].upScale();\n      }\n    }\n  } else if (key == \"-\" || key == \"_\") {\n    for (let i = 0; i < shapes.length; i++) {\n      for (let j = 0; j < shapes[i].length; j++) {\n        shapes[i][j].downScale();\n      }\n    }\n  } else if (key == \"d\" || key == \"D\") {\n    viewDiagram = !viewDiagram;\n  } else if (key == \" \") {\n    bColor -= 26;\n    if (bColor <= 0) {\n      bColor = 255;\n    }\n  } else if (key == \"r\" || key == \"R\") {\n    displayRed = !displayRed;\n  } else if (key == \"g\" || key == \"G\") {\n    displayGreen = !displayGreen;\n  } else if (key == \"b\" || key == \"B\") {\n    displayBlue = !displayBlue;\n  } else if (key == \"1\") {\n    tokyoParams();\n  } else if (key == \"2\") {\n    berlinParams();\n  } else if (key == \"3\") {\n    londonParams();\n  } else if (key == \"4\") {\n    nycParams();\n  } else if (key == \"5\") {\n    cdmxParams();\n  } else if (key == \"6\") {\n    laParams();\n  } else if (keyCode == UP_ARROW) {\n    stillLifeDepthNeg += 26;\n    stillLifeDepthPos += 26;\n  } else if (keyCode == DOWN_ARROW) {\n    stillLifeDepthNeg -= 26;\n    stillLifeDepthPos -= 26;\n  } else if (key == \"s\" || key == \"S\") {\n    speedIndex++;\n    speedIndex = speedIndex % speeds.length;\n    speedScalar = speeds[speedIndex];\n  } else if (key == \"0\") {\n    lengthScalar += 0.2;\n  } else if (key == \"9\") {\n    if (lengthScalar > 0.4) {\n      lengthScalar -= 0.2;\n    }\n  } else if (key == \"t\" || key == \"T\") {\n    rezIndex++;\n    if (rezIndex >= rezs.length) {\n      rezIndex = 0;\n    }\n    doIt();\n  } else if (key == \"p\" || key == \"P\") {\n    saveCanvas(\n      nf(walletCount, 3) + \"-\" + walletCount + \"-\" + frameCount + \".png\",\n      0,\n      0,\n      width,\n      height\n    );\n  } else if (key == \"e\" || key == \"E\") {\n    allCenter();\n  } else if (key == \"w\" || key == \"W\") {\n    allRandom();\n  } else if (key == \"q\" || key == \"Q\") {\n    allGrid();\n  } else if (key == \"x\" || key == \"X\") {\n    multiplyOn = !multiplyOn;\n  } else if (key == \"i\" || key == \"I\") {\n    infoOverlay = !infoOverlay;\n  }\n}\n\nclass RND {\n  constructor(seed) {\n    this.seed = seed;\n  }\n  rd() {\n    this.seed ^= this.seed << 13;\n    this.seed ^= this.seed >> 17;\n    this.seed ^= this.seed << 5;\n    return ((this.seed < 0 ? ~this.seed + 1 : this.seed) % 1000) \/ 1000;\n  }\n  rb(a, b) {\n    return a + (b - a) * this.rd();\n  }\n}\n\nlet all_wallets = [\n  \"0x015Dba998332771212F9d6D3536eCFa95a1cF8e6\",\n  \"0x0871E6872f0CdEb32eb013648a76575B4d2dBa80\",\n  \"0x0D13A6950A3d2B982EcD6Eb130FAF20cFDacD928\",\n  \"0x113d754Ff2e6Ca9Fd6aB51932493E4F9DabdF596\",\n  \"0x113d754Ff2e6Ca9Fd6aB51932493E4F9DabdF596\",\n  \"0x113d754Ff2e6Ca9Fd6aB51932493E4F9DabdF596\",\n  \"0x113d754Ff2e6Ca9Fd6aB51932493E4F9DabdF596\",\n  \"0x113d754Ff2e6Ca9Fd6aB51932493E4F9DabdF596\",\n  \"0x113d754Ff2e6Ca9Fd6aB51932493E4F9DabdF596\",\n  \"0x113d754Ff2e6Ca9Fd6aB51932493E4F9DabdF596\",\n  \"0x146D745139d417B8b5A1190cC73b34D7D37A9bBa\",\n  \"0x1F5743DF7C907a74C8cC28Fe0E27c575830AC6A6\",\n  \"0x222f6Df5B750Eb55234DA53d370bB2e8F5a1651d\",\n  \"0x231595E3673a10e846803194f4982E1CF3389161\",\n  \"0x231595E3673a10e846803194f4982E1CF3389161\",\n  \"0x23787626349Cc170bFC512E5b5E3D3F44e00D02D\",\n  \"0x255EeFD8307B3878be1E620FBd6A0ffA193B1CC5\",\n  \"0x2586319850DEfD14dBFa93fE588780FDEA0d4336\",\n  \"0x269D89631ba588a6994bF5A0DccB2A86573781fC\",\n  \"0x27Ae95688aEDef0a38AbEb9f5d4d494Fc7CeB4c8\",\n  \"0x27Eb78C1Eade6fc040d25b94E7acf6BBe0689F0A\",\n  \"0x2B85f187f13e8fc5DB2dEC5027889e9Dfd0bC348\",\n  \"0x2E23433769DB1505230A97EF9a7327E0224e480F\",\n  \"0x2E23433769DB1505230A97EF9a7327E0224e480F\",\n  \"0x2E23433769DB1505230A97EF9a7327E0224e480F\",\n  \"0x32c5299093a3F9D412EA0EB7a2B3D757810f795B\",\n  \"0x3a9139477D5cf400F843407D0Be1ABf9e130FE5C\",\n  \"0x415398D5d063677E210F7E66087898A1719D0FD3\",\n  \"0x457ee5f723C7606c12a7264b52e285906F91eEA6\",\n  \"0x457ee5f723C7606c12a7264b52e285906F91eEA6\",\n  \"0x484585fe5B976C2AFAC0f2c912447059EF41bf78\",\n  \"0x49C7B3cDA921DEe28B0493f60d4AfA57663ebEF2\",\n  \"0x4c40Ce702C4A1A7A231f513A27748ed1Ec258bAF\",\n  \"0x4d6703cE6cC2Af54114f878E2f2500506b67484B\",\n  \"0x4dE89162f766eeb2B0ed7DEc561F91f87DD50dc9\",\n  \"0x51e5152bcd6ebeA8Aa64578C8Ba51E9C6d0bf435\",\n  \"0x51ec5e1b8B3C4C6baE49619e657F94C4AD577b45\",\n  \"0x5772e36143277356fCB562a124613C99f3502aE7\",\n  \"0x598A0aD5e6229dBca38186e9441D73e15Cad652a\",\n  \"0x5a5617BA16Beba3d04ae3C6b1e9d522c1856763C\",\n  \"0x5aA7652ff7A493bAa40F50121b6D3040Da02997F\",\n  \"0x616eb98d0BbE7581bd78c6BE56Ea6D349Cb72229\",\n  \"0x685e34c6A94F330fa494D708b652261140b55aBA\",\n  \"0x6B69edF4667FFbdF0Aa7D52e99F9e7Fce8174AbA\",\n  \"0x75256A46E98Eb0F9c4eefc197eb3DD88d559a771\",\n  \"0x7614114828F5B2dA4C6A6366EeaE91912Cb376Bf\",\n  \"0x76b1F80D532c7496a95e8b4714dF239e29922302\",\n  \"0x778379CA63D4C7A1dc0B20555bD4fB077CB9748a\",\n  \"0x77DA0BD38461d28eE1299dbA1343288Cbe113Ab3\",\n  \"0x789a5b918B997B5A2FEc160ceaa12765f5Ff43Ec\",\n  \"0x7925Edf88700d82Fe3779cc98F8B8b686b6Ac82a\",\n  \"0x7bd5Bbda0a483A62dcA7d8Ba72D53fd278069c02\",\n  \"0x7EaBFE610657218bB4FD5620ED699B14dE305412\",\n  \"0x7EaBFE610657218bB4FD5620ED699B14dE305412\",\n  \"0x7EaBFE610657218bB4FD5620ED699B14dE305412\",\n  \"0x80222ae86eA5F27435D3cc8616a9dfE19e01b95A\",\n  \"0x8553f6Ca1993e502285fFa2053442c7ae921E2ae\",\n  \"0x8AcF08a19c2858a1C9aF39b0e52b0a253bEA3717\",\n  \"0x8cd40E173cA339AB333086300e26EB8538aA9866\",\n  \"0x8Dbbca57Ea56290Efa14D835bBfd34fAF1d89753\",\n  \"0x909a9160d4cd76505cee7F90E862A39541949f7f\",\n  \"0x911657c57B58567922a5712AeC5878502Dcd779b\",\n  \"0x9257C525A955497Ff54450Ca7C0E4359A0b44909\",\n  \"0x953BB3AA4671b859298D98F70890b510176aDD63\",\n  \"0x99e73A69536f7365fD4f2F2e5391f5dAa484b99b\",\n  \"0x99fc8AD516FBCC9bA3123D56e63A35d05AA9EFB8\",\n  \"0x9E174789337b6650fdBb77883f77FD99c2aF2f10\",\n  \"0xa0D62722c4B8624D8005883ECAaAd491f0C212DE\",\n  \"0xa3f81f0a82F2aF7549Ca9Dd10FA5e1D64d2Ea949\",\n  \"0xa5430730f12F1128bf10dfBa38c8e00bc4d90Eea\",\n  \"0xa9C538EA7cEc8e2e2dD9E869a36Af086F657708b\",\n  \"0xaa3c0FAa24E67eBe9B73Fe3efaf9D06F9Ba57622\",\n  \"0xaef7cDf5C0cE911E3491213A71bfC96cb28D5148\",\n  \"0xB96E81f80b3AEEf65CB6d0E280b15FD5DBE71937\",\n  \"0xbBA493459a48798b73522772AD31f2fdD854B534\",\n  \"0xbCE555FfE94290912240c9036C37F49DC5cC2cb8\",\n  \"0xC665A60F22dDa926B920DEB8FFAC0EF9D8a17460\",\n  \"0xCc9B2b1f639F477371A5d784a389965041d7a33e\",\n  \"0xda3c325aB45b30AeB476B026FE6A777443cA04f3\",\n  \"0xe0D209b7324d982BACb757F724EbE00a9792aC28\",\n  \"0xe3f663418251186888935dC1C4979FA3A3dA1bAC\",\n  \"0xe3f663418251186888935dC1C4979FA3A3dA1bAC\",\n  \"0xE4C6c46645988bBafd8ef6B4d1b60D969cC857C3\",\n  \"0xE5CA890A0eF2F128EB3267e4711c6bf3306Ec024\",\n  \"0xE6d4eA6c516b487f36e3F782f7043D7216a9C5bB\",\n  \"0xeE74258438bcd2882fe907C91a5371dc5dD5b0eE\",\n  \"0xeeA6486288645A2F8aA45FB00fbF5ba6a829a208\",\n  \"0xEEF66e0feaD02bD972b77bFcf421eCb3D4699169\",\n  \"0xf3860788D1597cecF938424bAABe976FaC87dC26\",\n];\nlet all_sets = [\n  [111222, 222660, 345600, 446600, 555200, 666110],\n  [111114, 223366, 333311, 444661, 555520, 612400],\n  [111260, 222331, 333316, 444136, 551120, 661340],\n  [111110, 222220, 333330, 444440, 555550, 666660],\n  [111111, 222211, 331000, 444113, 551160, 610000],\n  [111134, 222234, 333552, 444160, 552400, 612340],\n  [111145, 222400, 333556, 444225, 555223, 661235],\n  [111460, 223460, 335560, 444420, 555246, 666225],\n  [112256, 225600, 340000, 444446, 555540, 666334],\n  [123450, 222450, 350000, 444660, 555664, 666644],\n  [111345, 235600, 356000, 444300, 551000, 613000],\n  [111200, 222100, 335526, 444435, 555126, 661122],\n  [140000, 222245, 333300, 445500, 551230, 663315],\n  [111236, 221300, 335600, 416000, 555553, 662500],\n  [112200, 222140, 336650, 444230, 556600, 666124],\n  [111122, 245000, 346000, 445523, 555111, 666222],\n  [115524, 224600, 334000, 441300, 553000, 666624],\n  [111443, 235000, 335000, 415000, 556000, 661300],\n  [113344, 222460, 333340, 445560, 555442, 662340],\n  [112246, 222236, 333120, 441136, 513000, 661350],\n  [111660, 222216, 335500, 444423, 555666, 666450],\n  [113326, 221346, 333345, 442350, 555522, 661345],\n  [111112, 222110, 331246, 441125, 551130, 666230],\n  [111300, 222134, 333221, 444150, 551166, 666625],\n  [113350, 222260, 335540, 446623, 556620, 666630],\n  [113300, 221400, 333100, 443500, 551400, 666100],\n  [111140, 223344, 336640, 445510, 551240, 666613],\n  [111330, 222550, 333240, 444120, 555110, 666650],\n  [112346, 222333, 333224, 444350, 552360, 666553],\n  [111166, 222221, 333310, 444456, 555116, 666114],\n  [120000, 224450, 333554, 460000, 555334, 623000],\n  [114423, 222156, 314500, 444552, 555332, 666220],\n  [124000, 221000, 333000, 444000, 552000, 666000],\n  [111230, 224430, 332560, 445530, 552200, 612000],\n  [111334, 224435, 334460, 444555, 553460, 666125],\n  [112300, 223314, 333126, 441560, 555234, 661150],\n  [111240, 224455, 333456, 444335, 552216, 666500],\n  [111246, 222215, 335510, 444450, 555130, 661134],\n  [111000, 222000, 336000, 441000, 555000, 661100],\n  [112350, 222356, 333344, 446650, 555226, 661120],\n  [111446, 222255, 333146, 444336, 555236, 666250],\n  [111450, 221360, 333356, 446610, 551140, 666200],\n  [111256, 223450, 335512, 444360, 555134, 666440],\n  [124500, 222300, 331600, 426000, 526000, 666445],\n  [114560, 222213, 331245, 444415, 555240, 666551],\n  [111456, 222160, 333450, 441160, 551360, 665000],\n  [111120, 223350, 333140, 441600, 555300, 661240],\n  [123400, 222145, 334415, 444100, 552460, 666145],\n  [111234, 223356, 336600, 441200, 551134, 666443],\n  [111156, 222446, 333551, 444416, 555663, 663314],\n  [111550, 221450, 333350, 446000, 512000, 662215],\n  [111124, 222223, 333333, 444455, 555552, 666645],\n  [111130, 221350, 331145, 443600, 555443, 612300],\n  [114420, 222444, 333331, 444413, 556613, 662230],\n  [114500, 222551, 336624, 446635, 556634, 666224],\n  [113340, 221460, 333325, 442560, 551234, 661245],\n  [111556, 222600, 333160, 445566, 513600, 666350],\n  [111123, 224410, 333124, 444112, 555346, 666331],\n  [111335, 223400, 333600, 444332, 555512, 666612],\n  [111133, 222553, 333400, 445536, 555330, 663450],\n  [111333, 223316, 333666, 444410, 556612, 661130],\n  [114426, 223000, 334466, 446620, 551460, 666622],\n  [123000, 240000, 335520, 456000, 510000, 620000],\n  [111146, 222335, 333555, 441236, 555662, 613400],\n  [113325, 222334, 333116, 444330, 552300, 663500],\n  [110000, 230000, 360000, 440000, 560000, 661000],\n  [111336, 222235, 331260, 444412, 555221, 666123],\n  [123500, 224436, 345000, 441156, 555224, 666235],\n  [114600, 224500, 331200, 444250, 554600, 663000],\n  [111116, 222233, 333322, 444666, 555551, 666150],\n  [112240, 222115, 331240, 444662, 555136, 661133],\n  [113456, 222556, 333360, 444443, 551340, 666550],\n  [111224, 222116, 333315, 444422, 555544, 666130],\n  [100000, 200000, 300000, 400000, 500000, 600000],\n  [111560, 223560, 336625, 444663, 552214, 661200],\n  [111552, 222244, 333332, 444556, 555222, 666134],\n  [113460, 222250, 336645, 444436, 555524, 661450],\n  [111350, 222136, 333125, 444425, 555260, 662200],\n  [113500, 224000, 333200, 444200, 555600, 662300],\n  [134000, 224415, 331146, 444600, 555400, 662245],\n  [111665, 222665, 333335, 444466, 555523, 666113],\n  [113400, 222222, 333326, 444441, 555554, 666634],\n  [111664, 234600, 334456, 442500, 555660, 666335],\n  [111663, 221600, 333225, 441500, 555556, 666234],\n  [115600, 222445, 333246, 442600, 551300, 663400],\n  [112235, 222146, 333560, 442256, 552340, 666623],\n  [111160, 222440, 333334, 444411, 512360, 662450],\n  [111250, 222210, 334400, 444500, 555114, 660000],\n  [112000, 220000, 330000, 450000, 555560, 666330],\n];"
}