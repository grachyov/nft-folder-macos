{
  "abId" : "64",
  "address" : "0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270",
  "instructions" : "click for â™«\npress 's' for ðŸ“¸",
  "kind" : "tone",
  "name" : "AlgoRhythms",
  "screensaverFileName" : "AlgoRhythms",
  "value" : "(() => {\n     \"use strict\";\n     const e = (e, t, n) => ((e, t, n, s, i) => (e - 0) \/ 255 * (i - s) + s)(e, 0, 0, t, n),\n          t = e => {\n               let t = 0,\n                    n = 0,\n                    s = 0;\n               4 == e.length ? (t = \"0x\" + e[1] + e[1], n = \"0x\" + e[2] + e[2], s = \"0x\" + e[3] + e[3]) : 7 == e.length && (t = \"0x\" + e[1] + e[2], n = \"0x\" + e[3] + e[4], s = \"0x\" + e[5] + e[6]), t \/= 255, n \/= 255, s \/= 255;\n               let i = Math.min(t, n, s),\n                    a = Math.max(t, n, s),\n                    o = a - i,\n                    l = 0,\n                    h = 0,\n                    c = 0;\n               return l = 0 == o ? 0 : a == t ? (n - s) \/ o % 6 : a == n ? (s - t) \/ o + 2 : (t - n) \/ o + 4, l = Math.round(60 * l), l < 0 && (l += 360), c = (a + i) \/ 2, h = 0 == o ? 0 : o \/ (1 - Math.abs(2 * c - 1)), h = +(100 * h).toFixed(1), c = +(100 * c).toFixed(1), {\n                    h: l,\n                    s: h,\n                    l: c\n               }\n          },\n          n = (e, t) => {\n               let n = 0;\n               return t.find((t => (n += t.chance, n >= e))) || t[t.length - 1]\n          },\n          s = (e, t, n) => Math.max(t, Math.min(n, e)),\n          i = [\"#C51F33\", \"#F38316\", \"#F9B807\", \"#FBD46A\", \"#2D5638\", \"#418052\", \"#58B271\", \"#9ED78E\", \"#1B325F\", \"#2A4DA8\", \"#2B94E1\", \"#92C7D3\", \"#E84A62\", \"#ED7889\", \"#F3A5B0\", \"#0E0F0D\", \"#E5E5E5\"];\n     class a {\n          constructor(e = 0, t = 0, n = 0) {\n               return this.x = e, this.y = t, this.z = n, this\n          }\n          clone() {\n               return new a(this.x, this.y, this.z)\n          }\n          add(e) {\n               return this.x += e.x, this.y += e.y, this.z += e.z, this\n          }\n          addVectors(e, t) {\n               return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this\n          }\n          subVectors(e, t) {\n               return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this\n          }\n          multiplyScalar(e) {\n               return isFinite(e) ? (this.x *= e, this.y *= e, this.z *= e) : (this.x = 0, this.y = 0, this.z = 0), this\n          }\n          length() {\n               return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)\n          }\n     }\n     const o = a;\n     let l = (e => {\n               let t = [];\n               for (let n = 0; n < 32; n++) t.push(e.hash.slice(2 + 2 * n, 4 + 2 * n));\n               return t.map((e => parseInt(e, 16)))\n          })(tokenData),\n          h = (c = tokenData, parseInt(c.hash.slice(0, 8), 16));\n     var c;\n     let r = new class {\n          constructor(e) {\n               this.seed = e\n          }\n          random() {\n               return this.seed ^= this.seed << 13, this.seed ^= this.seed >> 17, this.seed ^= this.seed << 5, (this.seed < 0 ? 1 + ~this.seed : this.seed) % 1e3 \/ 1e3\n          }\n     }(h);\n     const d = \"AlgoRhythms#\" + ~~tokenData.tokenId.substr(tokenData.tokenId.length - 4);\n     let u, y, m, x, w, v, g, p, b, C, k, f;\n     const z = 2 * Math.PI \/ 3,\n          T = .5 * Math.PI \/ 3,\n          M = .015,\n          F = 1200;\n     let S, P, A, D = .1,\n          E = 0,\n          I = 0,\n          G = 0,\n          B = 0,\n          $ = 0,\n          N = 0,\n          O = 0,\n          L = {\n               startTime: -1,\n               value: 0\n          },\n          R = !1,\n          W = 0,\n          H = [],\n          j = [],\n          q = r.random() < .5;\n     const V = [{\n               name: \"Procedural\",\n               chance: .97,\n               value: 0\n          }, {\n               name: \"Full\",\n               chance: .002,\n               value: 1\n          }, {\n               name: \"Line\",\n               chance: .01,\n               value: 2\n          }, {\n               name: \"Diagonal\",\n               chance: .008,\n               value: 3\n          }, {\n               name: \"X\",\n               chance: .004,\n               value: 4\n          }, {\n               name: \"Plus\",\n               chance: .006,\n               value: 5\n          }],\n          J = [{\n               name: \"Full\",\n               chance: .1,\n               value: 0\n          }, {\n               name: \"Tall\",\n               chance: .35,\n               value: 1\n          }, {\n               name: \"Medium\",\n               chance: .35,\n               value: 2\n          }, {\n               name: \"Short\",\n               chance: .2,\n               value: 3\n          }],\n          Q = [{\n               name: \"None\",\n               chance: .4,\n               value: 0\n          }, {\n               name: \"Small\",\n               chance: .3,\n               value: .0075\n          }, {\n               name: \"Big\",\n               chance: .3,\n               value: .02\n          }],\n          U = [{\n               name: \"Solid\",\n               chance: .3,\n               value: 0\n          }, {\n               name: \"Tube\",\n               chance: .3,\n               value: 1\n          }, {\n               name: \"Mix\",\n               chance: .4,\n               value: 2\n          }],\n          X = [{\n               name: \"Color\",\n               chance: .6,\n               value: 0\n          }, {\n               name: \"Wireframe\",\n               chance: .05,\n               value: 1\n          }, {\n               name: \"Black Outline\",\n               chance: .25,\n               value: 2\n          }, {\n               name: \"White Outline\",\n               chance: .1,\n               value: 3\n          }],\n          Y = [{\n               name: \"Sine\",\n               chance: .4,\n               value: \"sine\",\n               index: 0\n          }, {\n               name: \"Square\",\n               chance: .2,\n               value: \"square\",\n               index: 1\n          }, {\n               name: \"Sawtooth\",\n               chance: .3,\n               value: \"sawtooth\",\n               index: 2\n          }, {\n               name: \"Triangle\",\n               chance: .1,\n               value: \"triangle\",\n               index: 3\n          }],\n          K = [{\n               name: \"Adagio (60bpm)\",\n               chance: .25,\n               value: 60\n          }, {\n               name: \"Moderato (90bpm)\",\n               chance: .6,\n               value: 90\n          }, {\n               name: \"Allegro (120bpm)\",\n               chance: .15,\n               value: 120\n          }],\n          Z = [{\n               name: \"Procedural\",\n               chance: .98,\n               value: 0\n          }, {\n               name: \"Lined\",\n               chance: .01,\n               value: 1\n          }, {\n               name: \"Diagonal\",\n               chance: .006,\n               value: 2\n          }, {\n               name: \"Circled\",\n               chance: .004,\n               value: 3\n          }],\n          _ = n(e(l[5], 0, 1), [{\n               chance: .02,\n               scales: {\n                    A: [\"A\"],\n                    B: [\"B\"],\n                    C: [\"C\"],\n                    D: [\"D\"],\n                    E: [\"E\"],\n                    F: [\"F\"],\n                    G: [\"G\"]\n               }\n          }, {\n               chance: .03,\n               scales: {\n                    \"Third & Sixth\": [\"A\", \"F\"]\n               }\n          }, {\n               chance: .05,\n               scales: {\n                    Quartal: [\"G\", \"C\", \"F\"],\n                    Minor9: [\"D\", \"D#\", \"A#\"]\n               }\n          }, {\n               chance: .1,\n               scales: {\n                    \"Ritsu (Japanese)\": [\"A\", \"B\", \"C\", \"E\"],\n                    \"Balinese (Indonesian)\": [\"B\", \"C\", \"F#\", \"G\"],\n                    \"Major Pentatonic-4\": [\"F#\", \"G#\", \"A#\", \"C#\"]\n               }\n          }, {\n               chance: .15,\n               scales: {\n                    \"Major Pentatonic\": [\"C\", \"D\", \"E\", \"G\", \"A\"],\n                    \"Minor Pentatonic\": [\"A\", \"C\", \"D\", \"E\", \"G\"],\n                    \"Han Iwato\": [\"G\", \"G#\", \"C\", \"D\", \"F\"],\n                    \"Yamatebala Wofe (Ethiopia)\": [\"F#\", \"G#\", \"B\", \"C#\", \"E\"]\n               }\n          }, {\n               chance: .25,\n               scales: {\n                    \"Major Blues from C\": [\"C\", \"D\", \"D#\", \"E\", \"G\", \"A\"],\n                    Satie: [\"A\", \"B\", \"C\", \"D#\", \"E\", \"F#\"],\n                    \"C# Aeolian\": [\"C#\", \"D#\", \"E\", \"F#\", \"G#\", \"A\"],\n                    \"Minor Pentatonic+A\": [\"G\", \"A\", \"A#\", \"C\", \"D\", \"F\"],\n                    \"Whole Tone\": [\"C#\", \"D#\", \"F\", \"G\", \"A\", \"B\"]\n               }\n          }, {\n               chance: .4,\n               scales: {\n                    \"Harmonic Minor\": [\"C#\", \"D#\", \"E\", \"F#\", \"G#\", \"A\", \"C\"],\n                    \"Hungarian Minor\": [\"A#\", \"C\", \"C#\", \"E\", \"F\", \"G\", \"G#\"],\n                    \"Spanish minor\": [\"G\", \"G#\", \"A#\", \"C\", \"C#\", \"E\", \"F\"],\n                    \"E Aeolian\": [\"E\", \"F#\", \"G\", \"A\", \"B\", \"C\", \"D#\"],\n                    \"Todi That (Indian)\": [\"B\", \"C\", \"D\", \"F\", \"F#\", \"G\", \"A#\"],\n                    \"Hijazkar (Middle Eastern)\": [\"A\", \"A#\", \"C#\", \"D\", \"E\", \"F\", \"G#\"]\n               }\n          }]),\n          ee = Object.keys(_.scales)[~~e(l[6], 0, Object.keys(_.scales).length - .01)],\n          te = ~~e(l[10], 1, 4.99),\n          ne = ~~e(l[11], 1, 4 - Math.max(0, te - 2) + .99),\n          se = [],\n          ie = t(i.splice(~~(r.random() * i.length), 1)[0]);\n     for (let e = 0; e < _.scales[ee].length; e++) {\n          const e = t(i.splice(~~(r.random() * i.length), 1)[0]);\n          se.push(e)\n     }\n     function ae() {\n          x = window.innerWidth, w = window.innerHeight, p = window.devicePixelRatio, g = Math.min(x, w), v = .36 * g, b = 2 * g \/ F, C = 1 * g \/ F, k = .5 * g \/ F, f = 80 * g \/ F, u.width = ~~(x * p), u.height = ~~(w * p), u.style.width = `${x}px`, u.style.height = `${w}px`\n     }\n\n     function oe(e) {\n          if (\"s\" == e.key) {\n               var t = u.toDataURL(\"image\/png\");\n               const e = document.createElement(\"a\");\n               e.download = `${d}.png`, e.href = t, e.click()\n          }\n     }\n\n     function le() {\n          if (!R) {\n               R = !0;\n               for (let e = 0; e < H.length; e++) H[e].block.highlight.value = 0;\n               L.startTime = E, \"running\" !== Tone.context.state && Tone.context.resume(), Tone.start(), Tone.Transport.start()\n          }\n     }\n     class he {\n          constructor(e, t, n, s) {\n               this.coords = e, this.coords2d = ce(this.coords), this.screenCoords = t, this.level = s, this.capacity = n, this.points = [], this.divided = !1, this.baseCenter = this.getCenter(), this.center = this.baseCenter.clone(), this.on = 1 != m.musicRests || r.random() > .2, this.holey = 2 == ~~m.blocksType ? r.random() > .5 : ~~m.blocksType, this.stroke = !this.on, this.noteIndex = 0, this.octaveIndex = 0, this.height = 0, this.playing = !1, this.startTime = 0, this.highlight = {\n                    value: 0\n               }\n          }\n          setNotes() {\n               if (this.divided) this.nw.setNotes(), this.ne.setNotes(), this.sw.setNotes(), this.se.setNotes();\n               else {\n                    const e = ~~(16 * (this.center.x + .5)),\n                         t = ~~(16 * (this.center.z + .5));\n                    if (0 == W) this.noteIndex = 0;\n                    else if (0 == m.musicPattern) this.noteIndex = ~~(r.random() * m.musicScale.length);\n                    else if (1 == m.musicPattern) this.noteIndex = q ? e % m.musicScale.length : t % m.musicScale.length;\n                    else if (2 == m.musicPattern) this.noteIndex = q ? (e + t) % m.musicScale.length : Math.abs(e - t) % m.musicScale.length;\n                    else {\n                         const n = new o(e - 8, t - 8, 0);\n                         this.noteIndex = ~~n.length() % m.musicScale.length\n                    }\n                    this.octaveIndex = ~~(r.random() * m.musicOctaveCount), this.height = 1 - this.octaveIndex \/ m.musicOctaveCount, this.center = this.getCenter(), this.updateColor(), W++\n               }\n          }\n          updateLastNote() {\n               this.divided ? this.se.updateLastNote() : (this.noteIndex = 0, this.octaveIndex = 0, this.updateColor())\n          }\n          updateColor() {\n               const e = m.palette.colors[this.noteIndex % m.palette.colors.length];\n               this.color = `hsl(${e.h}, ${e.s}%, ${e.l+6}%)`, this.lightColor = `hsl(${e.h}, ${e.s}%, ${e.l+12}%)`, this.darkColor = `hsl(${e.h}, ${e.s}%, ${e.l}%)`\n          }\n          addNote() {\n               if (this.divided) this.nw.addNote(), this.ne.addNote(), this.sw.addNote(), this.se.addNote();\n               else {\n                    let e = \"2n + 2n\";\n                    this.level >= 1 && (e = `${Math.pow(2,this.level)}n`), O = Tone.Time(e).toSeconds();\n                    const t = `${m.musicScale[this.noteIndex]}${m.musicStartingOctave+this.octaveIndex}`;\n                    this.on ? (H.push({\n                         time: N,\n                         note: t,\n                         duration: e,\n                         block: this\n                    }), j.push({\n                         note: m.musicScale[this.noteIndex],\n                         octave: m.musicStartingOctave + this.octaveIndex,\n                         level: this.level,\n                         duration: e\n                    })) : j.push({\n                         note: \"rest\",\n                         duration: e\n                    }), N += O\n               }\n          }\n          getCenter() {\n               const e = (new o).subVectors(this.coords[6], this.coords[0]).multiplyScalar(.5),\n                    t = (new o).addVectors(this.coords[0], e);\n               return t.x = Math.min(this.coords[6].x - 0, Math.max(this.coords[0].x + 0, t.x)), t.y = Math.max(this.coords[6].y + 0, Math.min(this.coords[0].y - 0, t.y)), t.z = Math.max(this.coords[6].z + 0, Math.min(this.coords[0].z - 0, t.z)), t\n          }\n          insert(e) {\n               if (!(e.x >= this.screenCoords.x * x && e.x < (this.screenCoords.x + this.screenCoords.w) * x && e.y >= this.screenCoords.y * w && e.y < (this.screenCoords.y + this.screenCoords.h) * w)) return !1;\n               if (this.level + 1 <= 4)\n                    if (this.divided) {\n                         if (this.nw.insert(e)) return !0;\n                         if (this.ne.insert(e)) return !0;\n                         if (this.sw.insert(e)) return !0;\n                         if (this.se.insert(e)) return !0\n                    } else this.subdivide()\n          }\n          subdivide() {\n               const e = this.level + 1;\n               e > $ && ($ = e);\n               const {\n                    ne: t,\n                    nw: n,\n                    se: s,\n                    sw: i\n               } = function(e, t) {\n                    const n = v * (m.blocksMargin \/ v),\n                         s = [new o(e[0].x, e[0].y, t.z - n), new o(t.x - n, e[1].y, t.z - n), new o(t.x - n, e[2].y, e[3].z), new o(e[3].x, e[3].y, e[3].z), new o(e[4].x, e[4].y, t.z - n), new o(t.x - n, e[5].y, t.z - n), new o(t.x - n, e[6].y, e[6].z), new o(e[7].x, e[7].y, e[7].z)],\n                         i = [new o(t.x + n, e[0].y, t.z - n), new o(e[1].x, e[1].y, t.z - n), new o(e[2].x, e[2].y, e[2].z), new o(t.x + n, e[3].y, e[3].z), new o(t.x + n, e[4].y, t.z - n), new o(e[5].x, e[5].y, t.z - n), new o(e[6].x, e[6].y, e[6].z), new o(t.x + n, e[7].y, e[7].z)],\n                         a = [new o(e[0].x, e[0].y, e[0].z), new o(t.x - n, e[1].y, e[1].z), new o(t.x - n, e[2].y, t.z + n), new o(e[3].x, e[3].y, t.z + n), new o(e[4].x, e[4].y, e[4].z), new o(t.x - n, e[5].y, e[5].z), new o(t.x - n, e[6].y, t.z + n), new o(e[7].x, e[7].y, t.z + n)];\n                    return {\n                         nw: s,\n                         ne: i,\n                         se: [new o(t.x + n, e[0].y, e[0].z), new o(e[1].x, e[1].y, e[1].z), new o(e[2].x, e[2].y, t.z + n), new o(t.x + n, e[3].y, t.z + n), new o(t.x + n, e[4].y, e[4].z), new o(e[5].x, e[5].y, e[5].z), new o(e[6].x, e[6].y, t.z + n), new o(t.x + n, e[7].y, t.z + n)],\n                         sw: a\n                    }\n               }(this.coords, this.center), a = function(e) {\n                    const t = .5 * e.w,\n                         n = .5 * e.h;\n                    return {\n                         nw: {\n                              x: e.x,\n                              y: e.y,\n                              w: t,\n                              h: n\n                         },\n                         ne: {\n                              x: e.x + t,\n                              y: e.y,\n                              w: t,\n                              h: n\n                         },\n                         se: {\n                              x: e.x + t,\n                              y: e.y + n,\n                              w: t,\n                              h: n\n                         },\n                         sw: {\n                              x: e.x,\n                              y: e.y + n,\n                              w: t,\n                              h: n\n                         }\n                    }\n               }(this.screenCoords);\n               this.ne = new he(t, a.ne, this.capacity, e), this.nw = new he(n, a.nw, this.capacity, e), this.se = new he(s, a.se, this.capacity, e), this.sw = new he(i, a.sw, this.capacity, e), this.divided = !0\n          }\n          update() {\n               var e;\n               if (this.playing)\n                    if (this.divided) this.ne.update(), this.nw.update(), this.sw.update(), this.se.update();\n                    else {\n                         let t = s(E - this.startTime, 0, .5) \/ .5,\n                              n = (e = t, 1 + 4 * Math.pow(e - 1, 3) + 3 * Math.pow(e - 1, 2));\n                         this.highlight.value = n, t >= 1 && (this.playing = !1)\n                    }\n          }\n          draw(e) {\n               this.divided ? (this.nw.draw(e), this.ne.draw(e), this.sw.draw(e), this.se.draw(e)) : (e.strokeStyle = 1 == m.blocksStyle ? this.darkColor : m.palette.stroke, this.on && this.drawCube(e, m.blocksStyle >= 1, 1 == m.blocksStyle))\n          }\n          drawCube(e, t = !1, n = !1) {\n               const s = ce(this.coords, this.highlight.value, this.height);\n               if (e.fillStyle = n ? m.palette.background : this.darkColor, e.beginPath(), e.moveTo(s[1].x - 1, s[2].y), e.lineTo(s[2].x, s[2].y), e.lineTo(s[6].x, s[6].y), e.lineTo(s[5].x, s[5].y), e.lineTo(s[5].x - 1, s[5].y - 1), e.closePath(), e.fill(), t && e.stroke(), e.fillStyle = n ? m.palette.background : this.color, e.beginPath(), e.lineTo(s[1].x, s[0].y), e.lineTo(s[0].x, s[0].y), e.lineTo(s[4].x, s[4].y), e.lineTo(s[5].x, s[5].y), e.closePath(), e.fill(), t && e.stroke(), e.fillStyle = n ? m.palette.background : this.lightColor, e.beginPath(), e.moveTo(s[0].x, s[0].y), e.lineTo(s[1].x, s[1].y), e.lineTo(s[2].x, s[2].y), e.lineTo(s[3].x, s[3].y), e.closePath(), e.fill(), t && e.stroke(), e.beginPath(), e.moveTo(s[0].x, s[0].y), e.lineTo(s[3].x, s[3].y), e.lineTo(s[2].x, s[2].y), e.lineTo(s[6].x, s[6].y), e.lineTo(s[5].x, s[5].y), e.lineTo(s[4].x, s[4].y), e.closePath(), t && (e.lineWidth = b, e.stroke(), e.lineWidth = C), this.holey) {\n                    const s = [];\n                    s[0] = this.coords[0].clone().add(new o(M, 0, -.015)), s[1] = this.coords[1].clone().add(new o(-.015, 0, -.015)), s[2] = this.coords[2].clone().add(new o(-.015, 0, M)), s[3] = this.coords[3].clone().add(new o(M, 0, M));\n                    const i = ce(s, this.highlight.value, this.height);\n                    e.lineWidth = k, e.fillStyle = n ? m.palette.background : this.color, e.beginPath(), e.lineTo(i[1].x, i[1].y), e.lineTo(i[2].x, i[2].y), e.lineTo(i[3].x, i[3].y), e.fill(), t && e.stroke(), e.fillStyle = n ? m.palette.background : this.darkColor, e.beginPath(), e.moveTo(i[0].x, i[0].y), e.lineTo(i[1].x, i[1].y), e.lineTo(i[3].x, i[3].y), e.closePath(), e.fill(), t && e.stroke(), e.lineWidth = C\n               }\n          }\n     }\n\n     function ce(e, t = 0, n = 0) {\n          const s = [];\n          for (let a = 0; a < e.length; a++) s[a] = (i = e[a].clone().multiplyScalar(v), new o(i.x * Math.cos(T) + i.z * Math.cos(T + z) + i.y * Math.cos(T - z), i.x * Math.sin(T) + i.z * Math.sin(T + z) + i.y * Math.sin(T - z), 0)), s[a].y -= t * f, s[a].y += L.value * f, a >= 4 ? s[a].y -= n * (m.blocksHeight * (v \/ 4)) * .5 : s[a].y += m.blocksHeight * (v \/ 4) * .5;\n          var i;\n          return s\n     }\n\n     function re() {\n          I = Date.now(), G = I - B, B = I, E += G \/ 1e3, requestAnimationFrame(re),\n               function() {\n                    if (R) {\n                         let e = s(E - L.startTime, 0, D) \/ D;\n                         if (L.value = e, L.value >= 1) {\n                              let e = !0;\n                              for (let t = 0; t < H.length; t++) H[t].block.playing && (e = !1);\n                              e && (Tone.Transport.stop(), R = !1)\n                         }\n                    }\n                    y.save(), y.scale(p, p), y.clearRect(0, 0, x, w), y.globalCompositeOperation = \"source-over\", y.save(), y.translate(.5 * x, .5 * w);\n                    for (let e = 0; e < H.length; e++) H[e].block.update();\n                    S.draw(y), y.restore(), y.globalCompositeOperation = \"destination-over\", y.fillStyle = m.palette.background, y.fillRect(0, 0, x, w), y.restore()\n               }()\n     }\n     window.onload = function() {\n          document.title = d,\n               function() {\n                    u = document.createElement(\"canvas\"), y = u.getContext(\"2d\"), document.body.appendChild(u), ae(), m = {\n                         subdivisionsCount: ~~e(l[0], 0, 100),\n                         subdivisionsPattern: n(e(l[12], 0, 1), V).value,\n                         blocksHeight: n(e(l[1], 0, 1), J).value,\n                         blocksMargin: n(e(l[2], 0, 1), Q).value,\n                         blocksType: n(e(l[3], 0, 1), U).value,\n                         blocksStyle: n(e(l[4], 0, 1), X).value,\n                         musicScale: _.scales[ee],\n                         musicOscillator: n(e(l[7], 0, 1), Y).value,\n                         musicBpm: n(e(l[8], 0, 1), K).value,\n                         musicRests: e(l[9], 0, 1) < .25,\n                         musicStartingOctave: te,\n                         musicOctaveCount: ne,\n                         musicPattern: n(e(l[13], 0, 1), Z).value,\n                         palette: {\n                              background: `hsl(${ie.h}, ${ie.s}%, ${ie.l}%)`,\n                              stroke: \"#0E0F0D\",\n                              colors: se\n                         }\n                    }, 3 == m.blocksStyle && (m.palette.stroke = \"#FFFFFF\");\n                    const t = [new o(-.5, .5, .5), new o(.5, .5, .5), new o(.5, .5, -.5), new o(-.5, .5, -.5), new o(-.5, -.5, .5), new o(.5, -.5, .5), new o(.5, -.5, -.5), new o(-.5, -.5, -.5)];\n                    S = new he(t, {\n                         x: 0,\n                         y: 0,\n                         w: 1,\n                         h: 1\n                    }, 1, 0);\n                    let s = m.subdivisionsCount;\n                    0 != m.subdivisionsPattern ? s = 1e3 : 0 != m.musicPattern && (s = 100);\n                    for (let e = 0; e < s; e++) {\n                         let e, t;\n                         if (m.subdivisionsPattern <= 1) e = r.random() * x, t = r.random() * w;\n                         else if (2 == m.subdivisionsPattern || 5 == m.subdivisionsPattern)(5 == m.subdivisionsPattern ? r.random() < .5 : q) ? (e = .1 * r.random() - .05 + .5 * x, t = r.random() * w) : (e = r.random() * x, t = .1 * r.random() - .05 + .5 * w);\n                         else {\n                              let n = 4 == m.subdivisionsPattern ? r.random() < .5 : q,\n                                   s = r.random();\n                              n ? (e = s * x, t = s * w) : (e = s * x, t = w - s * w)\n                         }\n                         S.insert(new o(e, t, 0))\n                    }\n                    S.setNotes(), S.updateLastNote(), P = new Tone.PolySynth(Tone.MonoSynth, {\n                         volume: -8,\n                         oscillator: {\n                              type: `${m.musicOscillator}8`,\n                              modulationFrequency: .2\n                         },\n                         envelope: {\n                              attack: .01,\n                              decay: .3,\n                              sustain: .2,\n                              release: .4\n                         },\n                         filterEnvelope: {\n                              attack: .001,\n                              decay: .7,\n                              sustain: .1,\n                              release: .8,\n                              baseFrequency: 300\n                         }\n                    }).toDestination(), Tone.Transport.bpm.value = m.musicBpm, S.addNote(), A = new Tone.Part(((e, t) => {\n                         P.triggerAttackRelease(t.note, t.duration, e), t.block.startTime = E, t.block.playing = !0\n                    }), H).start(0), D = N, document.addEventListener(\"click\", le), document.addEventListener(\"touchstart\", le), document.addEventListener(\"keydown\", oe), window.addEventListener(\"resize\", ae)\n               }(), re()\n     }\n})();"
}